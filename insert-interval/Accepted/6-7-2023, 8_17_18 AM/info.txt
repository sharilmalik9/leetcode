{"id":965571693,"lang":"java","lang_name":"Java","time":"3Â weeks","timestamp":1686106038,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/965571693/","is_pending":"Not Pending","title":"Insert Interval","memory":"44 MB","code":"class Solution {\n    public int[][] insert(int[][] ints, int[] newInterval) {\n        int[][] intervals = new int[ints.length + 1][2];\n        for (int i = 0; i < ints.length; i++) {\n            intervals[i][0] = ints[i][0];\n            intervals[i][1] = ints[i][1];\n        }\n        intervals[intervals.length - 1][0] = newInterval[0];\n        intervals[intervals.length - 1][1] = newInterval[1];\n\n        Arrays.sort(intervals, (o1, o2) -> Integer.compare(o1[0], o2[0]));\n        int count = 0, start = intervals[0][0], end = intervals[0][1];\n        int[][] resTemp = new int[intervals.length][2];\n        for (int i = 1; i < intervals.length; i++) {\n            int s = intervals[i][0], e = intervals[i][1];\n            if (s <= end) {\n                end = Math.max(e, end);\n            } else {\n                resTemp[count][0] = start;\n                resTemp[count++][1] = end;\n                start = s;\n                end = e;\n            }\n        }\n        resTemp[count][0] = start;\n        resTemp[count++][1] = end;\n\n        int[][] res = new int[count][2];\n        for (int i = 0; i < count; i++) {\n            res[i] = resTemp[i];\n        }\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"insert-interval","has_notes":false}