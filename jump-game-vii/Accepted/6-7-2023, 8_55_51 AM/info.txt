{"id":965587716,"lang":"java","lang_name":"Java","time":"3Â weeks","timestamp":1686108351,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/965587716/","is_pending":"Not Pending","title":"Jump Game VII","memory":"57 MB","code":"class Solution {\n    public boolean canReach(String s, int minJump, int maxJump) {\n        if(s.charAt(s.length() - 1) != '0')\n            return false;\n        \n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(0);\n        \n        // This variable tells us till which index we have processed\n        int maxReach = 0;\n        \n        while(!queue.isEmpty()){\n            int idx = queue.remove();\n            // If we reached the last index\n            if(idx == s.length() - 1)\n                return true;\n            \n            // start the loop from max of [current maximum (idx + minJump), maximum processed index (maxReach)]\n            for(int j = Math.max(idx + minJump, maxReach); j <= Math.min(idx + maxJump, s.length() - 1); j++){\n                if(s.charAt(j) == '0')\n                    queue.add(j);\n            }\n            \n            // since we have processed till idx + maxJump so update maxReach to next index\n            maxReach = Math.min(idx + maxJump + 1, s.length() - 1);\n        }\n        \n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-vii","has_notes":false}