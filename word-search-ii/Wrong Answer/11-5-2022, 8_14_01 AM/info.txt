{"id":837094846,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1667616241,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/837094846/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution {\n    HashSet<String> hs= new HashSet<>();\n    List<String> ls= new ArrayList<>();\n    StringBuilder sb=new StringBuilder();\n    public List<String> findWords(char[][] board, String[] words) {\n        boolean[][] vis=new boolean[board.length][board[0].length];\n        int max=0;\n        for(String i: words){\n            hs.add(i);\n            max=Math.max(max,i.length());\n        }\n        for(int i=0;i<board.length;i++){\n            for(int j=0;j<board[0].length;j++){\n                dfs(board,i,j,max,1,vis);\n            }\n        }\n        return ls;\n    }\n    public void dfs(char[][] board,int i,int j,int max,int len,boolean[][] vis){\n        if(i<0 || j<0|| i>=board.length|| j>=board[0].length){\n            return;\n        }\n        if(vis[i][j] || len>=max){\n            return;\n        }\n        sb.append(board[i][j]);\n        vis[i][j]=true;\n        if(hs.contains(sb.toString())){\n            ls.add(sb.toString()); \n        }\n        dfs(board,i-1,j,max,len+1,vis);\n        dfs(board,i+1,j,max,len+1,vis);\n        dfs(board,i,j-1,max,len+1,vis);\n        dfs(board,i,j+1,max,len+1,vis);\n        vis[i][j]=false;\n        sb.deleteCharAt(sb.length()-1);\n        \n    }\n}","compare_result":"0101100010011000010000000000011110000000000000000000000000000000","title_slug":"word-search-ii","has_notes":false}