{"id":898027555,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1676399618,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/898027555/","is_pending":"Not Pending","title":"Largest Component Size by Common Factor","memory":"N/A","code":"class Solution {\n    int[] parent;\n    public int largestComponentSize(int[] nums) {\n    \n        Arrays.sort(nums);\n        parent= new int[100001];\n        for(int i=0;i<parent.length;i++){\n             parent[i]=-1;\n        }\n        for(int i=0;i<nums.length;i++){\n            for(int j=2;j<=nums[i]/2;j++){\n                 if(nums[i]%j==0){\n                     union(j,nums[i]);\n                     union(nums[i],nums[i]/j);\n                \n            }\n          }\n        }\n         \n         int[] cnt= new int[parent.length];\n         int ans=0;\n         for(int i=0;i<nums.length;i++){\n             ans=Math.max(ans,++cnt[find(nums[i])]);\n\n         }\n         return ans;\n    }\n    public int find(int x){\n        if(parent[x]==-1){\n            return x;\n        }\n        return parent[x]=find(parent[x]);\n    }\n    public void union(int x,int y){\n        int px=find(x);\n        int py=find(y);\n        if(px==py){\n            return;\n        }\n        parent[px]=py;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000","title_slug":"largest-component-size-by-common-factor","has_notes":false}