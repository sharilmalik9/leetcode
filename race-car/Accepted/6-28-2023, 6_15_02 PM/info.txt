{"id":981601916,"lang":"java","lang_name":"Java","time":"6 hours, 48 minutes","timestamp":1687956302,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/981601916/","is_pending":"Not Pending","title":"Race Car","memory":"43.6 MB","code":"class Solution {\n    public int racecar(int target) {\n        // if(currentPosition < target) then accelerate\n        // if(currentPosition > target) then reverse\n\n        Queue<int[]> q = new LinkedList<>();\n        HashSet<int[]> visited = new HashSet<>();\n\n        q.add(new int[] {0, 0, 1}); // -> {moves, position, speed}\n        while(!q.isEmpty()){\n            int[] instance = q.poll();\n            \n            int moves = instance[0];\n            int position = instance[1];\n            int speed = instance[2];\n\n            if(position == target){\n                return moves;\n            } else if(visited.contains(instance)){\n                continue;\n            }\n\n            visited.add(instance);\n            q.add(new int[] {moves + 1, position + speed, speed * 2});\n\n            if((position + speed > target && speed > 0) || (position + speed < target && speed < 0)){\n                q.add(new int[] {moves + 1, position, speed > 0 ? -1 : 1});\n            }\n        }\n\n        return -1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"race-car","has_notes":false}