{"id":867317166,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1672291958,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/867317166/","is_pending":"Not Pending","title":"Single-Threaded CPU","memory":"N/A","code":"class Solution {\n    class pair{\n        int idx;\n        int start;\n        int time;\n        pair(int idx,int start,int time){\n            this.idx=idx;\n            this.start=start;\n            this.time=time;\n        }\n    }\n    public int[] getOrder(int[][] tasks){\n        pair[] arr= new pair[tasks.length];\n        int[] ans= new int[tasks.length];\n        int idx=0;\n        for(int i=0;i<tasks.length;i++){\n            pair pp= new pair(i,tasks[i][0],tasks[i][1]);\n            arr[i]=pp;\n        }\n        Arrays.sort(arr,(a,b)-> (a.start==b.start)? a.time-b.time : a.start-b.start);\n        int time=arr[0].start;\n        time+=arr[0].time;\n        ans[idx]=arr[0].idx;\n        idx++;\n        int idx1=1;\n        PriorityQueue<pair> pq= new PriorityQueue<>((a,b)-> (a.time==b.time) ? a.idx-b.idx : a.time-b.time);\n        while(idx<ans.length){\n             while(idx1<arr.length && arr[idx1].start<=time){\n                 pq.add(arr[idx1]);\n                 idx1++;\n             }\n             if(pq.size()!=0){\n                 pair curr=pq.poll();\n             time+=curr.time;\n             ans[idx]=curr.idx;\n             idx++;\n\n             }\n              else{\n                  time++;\n              }\n\n\n\n\n\n\n        }\n       return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111110","title_slug":"single-threaded-cpu","has_notes":false}