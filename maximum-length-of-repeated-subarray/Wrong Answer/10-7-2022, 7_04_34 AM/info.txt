{"id":816878289,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1665106474,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/816878289/","is_pending":"Not Pending","title":"Maximum Length of Repeated Subarray","memory":"N/A","code":"class Solution {\n    public int findLength(int[] nums1, int[] nums2) {\n        String s=\"\";\n        for(int i:nums1){\n            s+=String.valueOf(i);\n            \n        }\n        System.out.println(s);\n          String t=\"\";\n        for(int i:nums2){\n            t+=String.valueOf(i);\n            \n        }\n        System.out.println(t);\n        return longestCommonSubsequence(s,t);\n        \n    }\n    public int longestCommonSubsequence(String s, String t) {\n        int m=s.length();\n        int n=t.length();\n        int dp[][] = new int[m+1][n+1];\n        int max=0;\n        \n        for(int i = m-1; i>=0 ; i--){\n        \tfor(int j = n-1; j>=0 ; j--){\n                \n                int ans;\n\t\t\t\tif(s.charAt(i) == t.charAt(j)){\n                    dp[i][j]=dp[i+1][j+1]+1;\n                }\n                if(dp[i][j]>max){\n                      max=dp[i][j];\n                }\n              \n               \n               \n            }\n        }\n        return max;\n    }\n}","compare_result":"11111111000001111111000001111111111000001111100000000","title_slug":"maximum-length-of-repeated-subarray","has_notes":false}