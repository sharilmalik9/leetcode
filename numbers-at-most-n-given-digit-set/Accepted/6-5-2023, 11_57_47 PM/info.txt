{"id":964606271,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1685989667,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/964606271/","is_pending":"Not Pending","title":"Numbers At Most N Given Digit Set","memory":"39.9 MB","code":"class Solution {\n    String s;\n    String[] digits;\n    Integer dp[][][];\n    public int atMostNGivenDigitSet(String[] digits, int n) {\n        s = Integer.toString(n);\n        this.digits = digits;\n        dp = new Integer[s.length()][2][2];\n\n        return f(0,true, false) - 1;\n        \n    }\n\n    public int f(int idx, boolean bound, boolean started){\n\n        if(idx == s.length()) {\n            return 1;\n        }\n        if(dp[idx][bound ? 1: 0][started ? 1: 0] != null) return dp[idx][bound ? 1: 0][started ? 1: 0];\n\n        int max = 9;\n        if(bound){\n            max = s.charAt(idx) - '0';\n        }\n        \n        int ans = 0;\n\n        if(!started){\n            ans += f(idx+1,false, false );\n        }\n        \n        for(String i : digits){\n            if(i.charAt(0) - '0' <= max){\n                ans += f(idx +1, bound && s.charAt(idx) == i.charAt(0), true);\n            }\n        }\n\n        return dp[idx][bound ? 1: 0][started ? 1: 0] = ans;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"numbers-at-most-n-given-digit-set","has_notes":false}