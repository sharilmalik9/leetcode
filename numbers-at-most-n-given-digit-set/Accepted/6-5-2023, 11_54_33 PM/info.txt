{"id":964603934,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1685989473,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/964603934/","is_pending":"Not Pending","title":"Numbers At Most N Given Digit Set","memory":"40.6 MB","code":"class Solution {\n    String s;\n    char[] digit;\n    Integer[][][] dp;\n    public int atMostNGivenDigitSet(String[] digits, int n) {\n        s=Integer.toString(n);\n        digit=new char[digits.length];\n        dp=new Integer[2][s.length()+1][2];\n        for(int i=0;i<digits.length;i++){\n            digit[i]=digits[i].charAt(0);\n        }\n        return rec(true,0,false)-1;\n    }\n    public int rec(boolean bounded,int idx,boolean started){\n        if(idx>=s.length()){\n            return 1;\n        }\n        int ans=0;\n        if(dp[bounded?1:0][idx][started?1:0]!=null){\n            return dp[bounded?1:0][idx][started?1:0];\n        }\n        if(!started){\n            ans+=rec(bounded && s.charAt(idx)-'0'=='0',idx+1,started);\n        }\n        for(int i=0;i<digit.length;i++){\n            if(bounded && digit[i]-'0'<=s.charAt(idx)-'0'){\n                System.out.println(idx+\" \"+digit[i]);\n                ans+=rec(bounded && digit[i]-'0'==s.charAt(idx)-'0',idx+1,true);\n            }\n            else if(!bounded){\n                ans+=rec(bounded,idx+1,true);\n            }\n        }\n        return dp[bounded?1:0][idx][started?1:0]=ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"numbers-at-most-n-given-digit-set","has_notes":false}