{"id":784708215,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1661607145,"status":10,"status_display":"Accepted","runtime":"101 ms","url":"/submissions/detail/784708215/","is_pending":"Not Pending","title":"The Number of the Smallest Unoccupied Chair","memory":"95.6 MB","code":"// class Solution {\n//     class pair{\n//         boolean arrival;\n//         int index;\n//         int time;\n//         pair(boolean arrival,int index,int time){\n//             this.arrival=arrival;\n//                 this.index=index;\n//             this.time=time;\n// }\n//     }\n    \n//     public int smallestChair(int[][] times, int targetFriend) {\n//         PriorityQueue<pair> pq= new PriorityQueue<>((a,b)->a.time-b.time);\n//         for(int i=0;i<times.length;i++){\n//             pair pp= new pair(true,i,times[i][0]);\n//             pair pp1= new pair(false,i,times[i][1]);\n//             pq.add(pp);\n//             pq.add(pp1);  \n            \n// }\n//         HashMap<Integer,Integer> hp= new HashMap<>();\n//         PriorityQueue<Integer> left= new PriorityQueue<>();\n//         int[] arr= new int[times.length];\n//         int end=0;\n//         int empty=0;\n//         while(pq.size()!=0){\n//             pair curr= pq.poll();\n//             if(pq.peek().time!=curr.time){\n                \n            \n//             if(curr.arrival){\n//                 if(left.size()!=0){\n//                     empty=left.poll();\n//                     arr[empty]=curr.index;\n//                     hp.put(curr.index,empty);\n//                     if(curr.index==targetFriend){\n//                         return empty;\n//                     }\n                              \n                    \n//           }\n//                 else{\n//                     arr[end]=curr.index;\n//                     hp.put(curr.index,end);\n//                      if(curr.index==targetFriend){\n//                            return end;\n//                      }\n//                     end++;\n                    \n//                 }        \n//          }\n//             else{\n//                int hey= hp.get(curr.index);\n//                 System.out.println(hey);\n//                 hp.remove(curr.index);\n//                left.add(hey);\n               \n                \n//             }\n//             }\n//             else{\n//                 pair next = pq.poll(); \n//                 if(!curr.arrival){\n//                       int hey= hp.get(curr.index);\n//                 System.out.println(hey);\n//                 hp.remove(curr.index);\n//                left.add(hey);\n//                     if(left.size()!=0){\n//                     empty=left.poll();\n//                     arr[empty]=next.index;\n//                     hp.put(next.index,empty);\n//                     if(next.index==targetFriend){\n//                         return empty;\n//                     }\n                              \n                    \n//           }\n//                 else{\n//                     arr[end]=next.index;\n//                     hp.put(next.index,end);\n//                      if(next.index==targetFriend){\n//                            return end;\n//                      }\n//                     end++;\n                    \n//                 }        \n                    \n                    \n                    \n//                 }\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n//                 else{\n//                     int hey= hp.get(next.index);\n//                 System.out.println(hey);\n//                 hp.remove(next.index);\n//                left.add(hey);\n//                     if(left.size()!=0){\n//                     empty=left.poll();\n//                     arr[empty]=curr.index;\n//                     hp.put(curr.index,empty);\n//                     if(curr.index==targetFriend){\n//                         return empty;\n//                     }\n                              \n                    \n//           }\n//                 else{\n//                     arr[end]=curr.index;\n//                     hp.put(curr.index,end);\n//                      if(curr.index==targetFriend){\n//                            return end;\n//                      }\n//                     end++;\n                    \n//                 }        \n                    \n                    \n                    \n                    \n//                 }\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n//             }\n            \n            \n//         }\n//        return -1 ; \n//     }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Solution {\n    public int smallestChair(int[][] times, int targetFriend) {\n        PriorityQueue<int[]> friends = new PriorityQueue<>((a,b) -> a[0] - b[0]);\n        \n        HashMap<Integer, List<Integer>> leaving_chair = new HashMap<>();\n        \n        int index = 0;\n        \n        for(int[] time: times){\n            friends.offer(new int[]{time[0], time[1], index++});\n            \n            leaving_chair.putIfAbsent(time[1], new ArrayList<>());\n        }\n        \n        PriorityQueue<Integer> chairs = new PriorityQueue<>();\n        \n        int newChair = 0;\n        \n        int time = friends.peek()[0];\n        \n        while(!friends.isEmpty()){\n            if(leaving_chair.containsKey(time)){\n                for(int i: leaving_chair.get(time))\n                    chairs.offer(i);\n            }\n            if(friends.peek()[0] == time){\n                int friend = friends.peek()[2];\n                int arrival = friends.peek()[0];\n                int leaving = friends.poll()[1];\n\n                int chair = 0;\n\n                if(!chairs.isEmpty())\n                    chair = chairs.poll();\n                else\n                    chair = newChair++;\n\n                leaving_chair.get(leaving).add(chair);\n\n                if(friend == targetFriend)\n                    return chair;\n            }\n            time++;\n        }\n        return 0;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-number-of-the-smallest-unoccupied-chair","has_notes":false}