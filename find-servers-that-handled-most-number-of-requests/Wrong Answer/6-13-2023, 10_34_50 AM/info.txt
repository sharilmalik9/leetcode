{"id":970029622,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1686632690,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/970029622/","is_pending":"Not Pending","title":"Find Servers That Handled Most Number of Requests","memory":"N/A","code":"class Solution {\n    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n        TreeSet<Integer> servers =new TreeSet<>();\n        for(int i=0;i<load.length;i++){\n            servers.add(i);\n        }\n        int[] ans=new int[load.length];\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[0]-b[0]);\n        for(int i=0;i<arrival.length;i++){\n            int start=arrival[i];\n            while(pq.size()!=0 && pq.peek()[0]<=start){\n                servers.add(pq.poll()[1]);\n\n            }\n            if(servers.ceiling(i%k)==null){\n                continue;\n            }\n            else{\n                int val=servers.ceiling(i%k);\n                servers.remove(val);\n                pq.add(new int[] {load[val]+start,val});\n                ans[val]+=1;\n            }\n        }\n        int hehe=0;\n        for(int i=0;i<ans.length;i++){\n            hehe=Math.max(hehe,ans[i]);\n        }\n        List<Integer> hm=new ArrayList<>();\n        for(int i=0;i<ans.length;i++){\n            if(ans[i]==hehe){\n                hm.add(i);\n            }\n        }\n        return hm;\n    }\n}","compare_result":"111111111101111111111001111011001110111111000110111000011000101011011001110000010100000100011010001110000010","title_slug":"find-servers-that-handled-most-number-of-requests","has_notes":false}