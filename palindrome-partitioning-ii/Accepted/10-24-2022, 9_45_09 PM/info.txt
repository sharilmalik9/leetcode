{"id":829353169,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666628109,"status":10,"status_display":"Accepted","runtime":"2403 ms","url":"/submissions/detail/829353169/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"301.1 MB","code":"class Solution {\n    int[][] dp = new int[2001][2001];\n    public int minCut(String str) {\n        int i=0, j=str.length()-1;\n        \n        for (int[] ks : dp) {\n\t\t\tArrays.fill(ks, -1);\n\t\t}\n        return minPalPartion(str,i,j);\n\n    }\n    int minPalPartion(String string, int i, int j){   \n      if( i >= j || isPalindrome(string, i, j) )\n        return 0;\n        \n        if(dp[i][j]!=-1){\n            return dp[i][j];\n        }\n         dp[i][j] = Integer.MAX_VALUE;\n         for(int k = i; k < j; k++){\n             if(isPalindrome(string,i,k)){\n              int count = Math.min(dp[i][j], minPalPartion(string, i, k) + minPalPartion(string, k + 1, j) + 1);\n              dp[i][j]=count;\n             }\n         }\n    return dp[i][j];\n  }\n    \n    boolean isPalindrome(String string, int i, int j){\n      while(i < j){\n      if(string.charAt(i) != string.charAt(j))\n        return false; \n      i++;\n      j--;\n    }\n    return true;\n  }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"palindrome-partitioning-ii","has_notes":false}