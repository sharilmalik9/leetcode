{"id":896886741,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1676256966,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/896886741/","is_pending":"Not Pending","title":"Shortest Path with Alternating Colors","memory":"43.1 MB","code":"class Solution {\n    public int[] shortestAlternatingPaths(int n, int[][] redEdges, int[][] blueEdges) {\n      List<List<List<Integer>>> ls= new ArrayList<>();\n      for(int i=0;i<n;i++){\n          ls.add(new ArrayList<>());\n          ls.get(i).add(new ArrayList<>());\n          ls.get(i).add(new ArrayList<>());\n      }\n      for (int[] edge : redEdges) {\n            ls.get(edge[0]).get(0).add(edge[1]);     \n        }\n        for (int[] edge : blueEdges) {\n            ls.get(edge[0]).get(1).add(edge[1]);   \n        } \n        int[] ans= new int[n];\n        Arrays.fill(ans,-1);\n        Queue<int[]> que= new LinkedList<>();\n        boolean[][] vis= new boolean[2][n];\n        que.add(new int[]{0,0,0});\n        que.add(new int[]{0,1,0});\n        while(que.size()>0){\n            int[] curr= que.poll();\n            int node=curr[0];\n            int color=curr[1];\n            int dis=curr[2];\n            if(vis[color][node]){\n                continue;\n\n            }\n            vis[color][node]=true;\n            if(ans[node]==-1){\n                ans[node]=dis;\n            }\n            for(int neigh :ls.get(node).get(color)){\n                int nextcolor=color==0 ? 1 :0;\n                if(!vis[nextcolor][neigh]){\n                    que.add(new int[]{neigh,nextcolor,dis+1});\n                }\n            }\n\n\n        }\n        return ans; \n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-with-alternating-colors","has_notes":false}