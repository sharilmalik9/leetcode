{"id":913895064,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1678637646,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/913895064/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"44.5 MB","code":"class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) {\n            return null;\n        }\n        return divideAndConquer(lists, 0, lists.length - 1);\n    }\n    public ListNode divideAndConquer(ListNode[] lists,int low,int high){\n        if(low>high)\n            return null;\n        if(low==high)\n            return lists[low];\n        int mid=low+(high-low)/2;\n        ListNode left=divideAndConquer(lists,low,mid);\n        ListNode right=divideAndConquer(lists,mid+1,high);\n        return merge(left,right);\n    }\n    public ListNode merge(ListNode n1, ListNode n2) {\n        ListNode dummy = new ListNode(-1);\n        ListNode prev = dummy;\n        while (n1!=null && n2!=null){\n            if (n1.val<n2.val) {\n                prev.next = n1;\n                n1 = n1.next;\n            }\n            else{\n                prev.next = n2;\n                n2 = n2.next;\n            }\n            prev = prev.next;\n        }\n        if(n1!=null)\n            prev.next=n1;\n        if(n2!=null)\n            prev.next=n2;\n        return dummy.next;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false}