{"id":810230291,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1664329821,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/810230291/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"47.5 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    \n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue<ListNode> pq= new PriorityQueue<>((a,b)->a.val-b.val);\n        if(lists.length==0){\n            return null;\n        }\n        for(ListNode curr:lists){\n            if(curr==null){\n                continue;\n            }\n            while(curr!=null){\n                pq.add(curr);\n                curr=curr.next;\n            }\n        }\n        ListNode head=pq.poll();\n        ListNode make=head;\n        while(pq.size()!=0){\n            make.next=pq.poll();\n            make=make.next;\n            \n            \n        }\n        if(make==null){\n            return head;\n        }\n        make.next=null;\n        return head;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false}