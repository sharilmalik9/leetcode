{"id":977880700,"lang":"java","lang_name":"Java","time":"5 days, 5 hours","timestamp":1687528938,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/977880700/","is_pending":"Not Pending","title":"Build a Matrix With Conditions","memory":"54.6 MB","code":"class Solution {\n    public int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {\n        List<Integer> rowTopologicalOrder = getTopologicalOrder(rowConditions, k);\n        if (rowTopologicalOrder.isEmpty()) \n            return new int[0][0]; // Cycle detected\n\n        List<Integer> colTopologicalOrder = getTopologicalOrder(colConditions, k);\n        if (colTopologicalOrder.isEmpty()) \n            return new int[0][0]; // Cycle detected\n\n        Map<Integer, Integer> colOrderIndexMap = new HashMap<>();\n        for (int i = 0; i < k; i++)\n            colOrderIndexMap.put(colTopologicalOrder.get(i), i);\n\n        int[][] result = new int[k][k];\n        for (int i = 0; i < k; i++)\n            result[i][colOrderIndexMap.get(rowTopologicalOrder.get(i))] = rowTopologicalOrder.get(i);\n        return result;\n    }\n\n    private List<Integer> getTopologicalOrder(int[][] edges, int k) {\n        Map<Integer, List<Integer>> adjList = buildGraph(edges);\n        List<Integer> topologicalOrder = new ArrayList<>();\n        int[] visited = new int[k + 1];\n        for (int i = 1; i <= k; i++)\n            if (!dfs(i, adjList, visited, topologicalOrder)) \n                return Collections.emptyList(); // Cycle detected\n        return topologicalOrder;\n    }\n\n    private Map<Integer, List<Integer>> buildGraph(int[][] edges) {\n        Map<Integer, List<Integer>> adjList = new HashMap<>();\n        for (int[] edge : edges) {\n            adjList.putIfAbsent(edge[1], new ArrayList<>());\n            adjList.get(edge[1]).add(edge[0]);\n        }\n        return adjList;\n    }\n\n    // Topological order + Cycle detection\n    private boolean dfs(int node, Map<Integer, List<Integer>> graph, int[] visited, List<Integer> topologicalOrder) {\n        if (visited[node] == 1) return true;\n        if (visited[node] == -1) return false;\n        visited[node] = -1;\n\n        for (int neighbour : graph.getOrDefault(node, Collections.emptyList()))\n            if (!dfs(neighbour, graph, visited, topologicalOrder)) return false;\n\n        visited[node] = 1;\n        topologicalOrder.add(node);\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"build-a-matrix-with-conditions","has_notes":false}