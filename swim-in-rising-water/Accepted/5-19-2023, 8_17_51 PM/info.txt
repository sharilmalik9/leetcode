{"id":953396114,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684507671,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/953396114/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"43.5 MB","code":"// 7 ms. 80.91%\n// can do dijiktra \n// can do binary search as well\nclass Solution {\n    private static final int[][] dir = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };\n    public int swimInWater(int[][] grid) {\n        int n = grid.length;\n        boolean[][] visited = new boolean[n][n];\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n        pq.add(new int[] {0, 0, grid[0][0]});\n        visited[0][0] = true;\n        while(!pq.isEmpty()) {\n            int[] a = pq.poll();\n            for(int[] d: dir) {\n                int x = a[0] + d[0], y = a[1] + d[1];\n                if(x < 0 || x >= n || y < 0 || y >= n) continue;\n                if(!visited[x][y]) {\n                    visited[x][y] = true;\n                    int t = Math.max(a[2], grid[x][y]);\n                    if(x == n-1 && y == n-1) return t;\n                    pq.add(new int[] {x, y, t});\n                }\n            }\n        }\n        return 0;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"swim-in-rising-water","has_notes":false}