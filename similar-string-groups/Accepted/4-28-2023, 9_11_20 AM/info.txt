{"id":940906513,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1682653280,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/940906513/","is_pending":"Not Pending","title":"Similar String Groups","memory":"42.4 MB","code":"class Solution {\n    public int numSimilarGroups(String[] strs) {\n        int len=strs.length;\n        int[]par=new int[len];\n        int groups=len;\n        for(int i=0;i<len;i++){\n            par[i]=i;\n        }\n        for(int i=0;i<len;i++){\n            for(int j=i+1;j<len;j++){\n                boolean similar=isSimilar(strs,i,j);\n                if(similar){\n                    int p1=findPar(par,i);\n                    int p2=findPar(par,j);\n                    if(p1!=p2){\n                        par[p1]=p2;\n                        groups--;\n                    }\n                }\n            }\n        }\n        return groups;\n    }\n    public int findPar(int[]par,int u){\n        return par[u]==u?u:(par[u]=findPar(par,par[u]));\n    }\n    public boolean isSimilar(String[]strs,int i,int j){\n        int count=0;\n        for(int k=0;k<strs[i].length();k++){\n            char ch1=strs[i].charAt(k);\n            char ch2=strs[j].charAt(k);\n            if(ch1!=ch2){\n                count++;\n            }\n            if(count>2){\n                return false;\n            }\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"similar-string-groups","has_notes":false}