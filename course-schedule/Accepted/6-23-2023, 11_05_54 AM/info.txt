{"id":977601908,"lang":"java","lang_name":"Java","time":"5 days, 13 hours","timestamp":1687498554,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/977601908/","is_pending":"Not Pending","title":"Course Schedule","memory":"44.4 MB","code":"class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        //create a graph\n        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();\n        for(int i=0;i<numCourses;i++){\n            adj.add(new ArrayList<>());\n        }\n        int m=prerequisites.length;\n        for (int i = 0; i < m; i++) {\n            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);\n        }\n\n        int indegree[] = new int[numCourses];\n        for (int i = 0; i < numCourses; i++) {//traverse adjacency matrix\n            for (int it : adj.get(i)) {\n                indegree[it]++;\n            }\n        }\n        Queue<Integer> q = new LinkedList<Integer>();\n        for (int i = 0; i < numCourses; i++) {\n            if (indegree[i] == 0) {//if indegree is 0,add in the queue\n                q.add(i);\n            }\n        }\n        List<Integer> topo = new ArrayList<Integer>();\n        int i = 0;\n        while (!q.isEmpty()) {\n            int node = q.peek();\n            q.remove();\n            topo.add(node);\n            // node is in your topo sort\n            // so please remove it from the indegree\n\n            for (int it : adj.get(node)) {\n                indegree[it]--;\n                if (indegree[it] == 0) {\n                    q.add(it);\n                }\n            }\n        }\n        if (topo.size()==numCourses) return true;\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false}