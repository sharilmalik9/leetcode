{"id":827053832,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666325257,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/827053832/","is_pending":"Not Pending","title":"Split Linked List in Parts","memory":"42.1 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode[] splitListToParts(ListNode head, int k) {\n       \n        ListNode[] ans = new ListNode[k];\n         if(head == null) return ans;\n        int length = 0;\n        ListNode temp = head;\n        while(temp != null) {\n            temp = temp.next;\n            length++; //Count total length of the given list\n        }\n      \n        int eachLength = length/k;\n        int extraElements = length % k;\n        \n        int i = 0;\n        temp = head;\n        while(temp != null) {\n           ListNode dummy = temp;\n           //Since the the list sizes should be equal or some lists can have size + 1 \n            int bigList = (extraElements > 0)? 1 : 0;\n            for(int j = 0;j<eachLength + bigList -1;j++ ){\n                temp = temp.next;\n            }\n                ListNode store = temp.next;\n                temp.next = null;\n                temp = store;\n            //add elements to the arrays\n                ans[i] = dummy;\n                i++;\n            //decrement the extraElements\n                extraElements--;\n            \n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"split-linked-list-in-parts","has_notes":false}