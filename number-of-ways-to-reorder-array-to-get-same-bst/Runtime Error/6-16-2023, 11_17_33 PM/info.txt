{"id":972816547,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1686937653,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/972816547/","is_pending":"Not Pending","title":"Number of Ways to Reorder Array to Get Same BST","memory":"N/A","code":"class Solution {\n    private static final int MOD = 1000000007;\n    public int numOfWays(int[] nums) {\n        List<Integer> list = new ArrayList<>();\n        for (int num : nums) {\n            list.add(num);\n        }\n        return countWays(list) - 1;\n    }\n    private int countWays(List<Integer> nums) {\n        if (nums.size() <= 2) {\n            return 1;\n        }\n        \n        List<Integer> left = new ArrayList<>();\n        List<Integer> right = new ArrayList<>();\n        int root = nums.get(0);\n        \n        for (int i = 1; i < nums.size(); i++) {\n            if (nums.get(i) < root) {\n                left.add(nums.get(i));\n            } else {\n                right.add(nums.get(i));\n            }\n        }\n        \n        long leftCount = countWays(left);\n        long rightCount = countWays(right);\n        \n        return (int) ((comb(nums.size() - 1, left.size()) % MOD) * (leftCount % MOD) % MOD * (rightCount % MOD) % MOD);\n    }\n    \n    private long comb(int n, int k) {\n        long[][] dp = new long[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = 1;\n            for (int j = 1; j <= Math.min(i, k); j++) {\n                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % MOD;\n            }\n        }\n        return dp[n][k];\n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"number-of-ways-to-reorder-array-to-get-same-bst","has_notes":false}