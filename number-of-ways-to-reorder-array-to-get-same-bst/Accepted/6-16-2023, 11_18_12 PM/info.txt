{"id":972817089,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1686937692,"status":10,"status_display":"Accepted","runtime":"153 ms","url":"/submissions/detail/972817089/","is_pending":"Not Pending","title":"Number of Ways to Reorder Array to Get Same BST","memory":"61.4 MB","code":"class Solution {\n    long mod = (long)1e9 + 7;\n    long[][] table;\n    public int numOfWays(int[] nums) {\n        int n = nums.length;\n        table = new long[n][n];\n        for (int i = 0; i < n; ++i) {\n            table[i][0] = table[i][i] = 1;\n        }\n        for (int i = 2; i < n; i++) {\n            for (int j = 1; j < i; j++) {\n                table[i][j] = (table[i - 1][j - 1] + table[i - 1][j]) % mod;\n            }\n        }\n        List<Integer> arrList = new ArrayList();\n        for(int i: nums) arrList.add(i);\n        return (int)((helper(arrList) - 1) % mod);\n        \n    }\n    \n    public long helper(List<Integer> arr){\n        int n = arr.size();\n        if(n<3) return 1;\n        List<Integer> leftNodes = new ArrayList<>();\n        List<Integer> rightNodes = new ArrayList<>();\n        for (int i  = 1; i<n;i++) {\n            int element = arr.get(i);\n            if (element < arr.get(0)) {\n                leftNodes.add(element);\n            } else {\n                rightNodes.add(element);\n            }\n        }\n        long leftWays = helper(leftNodes)%mod;\n        long rightWays = helper(rightNodes) % mod;\n        return (((leftWays * rightWays) % mod) * table[n - 1][leftNodes.size()]) % mod;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-reorder-array-to-get-same-bst","has_notes":false}