{"id":920441105,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1679535250,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/920441105/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"60.2 MB","code":"class Solution {\n    public int makeConnected(int n, int[][] connections) {\n        int[][] arr=connections;\n       \n        if(arr.length<n-1){\n            return -1;\n        }\n        \n        int m=arr.length;\n        \n        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();\n        \n        for(int i=0;i<n;i++){\n            adj.add(new ArrayList<>());\n        }\n        \n        for(int i=0;i<m;i++){\n            adj.get(arr[i][0]).add(arr[i][1]);\n            adj.get(arr[i][1]).add(arr[i][0]);\n        }\n        \n        int ct=0;\n        boolean[] vis=new boolean[n];\n        \n        for(int i=0;i<n;i++){\n            if(!vis[i]){\n                ct++;\n                dfs(adj,i,vis);\n            }\n        }\n        \n        return ct-1;\n    }\n    \n    public void dfs(ArrayList<ArrayList<Integer>> adj,int cur, boolean[] vis){\n        vis[cur]=true;\n        \n        for(int e: adj.get(cur)){\n            if(!vis[e]){\n                dfs(adj,e,vis);\n            }\n        }\n    \n        \n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected","has_notes":false}