{"id":741774985,"lang":"java","lang_name":"Java","time":"11 months, 3 weeks","timestamp":1657285219,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/741774985/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"N/A","code":"class Solution {\n    public int makeConnected(int n, int[][] connections) {\n        List<List<Integer>> neigh= new ArrayList<>();\n        for(int i=0;i<n;i++){\n            List<Integer> curr= new ArrayList<>();\n            neigh.add(i,curr);\n        }\n        \n        int[] freq=new int[n];\n        for(int i=0;i<connections.length;i++){\n            int first=connections[i][0];\n            int second= connections[i][1];\n            neigh.get(first).add(second);\n            neigh.get(second).add(first);\n            freq[first]+=1;\n            freq[second]+=1;\n            \n        }\n        int needed=0;\n       \n        for(int i=0;i<n;i++){\n            if(freq[i]==0){\n                needed++;\n            }\n            \n        }\n        int ans=needed;\n        int idx=0;\n        while(idx<n && needed>0){\n            if(freq[idx]>1){\n                for(int i:neigh.get(idx)){\n                    if(freq[i]>1){\n                        needed--;\n                        neigh.get(idx).remove(i);\n                        freq[idx]-=1;\n                        freq[i]-=1;\n                        neigh.get(i).remove(idx);\n                        \n                    }\n                }\n            }\n        }\n        if(needed==0){\n            return ans; \n        }\n        else{\n            return -1;\n            \n        }\n        \n    }\n}","compare_result":"100000000000000000000000000000000000","title_slug":"number-of-operations-to-make-network-connected","has_notes":false}