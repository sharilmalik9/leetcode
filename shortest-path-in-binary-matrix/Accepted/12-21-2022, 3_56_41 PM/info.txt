{"id":863170930,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1671618401,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/863170930/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"59.4 MB","code":"// bfs because min path and as soon as dest aarrives in que return level= ans \n\nclass Solution {\n    private int dir[][] = new int[][]{{0,1},{0,-1},{1,0},{-1,0},\n                                      {1,-1},{-1,1},{-1,-1},{1,1}};\n\n    public int shortestPathBinaryMatrix(int[][] grid) {\n\n        int m = grid.length;\n        int n = grid[0].length;\n\n        if(grid[0][0]==1 || grid[m-1][n-1]==1) {\n            return -1;\n        }\n\n        boolean[][] visited = new boolean[m][n];\n        visited[0][0] = true;\n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(new int[]{0,0});\n\n        int ans=0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for(int i=0;i<size;i++) {\n                int[] pop = queue.remove();\n                if(pop[0]==m-1 && pop[1]==n-1) {\n                    return ans+1;\n                }\n                for (int k=0;k<8;k++) {\n                    int nextX = dir[k][0]+pop[0];\n                    int nextY = dir[k][1]+pop[1];\n\n                    if(nextX>=0 && nextX<m && nextY>=0 && nextY<n \n                       && !visited[nextX][nextY] && grid[nextX][nextY]==0) {\n                        queue.add(new int[]{nextX,nextY});\n                        visited[nextX][nextY]=true;\n                    }\n\n                }\n            }\n            ans++;\n        }\n\n        return -1;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false}