{"id":866309344,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1672140810,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/866309344/","is_pending":"Not Pending","title":"Maximum Tastiness of Candy Basket","memory":"52.2 MB","code":"class Solution {\n    public int maximumTastiness(int[] price, int k) {\n        Arrays.sort(price);\n        int ans=0;\n        int start=0;\n        int end=price[price.length-1]-price[0];\n        while(start<=end){\n            int mid=(end+start)/2;\n            System.out.println(mid);\n            if(check(price,k,mid)){\n                ans=mid;\n                start=mid+1;\n            }\n            else{\n                end=mid-1;\n            }\n        }\n        return ans;\n    }\n        public boolean check(int[] price,int k, int mid){\n            int prev=price[0];\n            for(int i=1;i<price.length;i++){\n                if(k==1) break;\n                if(price[i]-prev>=mid){\n                    k--;\n                    prev=price[i];\n                }\n            }\n       return k==1; \n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"maximum-tastiness-of-candy-basket","has_notes":false}