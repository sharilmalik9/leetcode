{"id":912736475,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1678461356,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/912736475/","is_pending":"Not Pending","title":"Kth Largest Sum in a Binary Tree","memory":"61.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public long kthLargestLevelSum(TreeNode root, int k) {\n        Queue<TreeNode> q=new LinkedList<>();\n        long ans=0;\n        q.offer(root);\n        ArrayList<Long> sub=new ArrayList<>();\n        while(!q.isEmpty()){\n            int size=q.size();\n            long sum=0;\n            \n            for(int i=0;i<size;i++){\n                TreeNode node=q.poll();\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n                sum+=node.val;\n            }\n            sub.add(sum);\n        }\n        Collections.sort(sub,Collections.reverseOrder());\n        if(sub.size()>=k){\n            ans=sub.get(k-1);\n            return ans;\n        }\n        \n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"kth-largest-sum-in-a-binary-tree","has_notes":false}