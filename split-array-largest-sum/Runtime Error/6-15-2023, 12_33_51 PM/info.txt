{"id":971689207,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1686812631,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/971689207/","is_pending":"Not Pending","title":"Split Array Largest Sum","memory":"N/A","code":"class Solution {\n    public int splitArray(int[] nums, int k){\n        int sum=nums[0];\n        \n        int[] prefix=new int[nums.length];\n        prefix[0]=nums[0];\n        for(int i=1;i<nums.length;i++){\n            prefix[i]=nums[i]+prefix[i-1];\n            sum+=nums[i];\n        }\n        int ans=0;\n        int start=0;\n        int end=sum;\n        while(start<=end){\n            int mid=start+(end-start)/2;\n            if(check(prefix,k,mid)){\n                ans=mid;\n                end=mid-1;\n            }\n            else{\n                start=mid+1;\n            }\n        } \n        return ans;\n    }\n    public boolean check(int[] prefix,int k,int mid){\n        \n        int start=-1;\n        int cnt=0;\n        if(prefix[0]>mid){\n            return false;\n        }\n        for(int i=0;i<prefix.length;i++){\n            if(start!=-1 && prefix[i]-prefix[start]>mid){\n                cnt++;\n                start=i-1;\n            }\n            if(start==-1 && prefix[i]>mid){\n                start=i-1;\n                cnt++;\n            }\n            if(cnt==k-1){\n               break;\n            }\n\n        }\n        if(prefix[prefix.length-1]-prefix[start]<=mid){\n            return true;\n\n        }\n        return false;\n    }\n}","compare_result":"1110000000000000000000000000000","title_slug":"split-array-largest-sum","has_notes":false}