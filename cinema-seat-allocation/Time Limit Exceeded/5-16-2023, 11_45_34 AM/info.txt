{"id":951242808,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684217734,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/951242808/","is_pending":"Not Pending","title":"Cinema Seat Allocation","memory":"N/A","code":"class Solution {\n    public int maxNumberOfFamilies(int n, int[][] r) {\n        Arrays.sort(r,(a,b) ->(a[0]==b[0] ? a[1]-b[1] : a[0]-b[0])\n        );\n        int ans=0;\n        int idx=0;\n        HashSet<Integer> hs;\n        for(int i=1;i<=n;i++){\n            hs= new HashSet<>();\n            while( idx<r.length && r[idx][0]==i){\n                hs.add(r[idx][1]);\n                idx++;\n            }\n            int curr=0;\n            if(!hs.contains(2) && !hs.contains(3)){\n                if(!hs.contains(4) && !hs.contains(5)){\n                    curr++;\n                }\n\n                \n            }\n           if(!hs.contains(8) && !hs.contains(9)){\n               if(!hs.contains(6) && !hs.contains(7)){\n                   curr++;\n\n               }\n              \n           }\n           if(curr==2 || curr==1){\n               ans+=curr;\n               continue;\n           }\n          \n           if(!hs.contains(4) && !hs.contains(5) && !hs.contains(6) && !hs.contains(7)){\n               ans+=1;\n           }\n          \n         \n          \n\n            \n\n        }\n        return ans;\n\n\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111100000","title_slug":"cinema-seat-allocation","has_notes":false}