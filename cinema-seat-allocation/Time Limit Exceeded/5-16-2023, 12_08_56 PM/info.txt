{"id":951254142,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684219136,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/951254142/","is_pending":"Not Pending","title":"Cinema Seat Allocation","memory":"N/A","code":"class Solution {\n    public int maxNumberOfFamilies(int n, int[][] r) {\n        HashMap<Integer,HashSet<Integer>> hm= new HashMap<>();\n        for(int[] i:r){\n            if(hm.containsKey(i[0])){\n                hm.get(i[0]).add(i[1]);\n            }\n            else{\n                HashSet<Integer> hs= new HashSet<>();\n                hs.add(i[1]);\n                hm.put(i[0],hs);\n            }\n        }\n        int ans=0;\n        HashSet<Integer> hs;\n        for(int i=1;i<=n;i++){\n            int curr=0;\n            if(!hm.containsKey(i)){\n                ans+=2;\n                continue;\n            }\n            hs=hm.get(i);\n          if(!hs.contains(2) && !hs.contains(3)){\n                if(!hs.contains(4) && !hs.contains(5)){\n                    curr++;\n                }\n            }\n           if(!hs.contains(8) && !hs.contains(9)){\n               if(!hs.contains(6) && !hs.contains(7)){\n                   curr++;\n               }\n           }\n           if(curr==2 || curr==1){\n               ans+=curr;\n               continue;\n           }\n           if(!hs.contains(4) && !hs.contains(5) && !hs.contains(6) && !hs.contains(7)){\n               ans+=1;\n           } \n\n        }\n         return ans; \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111100000","title_slug":"cinema-seat-allocation","has_notes":false}