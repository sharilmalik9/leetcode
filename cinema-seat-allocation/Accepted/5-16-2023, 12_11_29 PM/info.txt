{"id":951255387,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684219289,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/951255387/","is_pending":"Not Pending","title":"Cinema Seat Allocation","memory":"49.9 MB","code":"// class Solution {\n//     public int maxNumberOfFamilies(int n, int[][] r) {\n//         HashMap<Integer,HashSet<Integer>> hm= new HashMap<>();\n//         for(int[] i:r){\n//             if(hm.containsKey(i[0])){\n//                 hm.get(i[0]).add(i[1]);\n//             }\n//             else{\n//                 HashSet<Integer> hs= new HashSet<>();\n//                 hs.add(i[1]);\n//                 hm.put(i[0],hs);\n//             }\n//         }\n//         int ans=0;\n//         HashSet<Integer> hs;\n//         for(int i=1;i<=n;i++){\n//             int curr=0;\n//             if(!hm.containsKey(i)){\n//                 ans+=2;\n//                 continue;\n//             }\n//             hs=hm.get(i);\n//           if(!hs.contains(2) && !hs.contains(3)){\n//                 if(!hs.contains(4) && !hs.contains(5)){\n//                     curr++;\n//                 }\n//             }\n//            if(!hs.contains(8) && !hs.contains(9)){\n//                if(!hs.contains(6) && !hs.contains(7)){\n//                    curr++;\n//                }\n//            }\n//            if(curr==2 || curr==1){\n//                ans+=curr;\n//                continue;\n//            }\n//            if(!hs.contains(4) && !hs.contains(5) && !hs.contains(6) && !hs.contains(7)){\n//                ans+=1;\n//            } \n//         }\n//          return ans; \n//     }\n// }\nimport java.util.*;\n\nclass Solution {\n  public int maxNumberOfFamilies(int n, int[][] reservedSeats) {\n    Map<Integer, Set<Integer>> map = new HashMap<>();\n    for (int[] seat: reservedSeats) {\n      int u = seat[0], v = seat[1];\n      map.putIfAbsent(u, new HashSet<>());\n      map.get(u).add(v);\n    }\n    int ret = 2 * (n - map.size());\n    for (Map.Entry<Integer, Set<Integer>> entry: map.entrySet()) {\n      Set<Integer> set = entry.getValue();\n      // Split the seat into 4 segments\n      // 1 2 3 | 4 5 6 7 | 8 9 10\n      //   ___   ___ ___   ___\n      // seat 2, 3: left segment\n      // seat 4, 5: left-middle segment\n      // seat 6, 7: middle-right segment\n      // seat 8, 9: right segment\n      boolean l = true, lm = true, mr = true, r = true;\n      if (set.contains(2) || set.contains(3)) {\n        l = false;\n      }\n      if (set.contains(4) || set.contains(5)) {\n        lm = false;\n      }\n      if (set.contains(6) || set.contains(7)) {\n        mr = false;\n      }\n      if (set.contains(8) || set.contains(9)) {\n        r = false;\n      }\n      // If middle segments are empty\n      if (lm && mr) {\n        // If left and right segments are empty, ret += 2 'cause we split people across the aisle\n        if (l && r) {\n          ret += 2;\n        // exactly 1, no matter what \n        } else {\n          ret += 1;\n        }\n      } else if ((mr && r) || (lm && l)) { // now we know that the middle segments aren't empty, check the cross-aisle-equal-split scenario\n        ret += 1;\n      }\n    }\n    return ret;\n  }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"cinema-seat-allocation","has_notes":false}