{"id":973293774,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1687002064,"status":10,"status_display":"Accepted","runtime":"288 ms","url":"/submissions/detail/973293774/","is_pending":"Not Pending","title":"Make Array Strictly Increasing","memory":"87.3 MB","code":"class Solution {\n    HashMap<Integer,Integer> dp[];\n    TreeSet<Integer> ts;\n    public int makeArrayIncreasing(int[] arr1, int[] arr2) {\n        ts = new TreeSet<>();\n        for(int i : arr2){\n            ts.add(i);\n        }\n        dp = new HashMap[arr1.length];\n        for(int i = 0 ; i < arr1.length ;i++) dp[i] = new HashMap<>();\n\n        int res = help(0,Integer.MIN_VALUE,arr1);\n        // if(res == 10000)\n        return res < Integer.MAX_VALUE-1 ? res : -1;\n    }\n    public int help(int ind,int prev, int arr1[]){\n        if(ind == arr1.length) return 0;\n        \n        if(dp[ind].containsKey(prev)) return dp[ind].get(prev);\n\n        int nottake = Integer.MAX_VALUE-1;\n        if(arr1[ind] > prev) nottake = help(ind+1,arr1[ind],arr1);\n\n        int take = Integer.MAX_VALUE-1;\n        Integer greater_avail = ts.higher(prev);\n\n        if(greater_avail != null) take = 1+ help(ind+1,greater_avail,arr1);\n\n        dp[ind].put(prev,Math.min(take,nottake));\n\n        return dp[ind].get(prev);\n    }\n}","compare_result":"111111111111111111111","title_slug":"make-array-strictly-increasing","has_notes":false}