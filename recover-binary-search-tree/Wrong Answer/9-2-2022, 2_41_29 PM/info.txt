{"id":789512236,"lang":"java","lang_name":"Java","time":"9 months, 4 weeks","timestamp":1662109889,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/789512236/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode nn1=null;\n    TreeNode nn2=null;\n    public void recoverTree(TreeNode root) {\n       \n        \n        helper(root,Long.MIN_VALUE,Long.MAX_VALUE, null);\n        int amt=nn1.val;\n        nn1.val=nn2.val;\n        nn2.val=amt;\n    }\n    \n    \n    \n     public boolean helper(TreeNode root,Long min,Long max, TreeNode parent){\n        if(root==null){\n            return true;\n        }\n        \n        else if(root.val<=min || root.val>=max){\n        System.out.println(root.val + \" \" + min +\" \"+ max);\n            nn1 = parent;\n            nn2 = root;\n\n            return false;\n        }\n        return helper(root.left,min,Math.min(root.val,max), root) && helper(root.right,Math.max(min,root.val),max, root);\n    }\n\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false}