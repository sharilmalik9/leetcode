{"id":967161681,"lang":"java","lang_name":"Java","time":"2 weeks, 5 days","timestamp":1686291333,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/967161681/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        TreeNode dummy=new TreeNode(-1-(int)Math.pow(2,31));\n        TreeNode bummy=new TreeNode((int)Math.pow(2,31));\n        rec(root,dummy,bummy);\n    }\n    public void rec(TreeNode root,TreeNode min,TreeNode max){\n        if(root==null){\n            return ;\n        }\n        if( min.val>root.val && min.val<=max.val){\n            int temp=root.val;\n            root.val=min.val;\n            min.val=temp;\n\n        }\n        if( max.val<root.val && max.val>=min.val){\n             int temp=root.val;\n            root.val=max.val;\n            max.val=temp;\n\n        }\n        if(min.val>root.val || max.val<root.val ){\n            //replace max and min now because root has no error \n            int temp=min.val;\n            min.val=max.val;\n            max.val=temp;\n        }\n        rec(root.left,min,max.val>root.val ? root : max);\n        rec(root.right,min.val>root.val ? min:root,max);\n\n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false}