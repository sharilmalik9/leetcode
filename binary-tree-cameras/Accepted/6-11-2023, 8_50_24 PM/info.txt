{"id":968947658,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1686496824,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/968947658/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"43.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n // 0 - captured\n // 1-not captured\n // 2-would like to capture you\nclass Solution {\n    int camera;\n    TreeNode supernode;\n    public int minCameraCover(TreeNode root) {\n        camera=0;\n        supernode=root;\n        rec(root);\n        return camera; \n    }\n    public int rec(TreeNode root){\n        if(root==null){\n            return 0;\n        }\n        int left=rec(root.left);\n        int right=rec(root.right);\n        if(left==0 && right==0){\n            if(root==supernode){\n                camera++;\n            }\n            return 1;\n        }\n        if(left==1 || right==1){\n            camera++;\n            return 2;\n        }\n        if(left==2 || right==2){\n            return 0;\n            \n\n        }\n        return 0;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras","has_notes":false}