{"id":956523508,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1684942294,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/956523508/","is_pending":"Not Pending","title":"Permutations","memory":"43.9 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] letters) {\n        List<List<Integer>> res = new ArrayList<>();\n        dfs(new ArrayList<>(), new boolean[letters.length], res, letters);\n        return res;\n    }\n\n    private static void dfs(List<Integer> path, boolean[] used, List<List<Integer>> res, int[] letters) {\n        if (path.size() == used.length) {\n            // make a deep copy since otherwise we'd be append the same list over and over\n            res.add(new ArrayList<Integer>(path));\n            return;\n        }\n\n        for (int i = 0; i < used.length; i++) {\n            // skip used letters\n            if (used[i]) continue;\n            // add letter to permutation, mark letter as used\n            path.add(letters[i]);\n            used[i] = true;\n            dfs(path, used, res, letters);\n            // remove letter from permutation, mark letter as unused\n            path.remove(path.size() - 1);\n            used[i] = false;\n        }\n    }    \n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false}