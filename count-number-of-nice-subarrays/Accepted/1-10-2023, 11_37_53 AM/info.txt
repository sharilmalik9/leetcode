{"id":875242511,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1673330873,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/875242511/","is_pending":"Not Pending","title":"Count Number of Nice Subarrays","memory":"50.4 MB","code":"class Solution {\r\n    public int numberOfSubarrays(int[] nums, int k) {\r\n        List<Integer> ls = new ArrayList<>();\r\n        for(int i=0;i<nums.length;i++){\r\n            if(nums[i]%2!=0){\r\n                ls.add(i);\r\n            }\r\n        }\r\n        if(ls.size()<k){\r\n            return 0;\r\n        }\r\n        int left=0;\r\n        int right=k-1;\r\n        int ans=0;\r\n       \r\n        while(right<ls.size()){\r\n           if(left==0 && right!=ls.size()-1){\r\n               ans+=(ls.get(left)-0+1)*(ls.get(right+1)-ls.get(right));\r\n               \r\n\r\n\r\n           }\r\n           else if(left!=0 && right==ls.size()-1){\r\n               ans+=(ls.get(left)-ls.get(left-1))*(nums.length-1 +1- ls.get(right));\r\n               \r\n\r\n           }\r\n           else if(left==0 && right==ls.size()-1){\r\n               ans+=(ls.get(0)+1) * (nums.length-ls.get(right));\r\n\r\n           }\r\n           else{\r\n               ans+=(ls.get(left)-ls.get(left-1))*(ls.get(right+1)-ls.get(right));\r\n\r\n           }\r\n           left++;\r\n           right++;\r\n        }\r\n        return ans;\r\n    \r\n    }\r\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"count-number-of-nice-subarrays","has_notes":false}