{"id":887846512,"lang":"java","lang_name":"Java","time":"4 months, 4 weeks","timestamp":1675051676,"status":10,"status_display":"Accepted","runtime":"239 ms","url":"/submissions/detail/887846512/","is_pending":"Not Pending","title":"Minimum Obstacle Removal to Reach Corner","memory":"76.8 MB","code":"class Solution {\n    class pair{\n        int x;\n        int y;\n        public pair(int x,int y){\n            this.x=x;\n            this.y=y;\n        }\n    }\n    int[][] dir={{1,0},{-1,0},{0,1},{0,-1}};\n    public int minimumObstacles(int[][] grid){\n        int m=grid.length;\n        int n=grid[0].length;\n        int[][] dp= new int[grid.length][grid[0].length];\n        for(int[] curr: dp){\n            Arrays.fill(curr,Integer.MAX_VALUE);\n\n        }\n        \n        dp[0][0]=0;\n        Queue<pair> que= new LinkedList<>();\n        que.add(new pair(0,0));\n        while(que.size()!=0){\n            int size=que.size();\n            while(size!=0){\n                pair curr=que.poll();\n                for(int i=0;i<4;i++){\n                    int x=curr.x+dir[i][0];\n                    int y=curr.y+dir[i][1];\n                    if(x<m && x>=0 && y<n && y>=0 && dp[x][y]> (grid[x][y] + dp[curr.x][curr.y])){\n                        dp[x][y] = grid[x][y] +dp[curr.x][curr.y];\n                        que.add(new pair(x,y));\n                    }\n                }\n                size--;\n\n                \n                        \n                        \n                        \n                        \n                        \n                        \n                 }\n        }\n        return dp[m-1][n-1];\n\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"minimum-obstacle-removal-to-reach-corner","has_notes":false}