{"id":938503375,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1682264491,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/938503375/","is_pending":"Not Pending","title":"Number of Beautiful Partitions","memory":"N/A","code":"class Solution {\n     HashSet<Integer> prime;\n    public int beautifulPartitions(String s, int k, int minLength) {\n       prime=new HashSet<>();\n       prime.add(2);\n       prime.add(3);\n       prime.add(5);\n       prime.add(7);\n        int[][] dp = new int[s.length()][k+1];\n        for(int[] i: dp){\n           Arrays.fill(i, -1);\n        }\n        \n        return dfs(s, k, 0, dp,minLength,0);\n        \n    }\n     public int dfs(String s, int k, int i, int[][] dp,int minLength,int partions) {\n        if (i == s.length() && partions==k) return 1;\n        if(partions==k){\n            return 0;\n        }\n        if(i==s.length()){\n            return 0;\n        }\n        if(dp[i][partions]!=-1){\n            return dp[i][partions];\n        }\n\n        if (!prime.contains(s.charAt(i)-'0')) return 0;\n       \n        int ans = 0;\n        if(i+minLength-1>=s.length()){\n            return 0;\n\n        }\n      \n        \n        for (int j = i+minLength-1; j < s.length(); j++) {\n           \n            if (prime.contains(s.charAt(j)-'0')) {\n                continue;\n            }\n            ans = (ans + dfs(s, k, j + 1, dp,minLength,partions+1)) % 1000000007;\n        }\n        return dp[i][partions]= ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"number-of-beautiful-partitions","has_notes":false}