{"id":846220558,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1668843033,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/846220558/","is_pending":"Not Pending","title":"Erect the Fence","memory":"54.1 MB","code":"// complete shit ques dont try \nclass Solution {\n    public int[][] outerTrees(int[][] trees) {\n        int n = trees.length;\n        if (n < 4) {\n            return trees;\n        }\n        Arrays.sort(trees, (a, b) -> { return a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]; });\n        boolean[] vis = new boolean[n];\n        int[] stk = new int[n + 10];\n        int cnt = 1;\n        for (int i = 1; i < n; ++i) {\n            while (cnt > 1 && cross(trees[stk[cnt - 1]], trees[stk[cnt - 2]], trees[i]) < 0) {\n                vis[stk[--cnt]] = false;\n            }\n            vis[i] = true;\n            stk[cnt++] = i;\n        }\n        int m = cnt;\n        for (int i = n - 1; i >= 0; --i) {\n            if (vis[i]) {\n                continue;\n            }\n            while (cnt > m && cross(trees[stk[cnt - 1]], trees[stk[cnt - 2]], trees[i]) < 0) {\n                --cnt;\n            }\n            stk[cnt++] = i;\n        }\n        int[][] ans = new int[cnt - 1][2];\n        for (int i = 0; i < ans.length; ++i) {\n            ans[i] = trees[stk[i]];\n        }\n        return ans;\n    }\n\n    private int cross(int[] a, int[] b, int[] c) {\n        return (b[0] - a[0]) * (c[1] - b[1]) - (b[1] - a[1]) * (c[0] - b[0]);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"erect-the-fence","has_notes":false}