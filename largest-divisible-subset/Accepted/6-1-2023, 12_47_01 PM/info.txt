{"id":961466509,"lang":"java","lang_name":"Java","time":"3 weeks, 6 days","timestamp":1685603821,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/961466509/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"42.7 MB","code":"class Solution {\n    public List<Integer> largestDivisibleSubset(int[] nums) {\n        Arrays.sort(nums);\n        int[] dp=new int[nums.length];\n        int[] hash=new int[nums.length];\n        int max=1;\n        int maxidx=0;\n        for(int i=0;i<nums.length;i++) hash[i]=i;\n         Arrays.fill(dp,1);\n         for(int i=0;i<nums.length;i++){\n             for(int j=0;j<i;j++){\n                 if(nums[i]%nums[j]==0 && dp[j]+1>dp[i]){\n                     dp[i]=dp[j]+1;\n                     hash[i]=j;\n                 }\n                 if(max<dp[i]){\n                 max=dp[i];\n                 maxidx=i;\n             }   \n             }\n             \n         }\n         List<Integer> ans=new ArrayList<>();\n          ans.add(nums[maxidx]);\n         while(hash[maxidx]!=maxidx){\n                          maxidx=hash[maxidx];\n\n             ans.add(nums[maxidx]);\n         }\n         System.out.println(ans);\n        // return Collections.reverse(ans);\n       return ans;  \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false}