{"id":824957685,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666070625,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/824957685/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"43.9 MB","code":"class Solution {\n    public List<Integer> largestDivisibleSubset(int[] nums) {\n        Arrays.sort(nums);\n        int N = nums.length;\n        List<Integer> ans =new ArrayList<Integer>();\n        int []dp =new int[N];\n        Arrays.fill(dp,1);\n        int []hash =new int[N];\n        for(int i=0;i<N;i++){\n            hash[i]=i;\n        }\n        int lastindex=0;\n        int maxi =1;\n        for(int i=0;i<N;i++){\n            for(int j=0;j<i;j++){\n                if(nums[i]%nums[j] == 0 && dp[j]+1 >dp[i]){\n                    dp[i] = dp[j]+1;\n                    hash[i] = j;\n                }\n                if(dp[i] > maxi){\n                    maxi = dp[i];\n                    lastindex = i;\n                }   \n            }\n        }//for ends\n        ans.add(nums[lastindex]);\n        while(hash[lastindex] != lastindex){\n            lastindex = hash[lastindex];\n            ans.add(nums[lastindex]);\n        }\n        return ans;\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false}