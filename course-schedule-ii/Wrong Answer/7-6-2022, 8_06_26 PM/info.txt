{"id":740112020,"lang":"java","lang_name":"Java","time":"11 months, 3 weeks","timestamp":1657118186,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/740112020/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n       if(numCourses==2 && prerequisites.length==numCourses ){\n           return new int[0];\n       }\n         Stack<Integer> st= new Stack<>();\n        int v=numCourses;\n         boolean[] visited=new boolean[v];\n        List<List<Integer>> neigh=convertToGraph(prerequisites,v);\n        for(int i=0;i<v;i++){\n            if(!visited[i]){\n                findOrderUtil(neigh,i,visited,st);\n            }\n        }\n        int[] ans = new int[v];\n        for(int i=0;i<v;i++){\n            ans[i]=st.pop();\n        }\n        return ans;\n    }\n    public void findOrderUtil(List<List<Integer>> neigh,int v, boolean[] visited,Stack<Integer> st){\n        visited[v]=true;\n        for(int i:neigh.get(v)){\n           \n            if(!visited[i]){\n                findOrderUtil(neigh,i,visited,st);\n            }\n            \n        }\n        st.push(v);\n        \n    }\n    public List<List<Integer>> convertToGraph(int[][] pre,int v){\n        List<List<Integer>> neigh = new ArrayList<>();\n        for(int i=0;i<v;i++){\n            List<Integer> hel=new ArrayList<>();\n            neigh.add(hel);\n        }\n        for(int i=0;i<pre.length;i++){\n            int parent =pre[i][1];\n            int child=pre[i][0];\n           neigh.get(parent).add(child);\n        }\n        return neigh;\n        \n    }\n    \n        \n    \n}","compare_result":"111111111111101000000000010001110110001011100","title_slug":"course-schedule-ii","has_notes":false}