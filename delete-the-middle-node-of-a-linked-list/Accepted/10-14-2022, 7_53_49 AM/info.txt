{"id":822021894,"lang":"java","lang_name":"Java","time":"8 months, 2 weeks","timestamp":1665714229,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/822021894/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"63 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode deleteMiddle(ListNode head) {\n\t    //base condition\n        if(head.next==null)\n            return null;\n\t\t// creating variables\n        ListNode temp = null, slow = head, fast = head;\n\t\t//iterating such that we reach the middle element for slow variable while fast variable reaches the end\n        while(fast!=null && fast.next!=null){\n            temp = slow;\n            slow=slow.next;\n            fast = fast.next.next;\n        }\n\t\t//now since temp is the node pointing at slow so now just make pointer from temp to slow->next i.e., deleting the middle node\n        temp.next = slow.next;\n        return head;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false}