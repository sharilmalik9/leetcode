{"id":951587976,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684259846,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/951587976/","is_pending":"Not Pending","title":"Number of Ways to Arrive at Destination","memory":"49.1 MB","code":"class Solution {\n    int mod=1000000007;\n    public int countPaths(int n, int[][] roads) {\n        List<List<int[]>> ls= new ArrayList<>();\n        for(int i=0;i<n;i++){\n            ls.add(new ArrayList<>());\n        }\n        for(int[] i: roads){\n            ls.get(i[0]).add(new int[] {i[1],i[2]});\n            ls.get(i[1]).add(new int[] {i[0],i[2]});\n        }\n        int[] dis=new int[n];\n        int[] ways=new int[n];\n        ways[0]=1;\n        Arrays.fill(dis,Integer.MAX_VALUE);\n        PriorityQueue<int[]> que= new PriorityQueue<>((a,b)->a[1]-b[1]);\n        que.add(new int[] {0,0});\n        dis[0]=0;\n        while(que.size()!=0){\n            int[] curr=que.poll();\n            for(int[] i: ls.get(curr[0])){\n                if(curr[1]+i[1] < dis[i[0]]){\n                    dis[i[0]]=curr[1]+i[1];\n                    que.add(new int[] {i[0],dis[i[0]]});\n                    ways[i[0]]=ways[curr[0]];\n                }\n                else if(curr[1]+i[1] == dis[i[0]]){\n                    ways[i[0]]=(ways[i[0]]+ways[curr[0]])%mod;\n\n                }\n            }\n\n        }\n        int dis1=dis[n-1];\n         System.out.println(dis1);\n        if(dis1==Integer.MAX_VALUE){\n            return 0;\n        }\n       \n\n        return ways[n-1];\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-arrive-at-destination","has_notes":false}