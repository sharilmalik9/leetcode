{"id":976785164,"lang":"java","lang_name":"Java","time":"6 days, 16 hours","timestamp":1687403792,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/976785164/","is_pending":"Not Pending","title":"Longest Nice Subarray","memory":"N/A","code":"class Solution {\n    int[] parent;\n    public int longestNiceSubarray(int[] nums) {\n        parent=new int[nums.length];\n        int[] xor=new int[33];\n        Arrays.fill(xor,-1);\n        for(int i=0;i<nums.length;i++){\n            parent[i]=i;\n        }\n        for(int i=0;i<nums.length;i++){\n            int numb=nums[i];\n            int cnt=0;\n            while(numb!=0){\n                if((numb&1)==1){\n                    if(xor[cnt]==-1){\n                        xor[cnt]=i;\n                    }\n                    else{\n                        union(xor[cnt],i);\n                    }\n                }\n               numb= numb>>1;\n                cnt++;\n            }\n        }\n        HashSet<Integer> hs=new HashSet<>();\n        for(int i=0;i<parent.length;i++){\n            hs.add(parent[i]);\n        }\n        return hs.size();\n        \n    }\n    public int parent(int element){\n        if(parent[element]==element){\n            return element;\n        }\n        return parent[element]=parent(parent[element]);\n\n    }\n\n    public void union(int one,int two){\n        int onep=parent(one);\n        int twop=parent(two);\n        if(onep==twop){\n            return;\n        }\n        parent[twop]=onep;\n    }\n}","compare_result":"11111111111110000000000000000000000000000000000000000000011110110","title_slug":"longest-nice-subarray","has_notes":false}