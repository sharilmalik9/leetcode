{"id":974191367,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1687107445,"status":10,"status_display":"Accepted","runtime":"991 ms","url":"/submissions/detail/974191367/","is_pending":"Not Pending","title":"Maximum Number of Tasks You Can Assign","memory":"56.4 MB","code":"class Solution {\n    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {\n        Arrays.sort(tasks);\n        TreeMap<Integer,Integer> tm=new TreeMap<>();\n         for (int i : workers)\n        \ttm.put(i, tm.getOrDefault(i, 0) + 1);\n        int start=0;\n        int end=Math.min(workers.length,tasks.length)-1;\n        int ans=0;\n        while(start<=end){\n            int mid=start+(end-start)/2;\n         \n            if(check(tasks,pills,strength,(TreeMap<Integer, Integer>)tm.clone(),mid)){\n                ans=mid+1;\n                start=mid+1;\n            }\n            else{\n                end=mid-1;\n            }\n        }\n        return ans;\n    }\n    public boolean check(int[] arr,int pills,int strength,TreeMap<Integer,Integer> tm,int mid){\n        while(mid>=0){\n            int max=tm.lastKey();\n            int t=arr[mid]; \n            if((pills>0 && strength+max<t )||(pills==0 && max<t)){\n                return false;\n            }\n            if(max<t){\n                t-=strength;\n                pills--;\n            }\n            int got=tm.ceilingKey(t);\n            if(tm.get(got)>1){\n                tm.put(got,tm.get(got)-1);\n            }\n            else{\n                tm.remove(got);\n            }\n            mid--;\n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-tasks-you-can-assign","has_notes":false}