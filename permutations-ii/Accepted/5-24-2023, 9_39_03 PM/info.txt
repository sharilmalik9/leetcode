{"id":956543349,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1684944543,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/956543349/","is_pending":"Not Pending","title":"Permutations II","memory":"44.9 MB","code":"class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        HashSet<List<Integer>> ans = new HashSet<>();\n        int len = nums.length;\n        if (len == 0) {\n            return new ArrayList<>();\n        }\n\n        boolean[] vis = new boolean[len];\n        backtrack(ans, new ArrayList<>(), nums, vis, 0);\n        List<List<Integer>> hehe=new ArrayList<>();\n        for(List<Integer> curr:ans){\n            hehe.add(curr);\n        }\n        return hehe;\n    }\n\n    public void backtrack(HashSet<List<Integer>> res, List<Integer> list, int[] nums, boolean[] visited, int idx) {\n        if (idx == nums.length) {\n            res.add(new ArrayList<>(list));\n            return;\n        }\n\n        for (int i = 0; i < nums.length; i++) {\n           \n            // avoid duplicate\n            if (!visited[i]) {\n                visited[i] = true;\n                list.add(nums[i]);\n                backtrack(res, list, nums, visited, idx + 1);\n                visited[i] = false;\n                list.remove(list.size() - 1);\n            }\n        }\n    }\n}\n// class Solution {\n//     public List<List<Integer>> permute(int[] letters) {\n//         List<List<Integer>> res = new ArrayList<>();\n//         dfs(new ArrayList<>(), new boolean[letters.length], res, letters);\n//         return res;\n//     }\n\n//     private static void dfs(List<Integer> path, boolean[] used, List<List<Integer>> res, int[] letters) {\n//         if (path.size() == used.length) {\n//             // make a deep copy since otherwise we'd be append the same list over and over\n//             res.add(new ArrayList<Integer>(path));\n//             return;\n//         }\n\n//         for (int i = 0; i < used.length; i++) {\n//             // skip used letters\n//             if (used[i]) continue;\n//             // add letter to permutation, mark letter as used\n//             path.add(letters[i]);\n//             used[i] = true;\n//             dfs(path, used, res, letters);\n//             // remove letter from permutation, mark letter as unused\n//             path.remove(path.size() - 1);\n//             used[i] = false;\n//         }\n//     }    \n// }","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false}