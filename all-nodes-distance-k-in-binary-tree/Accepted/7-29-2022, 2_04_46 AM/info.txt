{"id":759341418,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1659040486,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/759341418/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"43.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public void makeParent(TreeNode root, HashMap<TreeNode, TreeNode> parent){\n        Queue<TreeNode> que= new LinkedList<>();\n        que.add(root);\n       while(que.size()!=0){\n           TreeNode curr= que.poll();\n           if(curr.left!=null){\n               parent.put(curr.left,curr);\n               que.add(curr.left);\n           }\n           if(curr.right!=null){\n                parent.put(curr.right,curr);\n               que.add(curr.right);\n           }\n       }\n    }\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n        HashMap<TreeNode ,TreeNode> parent = new HashMap<>();\n        makeParent(root,parent);\n         Map<TreeNode ,Boolean> visited = new HashMap<>();\n        Queue<TreeNode> ansque= new LinkedList<>();\n        ansque.add(target);\n        int level=0;\n        visited.put(target,true);\n        while(!ansque.isEmpty()){\n            if(level==k) break;\n            int size = ansque.size();\n            while(size>0){\n                 TreeNode curr = ansque.poll();\n                if(curr.left!=null && visited.get(curr.left)==null){\n                    ansque.add(curr.left);\n                    visited.put(curr.left,true);\n                }\n                 if(curr.right!=null && visited.get(curr.right)==null){\n                    ansque.add(curr.right);\n                    visited.put(curr.right,true);\n                }\n                 if(parent.get(curr)!=null && visited.get(parent.get(curr))==null){\n                    ansque.add(parent.get(curr));\n                    visited.put(parent.get(curr),true);\n                }\n               \n                \n                size--;\n            }\n           level++;\n        }\n        List<Integer> ans = new ArrayList<>();\n        while(ansque.size()>0){\n            ans.add(ansque.poll().val);\n        }\n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false}