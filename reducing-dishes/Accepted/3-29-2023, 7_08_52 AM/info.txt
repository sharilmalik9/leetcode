{"id":923951035,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1680053932,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/923951035/","is_pending":"Not Pending","title":"Reducing Dishes","memory":"42.9 MB","code":"class Solution {\n    public int maxSatisfaction(int[] satisfaction) {\n        int[][] dp= new int[satisfaction.length+1][satisfaction.length+1];\n        for(int[] i:dp){\n            Arrays.fill(i,-1);\n        }\n        Arrays.sort(satisfaction);\n        return rec(satisfaction,0,1,dp);\n        \n    }\n    public int rec(int[] s,int idx,int time ,int[][] dp){\n        if(idx>=s.length){\n            return 0;\n        }\n        if(dp[idx][time]!=-1){\n            return dp[idx][time];\n\n        }\n        if(s[idx]>=0){\n            return dp[idx][time]=s[idx]*time +rec(s,idx+1,time+1,dp);\n        }\n        return dp[idx][time]=Math.max(s[idx]*time+rec(s,idx+1,time+1,dp),rec(s,idx+1,time,dp));\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"reducing-dishes","has_notes":false}