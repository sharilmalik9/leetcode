{"id":717767300,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1654743887,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/717767300/","is_pending":"Not Pending","title":"Merge Two Binary Trees","memory":"51.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n    if(root1==null&&root2==null){\n        return null;\n    }\n        int val=(root1==null?0:root1.val) +(root2==null?0:root2.val);\n        TreeNode nn= new TreeNode(val);\n        nn.left=mergeTrees((root1==null? null:root1.left),\n            (root2==null?null:root2.left));\n        nn.right=mergeTrees((root1==null? null:root1.right),\n            (root2==null?null:root2.right));\n        return nn;\n        \n        \n        \n       \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-binary-trees","has_notes":false}