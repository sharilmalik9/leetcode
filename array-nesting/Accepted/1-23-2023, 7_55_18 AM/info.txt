{"id":883404943,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674440718,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/883404943/","is_pending":"Not Pending","title":"Array Nesting","memory":"87.5 MB","code":"class Solution {\n    public int arrayNesting(int[] nums) {\n        int res=0;\n        boolean[] visited = new boolean[nums.length];\n        int[] dp=new int[nums.length];\n        Arrays.fill(dp,-1);\n        for(int i=0;i<nums.length;i++){\n            if(!visited[i]){\n                int len = dfs(nums,i,visited,dp);\n                res = Math.max(res,len);\n            }\n        }\n        return res;\n    }\n    public int dfs(int[] nums,int i,boolean[] visited,int[] dp){\n        if(visited[i]) return 0;\n        if(dp[i]!=-1){\n            return dp[i];\n        }\n        visited[i] = true;\n        return dp[i]=1+dfs(nums,nums[i],visited,dp);\n    }\n}","compare_resulttitle_slug":"array-nesting","has_notes":false}