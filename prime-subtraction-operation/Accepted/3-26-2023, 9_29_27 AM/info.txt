{"id":922197327,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1679803167,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/922197327/","is_pending":"Not Pending","title":"Prime Subtraction Operation","memory":"42.4 MB","code":"class Solution {\n    public boolean primeSubOperation(int[] nums) {\n        TreeSet<Integer> tmp = new TreeSet<>();\n        int max = 0;\n        for(int i : nums){\n            max = Math.max(i,max);\n        }\n        // tmp.add(2);\n        \n        for(int i = 2; i< max;i ++){\n            if(isPrime(i)){\n               tmp.add(i); \n            }\n        }\n        // System.out.println(tmp);\n        for(int i = nums.length-2; i>=0;i--){\n            if(nums[i]>=nums[i+1]){                \n            Integer diff = tmp.ceiling(nums[i] - nums[i+1] + 1);\n            if(diff == null || diff >= nums[i]){\n                return false;\n            }\n            nums[i] -= diff;\n                \n            }\n        }\n        \n        return true;\n        \n        \n    }\n    \n    public boolean isPrime(int n){\n        for(int i = 2; i<= n/2;i++){\n            if(n%i == 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}","compare_resulttitle_slug":"prime-subtraction-operation","has_notes":false}