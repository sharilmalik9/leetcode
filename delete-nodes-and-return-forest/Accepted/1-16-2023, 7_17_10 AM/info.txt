{"id":878921180,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1673833630,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/878921180/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"43.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<TreeNode> ans;\n    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {\n        ans=new ArrayList<>();\n        HashSet<Integer> hs= new HashSet<>();\n        for(int i:to_delete){\n            hs.add(i);\n        }\n        if(!hs.contains(root.val)){\n           ans.add(root);\n        }\n        help(root,hs);\n        return ans;\n\n    }\n    public TreeNode help(TreeNode root,HashSet<Integer> hs){\n        if(root==null){\n            return null;\n        }\n        root.left=help(root.left,hs);\n        root.right=help(root.right,hs);\n        if(hs.contains(root.val)){\n            if(root.left!=null){\n                ans.add(root.left);\n            }\n            if(root.right!=null){\n                ans.add(root.right);\n            }\n            return null;\n        }\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest","has_notes":false}