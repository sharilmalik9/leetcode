{"id":824916680,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666066091,"status":10,"status_display":"Accepted","runtime":"268 ms","url":"/submissions/detail/824916680/","is_pending":"Not Pending","title":"Constrained Subsequence Sum","memory":"123.1 MB","code":"class Solution {\n    public int constrainedSubsetSum(int[] nums, int k) {\n        int n=nums.length;\n        int[] dp=new int[n];\n        int res=nums[0];\n        Queue<Integer> queue=new PriorityQueue<>((a,b)->dp[b]-dp[a]); \n        \n        Arrays.fill(dp,Integer.MIN_VALUE);\n        dp[0]=nums[0];\n        queue.offer(0);\n        \n        for(int j=1;j<n;j++){\n            int i=Math.max(j-k,0);   \n            while(!queue.isEmpty() && queue.peek()<i) queue.poll();     \n            int idx=queue.peek();\n            dp[j]=Math.max(dp[idx]+nums[j],nums[j]);\n            res=Math.max(res,dp[j]);\n            queue.offer(j);\n        }\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"constrained-subsequence-sum","has_notes":false}