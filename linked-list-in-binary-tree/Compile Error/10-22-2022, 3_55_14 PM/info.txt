{"id":827852187,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666434314,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/827852187/","is_pending":"Not Pending","title":"Linked List in Binary Tree","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic boolean isSubPath(ListNode head, TreeNode root) {\n        if(root == null && head == null) return true;\n        if(root == null || head == null) return false;\n        \n        return isSubPath(head, root.left) || isSubPath(head, root.right) || isSame(head, root);\n    }\n    \n    private boolean isSame(ListNode head, TreeNode root) {\n        if(head == null) return true;\n        if(root == null || root.val != head.val) return false;\n\n        boolean leftTree = isSame(head.next, root.left);\n        boolean rightTree = isSame(head.next, root.right);\n        \n        return leftTree || rightTree;\n    }","compare_result":null,"title_slug":"linked-list-in-binary-tree","has_notes":false}