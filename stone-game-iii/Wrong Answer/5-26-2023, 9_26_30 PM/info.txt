{"id":957774887,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685116590,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/957774887/","is_pending":"Not Pending","title":"Stone Game III","memory":"N/A","code":"class Solution {\n    int[] piles;\n    int n;\n    int ans = 0;\n    int[][]  dp;\n    public String stoneGameIII(int[] stoneValue) {\n        this.piles = stoneValue;\n        this.n = piles.length;\n        this.dp  = new int[piles.length+1][2];\n        for(int i[] : dp)  Arrays.fill(i,-1);\n        int ans= f(0,true);\n        int sum=0;\n        for(int i:stoneValue){\n            sum+=i;\n        }\n        if(ans>sum-ans){\n            return \"Alice\";\n        }\n        else if(ans==sum-ans){\n            return \"Tie\";\n        }\n        else{\n            return \"Bob\";\n        } \n    }\n     public int f(int i, boolean turn){\n\n        if(i == piles.length) {\n            // ans = Math.max(ans,curr);\n            return 0;\n        }\n\n        int k = turn ? 1:0;\n        if(dp[i][k] != -1 ) return dp[i][k];\n        if(turn){\n            int ans2 = 0;\n            int sum = 0;\n            for(int x = 1; x<= 3 && i+x-1<n; x++){\n                sum += piles[i+x-1];\n                ans2 = Math.max(ans2, sum + f(i + x, !turn));\n            }\n            return dp[i][k] = ans2;\n\n        }else{\n            int ans1 = Integer.MAX_VALUE;\n            for(int x = 1; x<= 3  && i+x-1<n; x++){\n                ans1 = Math.min(ans1, f(i + x, !turn));\n            }\n            return dp[i][k]= ans1;\n        }\n\n\n        \n    }\n}","compare_result":"11110011111111111011101110110111101110111101101011111010011111101111111001110110001111001001110111101111101111011100100111001011101111111111110111011001100010111110111000100011010011111","title_slug":"stone-game-iii","has_notes":false}