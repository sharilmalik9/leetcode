{"id":968847472,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1686485857,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/968847472/","is_pending":"Not Pending","title":"Remove Invalid Parentheses","memory":"44.6 MB","code":"// class Solution {\n//     HashSet<String> ans;\n//     int minremoves;\n//     public List<String> removeInvalidParentheses(String s){\n//         ans=new HashSet<>();\n//         Stack<Integer> st=new Stack<>();\n//         for(int i=0;i<s.length();i++){\n//             if(s.charAt(i)=='('){\n//                 st.push(1);\n//             }\n//             if(s.charAt(i)==')'){\n//                 if(st.size()==0){\n//                     minremoves++;\n//                 }\n//                 else{\n//                     st.pop();\n//                 }\n//             }\n//         }\n//         minremoves+=st.size();\n//         List<String> hehe=new ArrayList<>();\n//         rec(s,new StringBuilder(),0,0,0,0);\n//          for(String str:ans){\n//             hehe.add(str);\n//         }\n//         return hehe;\n//     }\n//     public void rec(String s,StringBuilder str,int open,int close,int removals,int idx){\n//         if(idx>=s.length()){\n//               if(open==close && removals==minremoves){\n//                ans.add(str.toString()); \n//               }\n//               return;\n//         }\n//         if(close>open){\n//             return;\n//         }\n//         char curr=s.charAt(idx);\n//         // at current idx;\n//         if(curr-'a'>=0 && curr-'a'<26){\n//             str.append(curr);\n//             rec(s,str,open,close,removals,idx+1);\n//             str.deleteCharAt(str.length()-1);\n//         }\n//         else if(curr=='('){\n//              str.append(curr);\n//             rec(s,str,open+1,close,removals,idx+1);\n//              str.deleteCharAt(str.length()-1);\n\n//         }\n//         else{\n//              str.append(curr);\n//             rec(s,str,open,close+1,removals,idx+1);\n//              str.deleteCharAt(str.length()-1);\n//         }\n//         //  remove\n//         rec(s,str,open,close,removals+1,idx+1);\n\n        \n//     }\n// }\nclass Solution {\n    public List<String> removeInvalidParentheses(String s) {\n List<String> ans=new ArrayList<>();\n        HashSet<String> set=new HashSet<String>();\n        \n        int minBracket=removeBracket(s);\n        getAns(s, minBracket,set,ans);\n        \n        return ans;\n    }\n    \n    public void getAns(String s, int minBracket, HashSet<String> set, List<String> ans){\n        if(set.contains(s)) return;\n        set.add(s);\n        if(minBracket==0){\n            int remove=removeBracket(s);   \n            if(remove==0) ans.add(s);\n            return;\n        }\n        for(int i=0;i<s.length();i++){\n            if(s.charAt(i)!='(' && s.charAt(i)!=')') continue;\n            String L=s.substring(0,i);\n            String R=s.substring(i+1);\n            if(!set.contains(L+R)) getAns(L+R,minBracket-1,set,ans);\n        }\n    } \n    public int removeBracket(String s){\n        Stack<Character> stack=new Stack<>();\n        for(int i=0;i<s.length();i++){\n            char x=s.charAt(i);\n            if(x=='(') stack.push(x);\n            else if(x==')'){\n                if(!stack.isEmpty() && stack.peek()=='(') stack.pop();\n                else stack.push(x);\n            } \n        }\n        return stack.size();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-invalid-parentheses","has_notes":false}