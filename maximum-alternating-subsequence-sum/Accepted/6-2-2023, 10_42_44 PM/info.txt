{"id":962472789,"lang":"java","lang_name":"Java","time":"3 weeks, 5 days","timestamp":1685725964,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/962472789/","is_pending":"Not Pending","title":"Maximum Alternating Subsequence Sum","memory":"73.4 MB","code":"class Solution {\r\n    long[][] dp;\r\n    public long maxAlternatingSum(int[] nums) {\r\n        dp=new long[nums.length+1][2];\r\n        for(long[] i:dp){\r\n            Arrays.fill(i,-1);\r\n        }\r\n    \r\n        return rec(nums,0,true);\r\n    }\r\n    public long rec(int[] nums,int idx,boolean odd){\r\n        if(idx==nums.length){\r\n            return 0;\r\n        }\r\n        long include=0;\r\n        int k=1;\r\n        if(odd){\r\n            k=0;\r\n        }\r\n        if(dp[idx][k]!=-1){\r\n            return dp[idx][k];\r\n        }\r\n        \r\n        if(odd){\r\n            include=rec(nums,idx+1,!odd)+nums[idx];\r\n        }\r\n        else{\r\n            include=rec(nums,idx+1,!odd)-nums[idx];\r\n        }\r\n        long dont=rec(nums,idx+1,odd);\r\n        return dp[idx][k]=Math.max(include,dont);\r\n    }\r\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-alternating-subsequence-sum","has_notes":false}