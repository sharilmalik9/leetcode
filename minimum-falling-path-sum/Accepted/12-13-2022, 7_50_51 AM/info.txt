{"id":858923339,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1670898051,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/858923339/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"47.8 MB","code":"class Solution {\n    public int minFallingPathSum(int[][] m) {\n        int k=m.length;\n        int n=Integer.MAX_VALUE;\n        int dp[] = new int[k];\n        for(int i=0;i<k;i++)\n        {\n            dp[i]=m[0][i];\n        }\n        for(int i=1;i<k;i++)\n        {\n            int a[] = new int[k];\n            for(int j=0;j<k;j++)\n            {\n                if(j==0)\n                {\n                    a[j]=m[i][j]+Math.min(dp[j],dp[j+1]);\n                }\n                else if(j==k-1)\n                {\n                    a[j]=m[i][j]+Math.min(dp[j],dp[j-1]);\n                }\n                else\n                {\n                    a[j]=m[i][j]+Math.min(dp[j],Math.min(dp[j+1],dp[j-1]));\n                }\n            }\n            dp=a;\n        }\n        int f=Integer.MAX_VALUE;\n        for(int i=0;i<k;i++)\n        {\n            f=Math.min(f,dp[i]);\n        }\n        return f;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false}