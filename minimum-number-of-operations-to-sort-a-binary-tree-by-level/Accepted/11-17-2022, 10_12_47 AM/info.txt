{"id":844976681,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1668660167,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/844976681/","is_pending":"Not Pending","title":"Minimum Number of Operations to Sort a Binary Tree by Level","memory":"67.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minimumOperations(TreeNode root){\n        List<Integer> ls=new ArrayList<>();\n        int ans=0;\n        Queue<TreeNode> que= new LinkedList<>();\n        que.add(root);\n        while(que.size()!=0){\n            int size=que.size();\n            while(size!=0){\n                TreeNode curr=que.poll();\n                ls.add(curr.val);\n               \n                if(curr.left!=null){\n                    que.add(curr.left);\n                }\n                if(curr.right!=null){\n                    que.add(curr.right);\n                }\n                size--;\n            }\n         //  System.out.println(ls);\n            ans+=find(ls);\n            ls= new ArrayList<>();\n        }\n        return ans;\n        \n        \n        \n    }\n    public int find(List<Integer> ls){\n        HashMap<Integer,Integer> hm= new HashMap<>();\n        for(int i=0;i<ls.size();i++){\n            hm.put(ls.get(i),i);\n        }\n        List<Integer> arr= new ArrayList<>(ls);\n        Collections.sort(arr);\n        int change=0;\n        for(int i=0;i<arr.size();i++){\n            if(ls.get(i)!=arr.get(i)){\n                change++;\n                  int val = ls.get(i);\n                Collections.swap(ls,i,hm.get(arr.get(i)));\n                    hm.replace(val,hm.get(arr.get(i)));\n                    hm.put(arr.get(i),i);\n                \n            }\n        }\n        return change;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","has_notes":false}