{"id":969408853,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1686554517,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/969408853/","is_pending":"Not Pending","title":"Minimize Malware Spread","memory":"59.3 MB","code":"class Solution {\n    TreeSet<Integer> malwares = new TreeSet<>();\n    public int minMalwareSpread(int[][] graph, int[] initial) {\n        int ans = graph.length+1,maxSaves = 0;\n        for(int mal:initial) malwares.add(mal);\n\n        for(int mal : initial){\n            malwares.remove(mal);\n            int totalSaves = dfs(mal,graph,new HashSet<>());\n            malwares.add(mal);\n            if(maxSaves<totalSaves){\n                maxSaves = totalSaves;\n                ans = mal;\n            }\n            else if(maxSaves == totalSaves) ans = Math.min(ans,mal);\n        }\n\n        return ans == graph.length +1 ? malwares.first() : ans;\n    }\n\n    int dfs(int node,int[][] arr,Set<Integer> seen) {\n        if(seen.contains(node)) return 0;\n        seen.add(node);\n        if(malwares.contains(node)){\n            return Integer.MIN_VALUE;\n        }\n        \n        int saveCount = 1;\n        for(int next=0;next<arr.length;next++){\n            if(next == node) continue;\n            \n            if(arr[node][next] == 1){\n                int x = dfs(next,arr,seen);\n                if(x == Integer.MIN_VALUE){\n                    return x;\n                }\n                saveCount+= x;\n            }\n        }\n        return saveCount;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-malware-spread","has_notes":false}