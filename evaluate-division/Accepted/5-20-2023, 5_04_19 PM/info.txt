{"id":953869223,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684582459,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/953869223/","is_pending":"Not Pending","title":"Evaluate Division","memory":"41.4 MB","code":"class Solution {\n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        // Step 1: Build the graph and populate the weights\n        Map<String, Map<String, Double>> graph = buildGraph(equations, values);\n\n        // Step 2: Process the queries\n        double[] results = new double[queries.size()];\n        for (int i = 0; i < queries.size(); i++) {\n            List<String> query = queries.get(i);\n            String dividend = query.get(0);\n            String divisor = query.get(1);\n            results[i] = dfs(dividend, divisor, new HashMap<>(), graph);\n        }\n\n        return results;\n    }\n\n    private Map<String, Map<String, Double>> buildGraph(List<List<String>> equations, double[] values) {\n        Map<String, Map<String, Double>> graph = new HashMap<>();\n\n        for (int i = 0; i < equations.size(); i++) {\n            List<String> equation = equations.get(i);\n            String dividend = equation.get(0);\n            String divisor = equation.get(1);\n            double value = values[i];\n\n            graph.putIfAbsent(dividend, new HashMap<>());\n            graph.putIfAbsent(divisor, new HashMap<>());\n\n            graph.get(dividend).put(divisor, value);\n            graph.get(divisor).put(dividend, 1.0 / value);\n        }\n\n        return graph;\n    }\n\n    private double dfs(String curr, String target, Map<String, Boolean> visited, Map<String, Map<String, Double>> graph) {\n        // If the current variable is not in the graph or the target variable is not in the graph, return -1.0\n        if (!graph.containsKey(curr) || !graph.containsKey(target))\n            return -1.0;\n\n        // If the current variable is the target variable, return 1.0\n        if (curr.equals(target))\n            return 1.0;\n\n        visited.put(curr, true);\n        double result = -1.0;\n\n        Map<String, Double> neighbors = graph.get(curr);\n        for (Map.Entry<String, Double> neighbor : neighbors.entrySet()) {\n            String next = neighbor.getKey();\n            if (!visited.containsKey(next)) {\n                visited.put(next, true);\n                double value = neighbor.getValue();\n                 double subResult = dfs(next, target, visited, graph);\n\n                if (subResult != -1.0) {\n                    result = value * subResult;\n                    break;\n                }\n            }\n        }\n\n        //visited.remove(curr);\n        return result;\n    }\n}","compare_result":"111111111111111111111111","title_slug":"evaluate-division","has_notes":false}