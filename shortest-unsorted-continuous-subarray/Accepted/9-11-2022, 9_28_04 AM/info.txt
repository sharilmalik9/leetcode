{"id":796809372,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1662868684,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/796809372/","is_pending":"Not Pending","title":"Shortest Unsorted Continuous Subarray","memory":"54.4 MB","code":"// class Solution {\n//     public int findUnsortedSubarray(int[] nums) {\n//         int start=0;\n//         boolean first=true;\n//         int end=0;\n//         for(int i=0;i<nums.length-1;i++){\n//             if(nums[i]>nums[i+1]){\n//                 if(first){\n//                     start=i;\n//                     first=false;\n//                 }\n//                 else{\n//                      start=Math.min(start,i);\n//                 }\n//                // start=Math.min(start,i);\n//                 end=Math.max(end,i+1);\n//             }\n//         }\n//         if(start-end==0){\n//             return 0;\n//         }\n//         return end-start+1;\n        class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int n = nums.length;\n        int[] temp = new int[n];\n        for (int i = 0; i < n; i++) {\n            temp[i] = nums[i];\n        }\n        Arrays.sort(temp);\n        int si = n;\n        int ei = 0;\n        for (int i = 0; i < n; i++) {\n            if (temp[i] != nums[i]) {\n                si = Math.min(si, i);\n                ei = Math.max(ei, i);\n            }\n        }\n        if (ei - si + 1 > 0) {\n            return ei - si + 1;\n        }\n        return 0;\n    }\n}\n        \n//     }\n// }","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-unsorted-continuous-subarray","has_notes":false}