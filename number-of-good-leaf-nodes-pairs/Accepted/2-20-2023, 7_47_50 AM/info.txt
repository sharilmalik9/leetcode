{"id":901273314,"lang":"java","lang_name":"Java","time":"4 months, 1 week","timestamp":1676859470,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/901273314/","is_pending":"Not Pending","title":"Number of Good Leaf Nodes Pairs","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int goodpairs=0;\n    int dist;\n    public int countPairs(TreeNode root, int distance) {\n        if(distance==1){\n            return 0;\n        }\n        dist=distance;\n        help(root);\n        return goodpairs;\n\n        \n    }\n    public List<Integer> help(TreeNode root){\n        List<Integer> ls= new ArrayList<>();\n        if(root==null){\n            return ls;\n        }\n        if(root.left==null && root.right==null){\n            ls.add(1);\n            return ls;\n        }\n        List<Integer> left=help(root.left);\n        List<Integer> right=help(root.right);\n        for(int i=0;i<left.size();i++){\n            for(int j=0;j<right.size();j++){\n                if(left.get(i)+right.get(j)<=dist){\n                    goodpairs++;\n                }\n            }\n        }\n        List<Integer> newl=new ArrayList<>();\n        for(int i: left){\n            if(i+1<dist){\n                newl.add(i+1);\n            }\n        }\n          for(int i: right){\n            if(i+1<dist){\n                newl.add(i+1);\n            }\n        }\n        return newl;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-good-leaf-nodes-pairs","has_notes":false}