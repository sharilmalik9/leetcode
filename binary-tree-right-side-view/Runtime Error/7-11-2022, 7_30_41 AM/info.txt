{"id":743861289,"lang":"java","lang_name":"Java","time":"11 months, 3 weeks","timestamp":1657504841,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/743861289/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n     public int height(TreeNode nn){\n        if(nn==null){\n            return -1;\n        }\n        int left=height(nn.left);\n        int right=height(nn.right);\n        return Math.max(left,right)+1;\n    }\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> l1= new ArrayList<Integer>();\n       \n        \n        rightviewutil(root,l1,0);\n        return l1;\n    }\n    public void rightviewutil(TreeNode root, List<Integer> l1,int level){\n        if(root==null){\n            return;\n        }\n        if(l1.get(level)==101){\n            l1.set(level,root.val);\n        }\n        rightviewutil(root.right,l1,level+1);\n        rightviewutil(root.left,l1,level+1);\n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"binary-tree-right-side-view","has_notes":false}