{"id":961458100,"lang":"java","lang_name":"Java","time":"3 weeks, 6 days","timestamp":1685602884,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/961458100/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"43.2 MB","code":"class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        int[] dp= new int[nums.length];\n        int[] cnt=new int[nums.length];\n        int max=Integer.MIN_VALUE;\n        Arrays.fill(dp,1);\n        Arrays.fill(cnt,1);\n        for(int i=0;i<nums.length;i++){\n            for(int j=0;j<i;j++){\n                if(nums[i]>nums[j] && dp[j]+1>dp[i]){\n                    dp[i]=dp[j]+1;\n                    cnt[i]=cnt[j];\n                }\n                else if(nums[i]>nums[j] && 1+dp[j]==dp[i]){\n                    cnt[i]+=cnt[j];\n                }\n            }\n            max=Math.max(max,dp[i]);\n        }\n        int ans=0;\n        for(int i=0;i<nums.length;i++){\n            if(dp[i]==max){\n                ans+=cnt[i];\n            }\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false}