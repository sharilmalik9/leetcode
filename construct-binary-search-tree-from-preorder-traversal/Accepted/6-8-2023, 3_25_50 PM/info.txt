{"id":966527305,"lang":"java","lang_name":"Java","time":"2 weeks, 6 days","timestamp":1686218150,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/966527305/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"40.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode bstFromPreorder(int[] preorder) {\n        return help(preorder,0,preorder.length-1);\n    }\n    public TreeNode help(int[] preorder,int start,int end){\n        \n        if(start>end){\n            return null;\n        }\n        TreeNode nn= new TreeNode(preorder[start]);\n        int mid=-1;\n        for(int i=start+1;i<=end;i++){\n            if(preorder[i]>preorder[start]){\n                mid=i;\n                break;\n            }\n        }\n        if(mid==-1){\n            mid=end+1;\n        }\n        nn.left=help(preorder,start+1,mid-1);\n        nn.right=help(preorder,mid,end);\n        return nn;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false}