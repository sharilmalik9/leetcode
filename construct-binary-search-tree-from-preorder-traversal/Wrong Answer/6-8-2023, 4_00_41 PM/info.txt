{"id":966546357,"lang":"java","lang_name":"Java","time":"2 weeks, 6 days","timestamp":1686220241,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/966546357/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode bstFromPreorder(int[] preorder) {\n        return rec(preorder,0,preorder.length-1);\n    }\n    public TreeNode rec(int[] preorder,int start,int end){\n        if(start>end){\n            return null;\n        }\n        if(start==end){\n            return new TreeNode(preorder[start]);\n        }\n        TreeNode curr=new TreeNode(preorder[start]);\n        start++;\n        int idx=search(preorder,start,end,curr.val);\n        \n        curr.left=rec(preorder,start,idx-1);\n        if(idx!=-1)\n        curr.right=rec(preorder,idx,end);\n        return curr;\n    }\n    public int search(int[] preorder,int i,int j,int num ){\n        int left=i;\n        int right=j;\n        int ans=-1;\n        while(left<=right){\n            int mid=(left+right)/2;\n            if(preorder[mid]>num){\n                ans=mid;\n                right=mid-1;\n            }\n            else{\n                left=mid+1;\n            }\n        }\n        return ans;\n    }\n}","compare_result":"111010100101000000010000000100000001100100001100100100000000000000000000000000100000000000000000000000000000001","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false}