{"id":897758815,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1676367226,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/897758815/","is_pending":"Not Pending","title":"Count the Number of Fair Pairs","memory":"60 MB","code":"class Solution {\n    public long countFairPairs(int[] nums, int lower, int upper) {\n        Arrays.sort(nums);\n        long result = 0;\n        for (int i = 0; i < nums.length; i++) {\n            result = result + binarySearch1(nums, nums[i], i, lower, upper) - binarySearch2(nums, nums[i], i, lower, upper);\n        }\n        return result;\n    }\n    public long binarySearch1(int[] nums, int currentValue, int index, int lower, int upper) {\n        int start = index + 1;\n        int end = nums.length;\n        while (start < end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] > (upper - currentValue)) {\n                end = mid;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return start;\n    }\n     public long binarySearch2(int[] nums, int currentValue, int index, int lower, int upper) {\n        int start = index + 1;\n        int end = nums.length;\n        while (start < end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] < (lower - currentValue)) {\n                start = mid + 1;\n            } else {\n                end = mid;\n            }\n        }\n        return start;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"count-the-number-of-fair-pairs","has_notes":false}