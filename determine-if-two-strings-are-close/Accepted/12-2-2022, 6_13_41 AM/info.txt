{"id":853130568,"lang":"java","lang_name":"Java","time":"6 months, 4 weeks","timestamp":1669941821,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/853130568/","is_pending":"Not Pending","title":"Determine if Two Strings Are Close","memory":"43.1 MB","code":"class Solution {\n    public boolean closeStrings(String word1, String word2) {\n        // Not possible to change length of array so check same length\n        // O(1) time\n        if (word1.length() != word2.length())\n            return false;\n        \n        // Order of characters doesn't matter because rule 1 allows reordering\n        // so don't need to preserve order.\n        // Only lowercase English characters - so can track at character level\n        // Can store character frequency in fixed size array\n        // O(26) = O(1) space O(N) time\n        int[] cc1 = new int[26];\n        int[] cc2 = new int[26];\n        for (int i=0; i<word1.length(); i++) {\n            cc1[word1.charAt(i)-'a']++;\n            cc2[word2.charAt(i)-'a']++;\n        }\n        \n        // Same set of characters must be in both strings as no rule introduces\n        // new characters into a string,\n        // rule two only allows changing frequency of characters.\n        // So check same characters are in each string\n        // O(26) = O(1) time\n        for (int i=0; i<26; i++)\n            if ((cc1[i]==0) != (cc2[i]==0))\n                return false;\n        \n        // We can swap characters to change frequencies of a character\n        // to the frequency of another character.\n        // But we can'tchange the mix of frequencies.\n        // So we can sort and then ensure that frequencies match.\n        // O(26 log 26) = O(1) time to sort\n        // O(26) = O(1) time to match frequencies\n        Arrays.sort(cc1);\n        Arrays.sort(cc2);\n        for (int i=0; i<26; i++)\n            if (cc1[i] != cc2[i])\n                return false;\n        \n        // Every check passed so they are close\n        // Overall Time Complexity O(N) and Space Complexity O(1)\n        return true;\n    }    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"determine-if-two-strings-are-close","has_notes":false}