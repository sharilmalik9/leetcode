{"id":978989737,"lang":"cpp","lang_name":"C++","time":"3 days, 15 hours","timestamp":1687664688,"status":10,"status_display":"Accepted","runtime":"363 ms","url":"/submissions/detail/978989737/","is_pending":"Not Pending","title":"Robot Collisions","memory":"194.1 MB","code":"class Solution {\npublic:\n    vector<int> survivedRobotsHealths(vector<int>& positions, vector<int>& healths, string directions) {\n        int n = positions.size();\n        \n        vector<pair<int,int>> sortedPositions(n);\n        \n        for(int i = 0; i < n; i++) {\n            sortedPositions[i] = {positions[i], i};\n        }\n        \n        sort(sortedPositions.begin(), sortedPositions.end());\n        \n        stack<int> healthStack;\n        for(int i = 0; i < n; i++) {\n            int index = sortedPositions[i].second;\n            int currentHealth = healths[index];\n            if(directions[index] == 'L') {\n                if(healthStack.empty() || directions[healthStack.top()] == 'L') {\n                    healthStack.push(index);\n                } else {\n                    if(currentHealth < healths[healthStack.top()]) {\n                        healths[healthStack.top()]--;\n                    } else if(currentHealth == healths[healthStack.top()]) {\n                        healthStack.pop();\n                    } else {\n                        while(!healthStack.empty() && directions[healthStack.top()] == 'R' && currentHealth > healths[healthStack.top()]) {\n                            healthStack.pop();\n                            currentHealth--;\n                        }\n                        if(healthStack.empty() || directions[healthStack.top()] == 'L') {\n                            healths[index] = currentHealth;\n                            healthStack.push(index);\n                        } else if(directions[healthStack.top()] == 'R') {\n                            if(currentHealth == healths[healthStack.top()]) {\n                                healthStack.pop();\n                            } else {\n                                healths[healthStack.top()]--;\n                            }\n                        }\n                    }\n                }\n            } else {\n                healthStack.push(index);\n            }\n        }\n        \n        vector<int> survivedIndices;\n        \n        while(!healthStack.empty()) {\n            survivedIndices.push_back(healthStack.top());\n            healthStack.pop();\n        }\n        \n        sort(survivedIndices.begin(), survivedIndices.end());\n        \n        vector<int> finalSurvivedHealths;\n        \n        for(auto index : survivedIndices) {\n            finalSurvivedHealths.push_back(healths[index]);\n        }\n        \n        return finalSurvivedHealths;\n    }\n};\n","compare_resulttitle_slug":"robot-collisions","has_notes":false}