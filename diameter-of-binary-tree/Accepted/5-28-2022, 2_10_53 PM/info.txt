{"id":708866720,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1653727253,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/708866720/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"43 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\nclass Solution {\n    public int height(TreeNode nn){\n        if(nn==null){\n            return -1;\n        }\n        int left=height(nn.left);\n        int right=height(nn.right);\n        return Math.max(left,right)+1;\n    }\n    public int diameterOfBinaryTree(TreeNode root) {\n        if(root==null){\n            return -1;\n        }\n        int self= height(root.left)+height(root.right)+2;\n        int left=diameterOfBinaryTree(root.left);\n         int right=diameterOfBinaryTree(root.right);\n        return Math.max(self,Math.max(left,right));\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false}