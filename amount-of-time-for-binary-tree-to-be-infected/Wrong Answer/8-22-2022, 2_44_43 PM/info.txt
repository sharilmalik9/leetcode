{"id":780156988,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1661159683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/780156988/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void makeParent(TreeNode root, HashMap<TreeNode, TreeNode> parent){\n        Queue<TreeNode> que= new LinkedList<>();\n        que.add(root);\n       while(que.size()!=0){\n           TreeNode curr= que.poll();\n           if(curr.left!=null){\n               parent.put(curr.left,curr);\n               que.add(curr.left);\n           }\n           if(curr.right!=null){\n                parent.put(curr.right,curr);\n               que.add(curr.right);\n           }\n       }\n    }\n    public TreeNode Find(TreeNode root, int start){\n         \n        if(root==null){\n            return null; }\n         if(root.val==start){\n            return root;\n        }\n       \n        TreeNode left=Find(root.left,start);\n        TreeNode right=Find(root.right,start);\n        if(left==null){\n            return right;\n        }\n        else if(right==null){\n            return left;\n            \n        }\n        return null;\n        \n            \n        \n        \n    }\n    public int amountOfTime(TreeNode root, int start) {\n        HashMap<TreeNode ,TreeNode> parent = new HashMap<>();\n        makeParent(root,parent);\n       TreeNode find=Find(root,start);\n         Map<TreeNode ,Boolean> visited = new HashMap<>();\n        int time=-1;\n        Queue<TreeNode> que= new LinkedList<>();\n        que.add(find);\n        while(que.size()!=0){\n            int sizey=que.size();\n            time++;\n            while(sizey!=0){\n                TreeNode curr= que.poll();\n                if(curr.left!=null && visited.get(curr.left)==null){\n                    que.add(curr.left);\n                    visited.put(curr.left,true);\n                }\n                if(curr.right!=null && visited.get(curr.right)==null){\n                    que.add(curr.right);\n                    visited.put(curr.right,true);\n                }\n                if(parent.get(curr)!=null && visited.get(parent.get(curr))==null){\n                    que.add(parent.get(curr));\n                    visited.put(parent.get(curr),true);\n                }\n                sizey--;\n                System.out.println(\"heyyy\");\n            }\n             System.out.println(\"hehehhe\");\n            \n            \n        }\n        return time;\n        \n        \n       \n        \n    }\n}","compare_result":"1111111111110101101111111111000111111101111111111111111111111111111111111111111","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false}