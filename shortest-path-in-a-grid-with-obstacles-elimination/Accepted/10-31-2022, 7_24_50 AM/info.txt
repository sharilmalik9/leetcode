{"id":833700335,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1667181290,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/833700335/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"47.1 MB","code":"class Solution \n{\n\tint[][] dirs = {{1,0},{0,1},{-1,0},{0,-1}};\n\tint[][] visited;\n\tpublic int shortestPath(int[][] grid, int k)\n\t{\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tvisited = new int[m][n];\n\n\t\tfor(int[] i : visited)\n\t\t\tArrays.fill(i, Integer.MAX_VALUE);\n\n\t\tint ans = 0;\n\t\tQueue<int[]> queue = new LinkedList<>();\n\t\tqueue.add(new int[]{0,0,0});\n\n\t\twhile(!queue.isEmpty())\n\t\t{\n\t\t\tint size = queue.size();\n\t\t\twhile(size-- > 0)\n\t\t\t{\n\t\t\t\tint[] curr = queue.poll();\n\t\t\t\tif(curr[0] == m-1 && curr[1] == n-1)\n\t\t\t\t\treturn ans;\n\n\t\t\t\tfor(int[] dir : dirs)\n\t\t\t\t{\n\t\t\t\t\tint newX = curr[0] + dir[0];\n\t\t\t\t\tint newY = curr[1] + dir[1];\n\n\t\t\t\t\tif(newX < 0 || newY < 0 || newX >= m || newY >= n)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tint newK = curr[2] + grid[newX][newY];\n\t\t\t\t\tif(newK > k)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif(visited[newX][newY] <= newK)     // continue if there is any better solution\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tvisited[newX][newY] = newK;\n\t\t\t\t\tqueue.add(new int[] {newX, newY, newK});\n\t\t\t\t }\n\t\t\t}\n\t\t\tans++;\n\t\t}\n\t\treturn -1;\n\t}\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false}