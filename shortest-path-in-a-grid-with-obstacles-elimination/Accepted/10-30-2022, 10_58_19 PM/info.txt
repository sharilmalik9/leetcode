{"id":833485599,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1667150899,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/833485599/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"48.1 MB","code":"class Solution {\n\n    private int[][] dir = new int[][]{{0,1},{0,-1},{-1,0},{1,0}};\n\n    public int shortestPath(int[][] grid, int k) {\n        int m = grid.length;\n        int n = grid[0].length;\n\n        if(m == 0 || n == 0) return 0;\n        // min Number of obstacles encountered at each cell\n        int[][] obstacle = new int[m][n];\n\n        boolean[][] visited = new boolean[m][n];\n\n        Queue<int[]> queue = new LinkedList<>();\n\n        // x,y,obstacleCount\n        queue.add(new int[]{0, 0, grid[0][0]});\n        obstacle[0][0] = grid[0][0];\n\n        int level = 1;\n        while(!queue.isEmpty()) {\n            int size = queue.size();\n            while(size-->0) {\n                int[] head = queue.poll();\n                if(head[0] == m-1 && head[1] == n-1) {\n                    return level - 1;\n                }\n                // head node this is ObstacleCount\n                int currObstacleCount = head[2];\n                for(int[] d : dir) {\n                    int x = head[0]+d[0];\n                    int y = head[1]+d[1];\n                    // within limits\n                    if(!(x >= 0 && y >= 0 && x < m && y < n)) continue;\n\n                    int oldObstacleCount = obstacle[x][y];\n                    int newObstacleCount = currObstacleCount + grid[x][y];\n\n                    if ((!visited[x][y]) && newObstacleCount <= k ) {\n                        queue.add(new int[] {x, y, newObstacleCount});\n                        obstacle[x][y] = newObstacleCount;\n                        visited[x][y] = true;\n                    }\n\n                    if ((oldObstacleCount > newObstacleCount ) && newObstacleCount <= k ) {\n                        queue.add(new int[] {x, y, newObstacleCount});\n                        obstacle[x][y] = newObstacleCount;\n                        visited[x][y] = true;\n                    }\n                }\n            }\n            level++;\n        }\n        return -1;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination","has_notes":false}