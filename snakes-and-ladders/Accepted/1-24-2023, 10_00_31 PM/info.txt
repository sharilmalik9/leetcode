{"id":884466214,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674577831,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/884466214/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"42.3 MB","code":"class Solution {\n    int length = 1;\n    int [][] board;\n    public int snakesAndLadders(int[][] board) {\n        this.board = board;\n        length = board.length;\n        HashMap<Integer,Integer> visited = new HashMap();\n        visited.put(1,0);\n        Queue<Integer> arr = new LinkedList<>();\n        arr.add(1);\n        while (!arr.isEmpty()){\n            int n = arr.remove();\n            for(int i = n+1;i<=n+6;i++){\n                int next = i;\n                int nextPos = getPosition(i);\n                if(next>length*length) return -1;\n                if(nextPos!=-1){\n                    next = nextPos;\n                }\n                if(next==length*length) return visited.get(n)+1;\n                if(!visited.containsKey(next)){\n                    visited.put(next,visited.get(n)+1 );\n                     arr.add(next);\n                }   \n            }\n            \n        }\n        return -1;\n    }\n\n    public int getPosition(int n){\n        int row = (n-1)/length;\n        int column = (n-1)%length;\n        if(row%2!=0){\n            column = (column-length+1)*-1;\n        }\n        row = (row-length+1)*-1;\n        \n        int  result = board[row][column];\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders","has_notes":false}