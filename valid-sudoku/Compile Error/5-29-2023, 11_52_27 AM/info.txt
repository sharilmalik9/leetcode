{"id":959398421,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685341347,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/959398421/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"N/A","code":"class Solution {\n    private boolean checkRows(char[][] board){\n        for(int r=0; r < board.length; r++){\n            int[] count = new int[9];\n            for(int c=0; c<board[0].length; c++){\n                if(board[r][c] == '.')\n                    continue;\n                else if(count[Character.getNumericValue(board[r][c]) - 1] != 0)\n                    return false;\n                else \n                    count[Character.getNumericValue(board[r][c]) - 1] = 1;\n            }\n        }\n        return true;\n    }\n    \n    \n    private boolean checkColumns(char[][] board){\n        for(int c=0; c < board.length; c++){\n            int[] count = new int[9];\n            for(int r=0; r<board[0].length; r++){\n                if(board[r][c] == '.')\n                    continue;\n                else if(count[Character.getNumericValue(board[r][c]) - 1] != 0)\n                    return false;\n                else \n                    count[Character.getNumericValue(board[r][c]) - 1] = 1;\n            }\n        }\n        return true;\n    }\n    private boolean checki(char[][] board){\n        HashSet<Integer> hs=new HashSet<>();\n        for(int i=0;i<board.length;i++){\n            for(int j=0;j<board[0].length;j++){\n                if(hs.contains(board[i][j]-'0')){\n                    return false;\n\n                }\n                hs.add(board[i][j]-'0');\n            }\n        }\n\n    }\n    \n    private boolean checkBoxes(char[][] board){\n        int[][] count = new int[9][9];\n        \n        for(int r=0; r<board.length; r++){\n            for(int c=0; c<board.length; c++){\n                if(board[r][c] == '.')\n                    continue;\n                else if(count[(r/3)*3 + (c/3)][Character.getNumericValue(board[r][c]) - 1] != 0)\n                    return false;\n                else\n                    count[(r/3)*3 + (c/3)][Character.getNumericValue(board[r][c]) - 1] = 1;\n            }\n        }\n        return true;\n    }\n    \n    public boolean isValidSudoku(char[][] board) {\n        return checkRows(board) && checkColumns(board) && checki(board) ;\n    }\n}","compare_result":null,"title_slug":"valid-sudoku","has_notes":false}