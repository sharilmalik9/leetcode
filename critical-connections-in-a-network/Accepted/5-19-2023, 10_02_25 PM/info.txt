{"id":953448060,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684513945,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/953448060/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"101.2 MB","code":"class Solution {\n    \n    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {\n        List<List<Integer>> ls= new ArrayList<>();\n        List<List<Integer>> ans=new ArrayList<>();\n        for(int i=0;i<n;i++){\n            ls.add(new ArrayList<>());\n        }\n        for(int i=0;i<connections.size();i++){\n            ls.get(connections.get(i).get(0)).add(connections.get(i).get(1));\n            ls.get(connections.get(i).get(1)).add(connections.get(i).get(0));\n        }\n        int[] tre= new int[n];\n        int[] low=new int[n];\n        boolean[] vis=new boolean[n];\n        dfs(ls,-1,tre,low,vis,0,1,ans);\n        return ans;\n    }\n    public void dfs(List<List<Integer>> ls,int parent,int[] tre,int[] low, boolean[] vis,int curr,int val,List<List<Integer>> ans){\n        vis[curr]=true;\n        tre[curr]=low[curr]=val;\n        val++;\n        for(int i: ls.get(curr)){\n            if(i==parent){\n                continue;\n            }\n            if(!vis[i]){\n                dfs(ls,curr,tre,low,vis,i,val,ans);\n                low[curr]=Math.min(low[curr],low[i]);\n                if(low[i]>tre[curr]){\n                    List<Integer> oh= new ArrayList<>();\n                    oh.add(i);\n                    oh.add(curr);\n                    ans.add(oh);\n\n                }\n            }\n            else{\n                low[curr]=Math.min(low[curr],low[i]);\n            }\n        }\n    }\n}","compare_result":"11111111111111111","title_slug":"critical-connections-in-a-network","has_notes":false}