{"id":882869511,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674363888,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/882869511/","is_pending":"Not Pending","title":"Reorder Routes to Make All Paths Lead to the City Zero","memory":"N/A","code":"class Solution {\n    int ans=0;\n     boolean[] vis;\n    public int minReorder(int n, int[][] connections){\n       \n        List<List<Integer>> ls= new ArrayList<>();\n        vis=new boolean[n];\n        for(int i=0;i<n;i++){\n            ls.add(new ArrayList<>());\n        }\n        for(int[] curr : connections ){\n            ls.get(curr[0]).add(curr[1]);\n        }\n        vis[0]=true;\n        for(int i:ls.get(0)){\n            ans++;\n            vis[i]=true;\n        }\n        for(int i=1;i<n;i++){\n            dfs(ls,i);\n\n        }\n          \n        return ans;\n    }\n    public void dfs(List<List<Integer>> ls, int i){\n        \n        if(!vis[i]){\n            for(int j :ls.get(i)){\n                if(vis[j]){\n                    vis[i]=true;\n                    break;\n                }\n                \n            }\n        }\n        for(int j: ls.get(i)){\n            if(!vis[j]){\n                vis[j]=true;\n                ans++;\n            }\n            dfs(ls,j);\n        }\n       \n\n    }\n}","compare_result":"1111111101001111111111111111111111111111111111111111111111111111111111110010","title_slug":"reorder-routes-to-make-all-paths-lead-to-the-city-zero","has_notes":false}