{"id":751150194,"lang":"java","lang_name":"Java","time":"11 months, 2 weeks","timestamp":1658238970,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/751150194/","is_pending":"Not Pending","title":"Combination Sum II","memory":"42.8 MB","code":"class Solution {\n    List<List<Integer>> list = new ArrayList<>() ;\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        Arrays.sort(candidates) ;\n        func(candidates,target,new ArrayList<>(),0,false) ;\n        return list ;\n    }\n    public void func(int[] a , int target , List<Integer> rlist , int index , boolean tprev){\n\t//variable 'tprev' is true when we have considered the previous number , false otherwise\n        if(target==0){\n            list.add(new ArrayList<>(rlist)) ;\n            return ;\n        }\n        else if(index>=a.length || target<0){\n            return ;\n        }\n        else{\n            //for each number (i.e. a[index] ) we make two decisions : either we take it in our combination or we don't\n\t\t\t\n\t\t\t//move to the next index without considering the current number (hence tprev is false for next recursion call\n            func(a,target,rlist,index+1,false) ;//not taking the current number\n            \n            //if the previous number is equal to the current one and we had decided to discard it , dont choose current number\n            if(index>0 && a[index]==a[index-1] && !tprev)return ;\n            \n            //else take the number \n            rlist.add(a[index]) ;\n            func(a,target-a[index],rlist,index+1,true) ;\n            rlist.remove(rlist.size()-1) ;\n            \n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false}