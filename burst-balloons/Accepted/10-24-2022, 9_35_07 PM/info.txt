{"id":829348175,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666627507,"status":10,"status_display":"Accepted","runtime":"301 ms","url":"/submissions/detail/829348175/","is_pending":"Not Pending","title":"Burst Balloons","memory":"43.7 MB","code":"class Solution {\n    int dp[][];\n    public int maxCoins(int[] nums) {\n        int n = nums.length;\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        for (int i=0;i<n;i++) list.add(nums[i]);\n        list.add(1);\n        \n        dp = new int[n+2][n+2];\n        \n        for (int i=0;i<n+2;i++) Arrays.fill(dp[i],-1);\n        return helper_max_coins(1,n,list);\n    }\n    \n    private int helper_max_coins(int i,int j,List<Integer> list){\n        if (i>j) return 0;\n        \n        if (dp[i][j] != -1) return dp[i][j];\n        \n        int maxi = Integer.MIN_VALUE;\n        \n        for (int ind=i;ind<=j;ind++){\n            \n            int costs = list.get(i-1) * list.get(ind) * list.get(j+1) // very very deep condition pls seee video again for this \n                          + helper_max_coins(i,ind-1,list)   // left partition\n                          + helper_max_coins(ind+1,j,list);  // right partition\n            maxi = Math.max(maxi,costs);\n        }\n        return dp[i][j] = maxi;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"burst-balloons","has_notes":false}