{"id":877165436,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1673578116,"status":10,"status_display":"Accepted","runtime":"155 ms","url":"/submissions/detail/877165436/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"101.6 MB","code":"class Solution {\n    int res = 0;\n\n    public int longestPath(int[] parent, String s) {\n        int n = parent.length;\n        List<Integer>[] graph = new List[n];\n        for (int i = 0; i < n; i++) {\n            graph[i] = new ArrayList<>();\n        }\n        for (int i = 1; i < n; i++) {\n            graph[parent[i]].add(i);\n            graph[i].add(parent[i]);\n        }\n        boolean[] visited = new boolean[n];\n        dfs(graph, s, 0, visited);\n        return res;\n    }\n\n    private int dfs(List<Integer>[] graph, String s, int cur, boolean[] visited) {\n        if (visited[cur]) return 0;\n        visited[cur] = true;\n        int max = 0, secondMax = 0;\n        for (int next : graph[cur]) {\n            int val = dfs(graph, s, next, visited);\n            if (s.charAt(cur) != s.charAt(next)) {\n                if (val > secondMax) secondMax = val;\n                if (secondMax > max) {\n                    int tmp = secondMax;\n                    secondMax = max;\n                    max = tmp;\n                }\n            }\n        }\n        res = Math.max(res, max + secondMax + 1);\n        return max + 1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-path-with-different-adjacent-characters","has_notes":false}