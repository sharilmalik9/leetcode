{"id":959553328,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685360105,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/959553328/","is_pending":"Not Pending","title":"Number of Squareful Arrays","memory":"39.4 MB","code":"class Solution {\n    private boolean isSquare(int a, int b){\n        double sqr = Math.sqrt(a+b);\n        boolean res = (sqr - Math.floor(sqr)) == 0;\n        return res;\n    }\n    \n    private int count = 0;\n    private void helper(List<Integer> temp, int[] A, boolean[] used, int lastNumber){\n        if (temp.size()==A.length){\n            count++;\n        } else {\n            for (int i = 0; i<A.length;i++){\n                if (used[i] || (i>0 && A[i]==A[i-1] && !used[i-1]))continue;\n                if (lastNumber!=-1){\n\t\t\t\t// if we cant form a square we can not proceed to form a squareful array\n                    if (isSquare(A[i],lastNumber)==false)\n                        continue;\n                }\n                used[i] = true;\n                temp.add(A[i]);\n                helper(temp,A,used,A[i]);\n                temp.remove(temp.size()-1);\n                used[i] = false;\n            }\n        }\n        \n    }\n    public int numSquarefulPerms(int[] A) {\n        Arrays.sort(A);\n        helper(new ArrayList(),A,new boolean[A.length],-1);\n        return count;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-squareful-arrays","has_notes":false}