{"id":818746151,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1665333025,"status":10,"status_display":"Accepted","runtime":"107 ms","url":"/submissions/detail/818746151/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"44.7 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n\n        int n = nums.length;\n        int[] dp = new int[n];\n        int res = 1;\n\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i] = 1;\n            for (int j = i + 1; j < n; j++) {\n                if (nums[i] < nums[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            res = Math.max(res, dp[i]);\n        }\n\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}