{"id":828512115,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666515111,"status":10,"status_display":"Accepted","runtime":"217 ms","url":"/submissions/detail/828512115/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"243.7 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n      int[][] dp= new int[nums.length+1][nums.length+1];\n        for(int i=nums.length-1;i>=0;i--){\n            for(int j=i-1;j>=-1;j--){\n                int len=0+dp[i+1][j+1];\n                if(j==-1 || nums[j]<nums[i]){\n                    len=Math.max(len,1+dp[i+1][i+1]);\n                }\n                dp[i][j+1]=len;\n            }\n            \n}\n        \n        \n        \n        return dp[0][-1+1];\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false}