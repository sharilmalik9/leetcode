{"id":968614390,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1686460082,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/968614390/","is_pending":"Not Pending","title":"Two Best Non-Overlapping Events","memory":"109.6 MB","code":"class Solution {\n    public int maxTwoEvents(int[][] events) {\n        int res = 0, maxVal = 0;\n        //Min heap by ending time\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\n        //Sort the array by start time\n        Arrays.sort(events, Comparator.comparingInt(a -> a[0]));\n        for (int[] e : events) {\n            //Pop all the finished events and maintain maximum value till now\n            while (!pq.isEmpty() && pq.peek()[0] < e[0]) {\n                maxVal = Math.max(maxVal, pq.poll()[1]);\n            }\n            //Check for max value\n            res = Math.max(res, maxVal + e[2]);\n            pq.offer(new int[]{e[1], Math.max(maxVal,e[2])});\n        }\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-best-non-overlapping-events","has_notes":false}