{"id":955763530,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1684843237,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/955763530/","is_pending":"Not Pending","title":"Lexicographical Numbers","memory":"46.9 MB","code":"class Solution {\n    public List<Integer> lexicalOrder(int n) {\n        List<Integer> ans = new ArrayList<>();\n        dfs(ans, n, 1); // Start at 1\n        return ans;\n    }\n    \n    private void dfs(List<Integer> ans, int n, int curr) {\n        if (curr > n) return; // Terminate condition\n        ans.add(curr); // Add curr to the List\n        dfs(ans, n, 10*curr); // Prioritize (compared to += 1) adding a 0 to current number's end\n        if (curr % 10 < 9) { // The condition is to avoid counting a number for multiple times \n            dfs(ans, n, curr + 1); // Plus 1 to the current number\n        }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"lexicographical-numbers","has_notes":false}