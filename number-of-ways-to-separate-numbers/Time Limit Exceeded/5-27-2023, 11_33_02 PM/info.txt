{"id":958514122,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685210582,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/958514122/","is_pending":"Not Pending","title":"Number of Ways to Separate Numbers","memory":"N/A","code":"class Solution {\n    int n;\n    int mod=1000000007;\n    public int numberOfCombinations(String num) {\n        n=num.length();\n        return rec(num,0,\"\");\n    }\n    public int rec(String num,int idx,String prev){\n        if(idx==n){\n            return 1;\n        }\n        int ans=0;\n        for(int i=idx;i<n;i++){\n            if(i==idx && num.charAt(i)=='0'){\n              //  continue;\n                break;\n            }\n            String no=num.substring(idx,i+1);\n            if(no.length()<prev.length()){\n                continue;\n            }\n        //    System.out.println(no);\n            if(no.length()>prev.length() || compare(no,prev)){\n                ans=(ans+rec(num,i+1,no))%mod;\n            }\n\n        }\n        return ans;\n    }\n     public boolean compare(String number,String last){\n        for(int i=0;i<number.length();i++){\n            int n1=number.charAt(i)-'0';\n            int n2=last.charAt(i)-'0';\n            if(n1>n2)\n                return true;\n            else if(n1<n2)\n                return false;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000","title_slug":"number-of-ways-to-separate-numbers","has_notes":false}