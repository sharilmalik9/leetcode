{"id":865620900,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1672038292,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/865620900/","is_pending":"Not Pending","title":"Cycle Length Queries in a Tree","memory":"75.6 MB","code":"class Solution {\n    public int[] cycleLengthQueries(int n, int[][] queries) {\n        int[] ans= new int[queries.length];\n        for(int i=0;i<queries.length;i++){\n            ans[i]=getAnswer(queries,i);\n        }\n        return ans;\n\n\n\n\n\n\n    }\n    public int getAnswer(int[][] queries,int i){\n        int first=queries[i][0];\n        int second=queries[i][1];\n        List<Integer> patha=new ArrayList<>();\n        List<Integer> pathb= new ArrayList<>();\n        while(first!=0){\n            patha.add(first);\n            first=first/2;\n        }\n        while(second!=0){\n            pathb.add(second);\n            second=second/2;\n        }\n        while(patha.size()>0 && pathb.size()>0 && \n        patha.get(patha.size()-1).equals(pathb.get(pathb.size()-1))){\n            patha.remove(patha.size()-1);\n            pathb.remove(pathb.size()-1);\n        }\n        return patha.size()+pathb.size()+1;\n\n\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"cycle-length-queries-in-a-tree","has_notes":false}