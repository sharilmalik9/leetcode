{"id":958267426,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685194449,"status":10,"status_display":"Accepted","runtime":"155 ms","url":"/submissions/detail/958267426/","is_pending":"Not Pending","title":"Palindrome Partitioning IV","memory":"67.4 MB","code":"// class Solution {\n//         Boolean[][] dp;\n//         Boolean[][] paloo;\n//         int n;\n//     public boolean checkPartitioning(String s) {\n//         n=s.length();\n//         dp=new Boolean[n+1][3];\n//         paloo=new Boolean[n+1][n+1];\n//         return check(s,0,2);\n//     }\n//     public boolean check(String s,int i,int m){\n//         if(m==0 && i<n){\n                  \n//             if(palin(s,i,n-1)){\n               \n//                 return dp[i][0]=true;\n//             }\n//             return dp[i][0]=false;\n//         }\n//         if(dp[i][m]!=null){\n//             return dp[i][m];\n//         }\n//         boolean ans=false;\n//         for(int k=i;k<n;k++){\n//             if(palin(s,i,k)){\n//                 ans=ans || check(s,k+1,m-1);\n//             }\n//         }\n//         return dp[i][m]=ans;\n//     }\n   \n//      boolean palin(String string, int i, int j){\n//          if(paloo[i][j]!=null){\n//              return paloo[i][j];\n//          }\n//       while(i < j){\n//       if(string.charAt(i) != string.charAt(j))\n//         return paloo[i][j]=false; \n//       i++;\n//       j--;\n//     }\n//     return paloo[i][j]=true;\n//   }\n    \n// }\n\nclass Solution {\n    public boolean checkPartitioning(String s) {\n        palindromeDp = new Boolean[s.length()+1][s.length()+1];\n        mainDp = new Boolean[s.length()+1][4];\n        boolean ans = helper(s,0,3);\n        return ans;\n    }\n    Boolean palindromeDp[][];\n    Boolean mainDp[][];\n    public boolean helper(String s, int i, int cuts){\n        if(mainDp[i][cuts] != null){\n            return mainDp[i][cuts];\n        }\n        if(i == s.length()){\n            if(cuts == 0){return true;}\n            return false;\n        }\n        if(cuts == 0){return false;}\n        for(int k=i;k<s.length();k++){\n            if(isPalindrome(s,i,k)){\n                if(helper(s,k+1,cuts-1)){return mainDp[i][cuts] = true;}\n            }\n        }\n        return mainDp[i][cuts] = false;\n    }\n    public boolean isPalindrome(String s, int i, int j){\n        if(palindromeDp[i][j]!=null){return palindromeDp[i][j];}\n        if(i>=j){return palindromeDp[i][j] = true;}\n        if(s.charAt(i) == s.charAt(j)){return palindromeDp[i][j] = isPalindrome(s, i+1, j-1);}\n        return palindromeDp[i][j] = false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-partitioning-iv","has_notes":false}