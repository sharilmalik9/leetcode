{"id":740563470,"lang":"java","lang_name":"Java","time":"11 months, 3 weeks","timestamp":1657162152,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/740563470/","is_pending":"Not Pending","title":"Interleaving String","memory":"42.4 MB","code":"class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int m = s1.length();\n       int n = s2.length();\n\n\t// Base case\n\tif(s3.length() != m + n) {\n\t\treturn false;\n\t}\n\tif(s1.length() == 0) {\n\t\treturn s2.equals(s3);\n\t} \n\tif(s2.length() == 0) {\n\t\treturn s1.equals(s3);\n\t}\n\n\t// dp[i][j] represents can we use i characters from s1 and j characters from s2 \n\t// to form the first i+j characters from s3\n\tboolean[][] dp = new boolean[m+1][n+1];\n\n\t// base case using 0 characters from both means yes. \n\tdp[0][0] = true;\n\n\tfor(int i = 1; i < m+1; i++) {\n\t\tdp[i][0] = dp[i-1][0] && s1.charAt(i-1) == s3.charAt(i-1);\n\t}\n\n\tfor(int i = 1; i < n+1; i++) {\n\t\tdp[0][i] = dp[0][i-1] && s2.charAt(i-1) == s3.charAt(i-1);\n\t}\n\n\t// the recursive relationship\n\tfor(int i = 1; i < m+1; i++) {\n\t\tfor(int j = 1; j < n+1; j++) {\n\t\t\tdp[i][j] = (dp[i-1][j] && s1.charAt(i-1) == s3.charAt(i+j-1)) \n\t\t\t\t\t|| (dp[i][j-1] && s2.charAt(j-1) == s3.charAt(i+j-1));\n\t\t}\n\t}\n\n\treturn dp[m][n];\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"interleaving-string","has_notes":false}