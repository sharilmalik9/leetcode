{"id":950659496,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1684138568,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/950659496/","is_pending":"Not Pending","title":"Word Ladder","memory":"44.1 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        HashSet<String> hs= new HashSet<>();\n        Queue<String> que= new LinkedList<>();\n        que.add(beginWord);\n        for(String s: wordList){\n            hs.add(s);\n        }\n        if(!hs.contains(endWord)){\n            return 0;\n        }\n        String curr=beginWord;\n      \n        int level=1;\n        while(que.size()!=0){\n            int size=que.size();\n            while(size!=0){\n                 curr=que.poll();\n                for(int j=0;j<curr.length();j++){\n                    char[] c = curr.toCharArray();\n                    for(char x = 'a'; x <= 'z'; x++){\n                        c[j] = x;\n                        String temp = new String(c);\n                        if(hs.contains(temp)){\n                             if(temp.equals(endWord)){\n                            return level+1;\n                        }\n                            que.add(temp);\n                            hs.remove(temp);\n                        }\n                       \n                    }\n                    \n\n                }\n\n                size--;\n            }\n             level++;\n           \n        }\n        \n        return 0;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false}