{"id":857449580,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1670655241,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/857449580/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"69.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    static long sum;\n    static long maxProd;\n    public static void dfs(TreeNode root) {\n        if(root == null) return;\n        sum += (long)root.val;\n        dfs(root.left);\n        dfs(root.right);\n    }\n    public static long checkMax(TreeNode root) {\n        if(root == null) return 0;\n        long l = checkMax(root.left);\n        long r = checkMax(root.right);\n        maxProd = Math.max(maxProd, (l + r + root.val) * (sum - l - r - root.val));\n        return l + r + root.val;\n    }\n    public int maxProduct(TreeNode root) {\n        sum = 0;\n        maxProd = 0;\n        dfs(root);\n        long rootProd = checkMax(root);\n        return (int)(maxProd % ((int)Math.pow(10, 9) + 7));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree","has_notes":false}