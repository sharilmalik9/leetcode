{"id":916919605,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1679064857,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/916919605/","is_pending":"Not Pending","title":"Graph Connectivity With Threshold","memory":"80.3 MB","code":"class Solution {\n    int[] p;\n    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {\n        List<Boolean> ans= new ArrayList<>();\n        p=new int[n+1];\n        for(int i=0;i<n+1;i++){\n            p[i]=i;\n        }\n        if(threshold==0){\n            for(int i=0;i<queries.length;i++){\n                ans.add(true);\n            }\n            return ans;\n        }\n        for(int i=threshold+1;i<n;i++){\n            int j=2;\n            while(i*j<n+1){\n                union(i*j,i);\n                j++;\n            }\n        }\n        for(int[] query: queries){\n            int px=parent(query[0]);\n            int py= parent(query[1]);\n            if(px==py){\n                ans.add(true);\n            }\n            else{\n                ans.add(false);\n            }\n        }\n        return ans;\n    }\n    public void union(int x, int y){\n        int px=parent(x);\n        int py=parent(y);\n        if(px==py){\n            return;\n        }\n        p[px]=py;\n    }\n    public int parent(int x){\n        if(p[x]==x){\n            return x;\n        }\n        return parent(p[x]);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"graph-connectivity-with-threshold","has_notes":false}