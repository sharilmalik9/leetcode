{"id":980693184,"lang":"java","lang_name":"Java","time":"1 day, 10 hours","timestamp":1687856419,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/980693184/","is_pending":"Not Pending","title":"Parsing A Boolean Expression","memory":"41.6 MB","code":"class Solution {\n\n    public char find(boolean hasTrue, boolean hasFalse, char op){\n        if(op == '!') return hasTrue? 'f' : 't';\n        else if(op == '|') return hasTrue? 't' : 'f';\n        else if(op == '&') return hasFalse? 'f' : 't';\n        return 'a';\n    }\n\n    public boolean parseBoolExpr(String expression) {\n        Stack<Character> st = new Stack<>();\n        char[] exp = expression.toCharArray();\n        for(char ch : exp){\n            if(ch == ',') continue;\n            if(ch != ')') st.push(ch);\n            else{\n                boolean hasTrue = false;\n                boolean hasFalse = false;\n                while(!st.isEmpty() && st.peek() != '('){\n                    char top = st.pop();\n                    if(top == 't') hasTrue = true;\n                    else if(top == 'f') hasFalse = true;\n                }\n                st.pop(); // Removing the opening bracket\n                char op = st.pop(); // Operator\n                st.push(find(hasTrue,hasFalse,op));\n            }\n        }\n        return st.peek() == 't';\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"parsing-a-boolean-expression","has_notes":false}