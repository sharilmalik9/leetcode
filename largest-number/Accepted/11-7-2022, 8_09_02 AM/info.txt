{"id":838409960,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1667788742,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/838409960/","is_pending":"Not Pending","title":"Largest Number","memory":"44 MB","code":"class Solution {\n    public String largestNumber(int[] nums) {\n     String arr[]=new String[nums.length];\n     for(int i=0;i<nums.length;i++){\n         arr[i]=nums[i]+\"\";\n      }\n      Arrays.sort(arr,(a,b)->{\n          long n1=Long.parseLong(a+b);\n          long n2=Long.parseLong(b+a);\n       if(n1>n2){\n           return 1;\n       }\n       else if(n1<n2){\n           return -1;\n       }\n           return 0;\n      });\n     StringBuilder sb=new StringBuilder(\"\");\n     for(int i=arr.length-1;i>=0;i--){\n         sb.append(arr[i]);\n     }\n     if(sb.charAt(0)=='0') return \"0\";\n     return sb.toString();   \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number","has_notes":false}