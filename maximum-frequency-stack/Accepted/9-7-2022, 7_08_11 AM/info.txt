{"id":793471742,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1662514691,"status":10,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/793471742/","is_pending":"Not Pending","title":"Maximum Frequency Stack","memory":"79.2 MB","code":"// class FreqStack {\n//     TreeMap<Integer,List<Integer>> pq;\n//     HashMap<Integer,Integer> hm;\n    \n\n//     public FreqStack() {\n//         pq= new TreeMap<>(Collections.reverseOrder());\n//         hm= new HashMap<>();\n        \n//     }\n    \n//     public void push(int val) {\n//        int freq=hm.getOrDefault(val,0)+1;\n//         hm.put(val,freq);\n//         if(pq.containsKey(freq)){\n//             pq.get(freq).add(val);\n//         }\n//         List<Integer> curr= new ArrayList<>();\n//         curr.add(val);\n//         pq.put(freq,curr);\n        \n//     }\n    \n//     public int pop() {\n//         Map.Entry<Integer,List<Integer>> freq= pq.pollFirstEntry();\n//         List<Integer> ls= freq.getValue();\n//         int item=ls.get(ls.size()-1);\n        \n//         hm.put(item,hm.getOrDefault(item,0)-1);\n//         ls.remove(ls.size()-1);\n//         if(ls.size()>0){\n//             pq.put(freq.getKey(),ls);\n//         }\n//         return item;\n        \n        \n//     }\n// }\nclass FreqStack {\n\n    Map<Integer, Integer> map; // add <number, frequency>\n    TreeMap<Integer, List<Integer>> equalFreq; // add <frequency, list< numbers with this frequency>>\n    \n    public FreqStack() {\n        map = new HashMap();\n        equalFreq = new TreeMap(Collections.reverseOrder()); // sort keys descending to get most frequent numbers in pollFirstEntry()\n    }\n    \n    public void push(int val) {\n        \n        map.put(val, map.getOrDefault(val, 0)+1);\n        \n        int freq = map.get(val);\n        if(!equalFreq.containsKey(freq)) \n            equalFreq.put(freq, new ArrayList());\n        equalFreq.get(freq).add(val);\n  \n    }\n    \n    public int pop() {\n                    \n       Map.Entry<Integer, List<Integer>> entry = equalFreq.pollFirstEntry(); // poll the list with most frequest numbers\n       List<Integer> curVals = entry.getValue();\n       int res = curVals.get(curVals.size() - 1);\n       map.put(res, map.getOrDefault(res, 0)-1); // update the frequency of the number in map\n       curVals.remove(curVals.size() - 1); // update the list by removing the value\n       if(curVals.size() > 0) // if size of list is zero we don't need to put back in TreeMap, no more numbers with that frequecy exists\n           equalFreq.put(entry.getKey(), curVals); \n    return res;\n\n    }\n}\n// Map.Entry<Integer, List<Integer>> entry = equalFreq.pollFirstEntry(); // poll the list with most frequest numbers\n//        List<Integer> curVals = entry.getValue();\n//        int res = curVals.get(curVals.size() - 1);\n//        map.put(res, map.getOrDefault(res, 0)-1); // update the frequency of the number in map\n//        curVals.remove(curVals.size() - 1); // update the list by removing the value\n//        if(curVals.size() > 0) // if size of list is zero we don't need to put back in TreeMap, no more numbers with that frequecy exists\n//            equalFreq.put(entry.getKey(), curVals); \n//     return res;\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.push(val);\n * int param_2 = obj.pop();\n */","compare_result":"11111111111111111111111111111111111111","title_slug":"maximum-frequency-stack","has_notes":false}