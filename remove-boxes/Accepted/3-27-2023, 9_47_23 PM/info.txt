{"id":923113122,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1679933843,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/923113122/","is_pending":"Not Pending","title":"Remove Boxes","memory":"53.1 MB","code":"class Solution {\n    public int removeBoxes(int[] boxes) {\n        int n = boxes.length;\n        int[][][] memo = new int[n][n][n];\n        return removeBoxesSub(boxes, 0, n - 1, 0, memo);\n    }\n\n    private int removeBoxesSub(int[] boxes, int i, int j, int k, int[][][] memo) {\n        if (i > j) return 0;\n        if (memo[i][j][k] > 0) return memo[i][j][k];\n    \n        int tmpi = i, tmpk = k;\n        while (i + 1 <= j && boxes[i + 1] == boxes[i]) {\n            i++;\n            k++;\n        }\n        \n        int res = (k + 1) * (k + 1) + removeBoxesSub(boxes, i + 1, j, 0, memo);\n\n        for (int m = i + 1; m <= j; m++) {\n            if (boxes[i] == boxes[m]) {\n                res = Math.max(res, removeBoxesSub(boxes, i + 1, m - 1, 0, memo) + removeBoxesSub(boxes, m, j, k + 1, memo));\n            }\n        }\n\n        memo[tmpi][j][tmpk] = res;\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-boxes","has_notes":false}