{"id":816277989,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1665035807,"status":10,"status_display":"Accepted","runtime":"230 ms","url":"/submissions/detail/816277989/","is_pending":"Not Pending","title":"Word Search","memory":"41.6 MB","code":"class Solution {\n    public boolean exist(char[][] board, String word) {\n        if(board.length == 0) return false;\n        \n        for(int i = 0 ; i < board.length ; i++){\n            for(int j = 0; j < board[i].length; j++){\n                if(board[i][j] == word.charAt(0) && dfs(board, i, j, 0, word)){\n                    return true;\n                }\n            }\n    }\n         return false;\n    }\n        public boolean dfs(char[][] board, int i, int j, int count, String word){\n            // base case\n            if(count == word.length()) return true;\n            \n            // Range is still in the given\n            if(i < 0 || i >= board.length || j < 0 || j >= board[i].length || board[i][j] != word.charAt(count)){\n                return false;\n            }\n            // we change the values of the board temporarily so we don't accidentaly include it again\n            char temp = board[i][j];\n            board[i][j] = ' ';\n            // Boolean function that returns if we found the complete string or not\n            boolean found = dfs(board,  i + 1, j , count + 1, word) \n                || dfs(board,  i - 1, j, count + 1, word) \n                || dfs(board,  i, j + 1, count + 1, word)\n                || dfs(board,  i , j - 1, count + 1, word);\n            \n            board[i][j] = temp;\n            return found;\n        }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false}