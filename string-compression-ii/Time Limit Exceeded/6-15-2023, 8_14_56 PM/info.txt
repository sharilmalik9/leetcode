{"id":971947812,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1686840296,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/971947812/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"// class Solution {\n//     Integer[][][][] dp;\n//     public int getLengthOfOptimalCompression(String s, int k) {\n//         dp=new Integer[s.length()+1][s.length()+1][27][k+1];\n//        return rec(0,0,26,k,s);        \n//     }\n//     public int rec(int idx,int len,int prev,int k,String s){\n//         if(k<0){\n//             return Integer.MAX_VALUE;\n//         }\n//         if(idx>=s.length()){\n//           return 0;\n//         }\n//         if(dp[idx][len][prev][k]!=null){\n//             return dp[idx][len][prev][k];\n//         }\n//         // delete\n//         int ans=rec(idx+1,len,prev,k-1,s);\n//         //keep\n//         int cnt=0;\n//         if(s.charAt(idx)-'a'==prev){\n//             if(len==1|| len==9||len==99){\n//                 cnt++;    \n//             }\n//             ans=Math.min(ans,cnt+rec(idx+1,len+1,prev,k,s));\n//         }\n//         else{\n//             ans=Math.min(ans,1+rec(idx+1,1,s.charAt(idx)-'a',k,s));\n//         }\n//         return dp[idx][len][prev][k]=ans;    \n//     }\n\n// }\nclass Solution {\n    public int getLengthOfOptimalCompression(String s, int k) {\n       Integer dp[][][][] = new Integer[s.length()+1][k+1][27][101];\n        return dfs(s, k, 0, (char) ('a'+26), 0, dp);\n    }\n    \n    \n    private int dfs(String s, int k, int i, char prevChar, int prevFreq, Integer dp[][][][]) {\n              \n        if(k<0) return Integer.MAX_VALUE;\n        \n        if(i==s.length()) return 0;       \n        \n         if(dp[i][k][prevChar-'a'][prevFreq]!=null) return dp[i][k][prevChar-'a'][prevFreq];\n        \n        \n        \n        int delete = Integer.MAX_VALUE;\n        int dontDelete = Integer.MAX_VALUE;\n        \n        \n        delete = dfs(s, k-1, i+1, prevChar, prevFreq, dp);\n        if(s.charAt(i) != prevChar) {\n            dontDelete = 1 + dfs(s, k, i+1, s.charAt(i), 1, dp); \n        }\n        \n        else if(s.charAt(i) == prevChar) {\n            if(prevFreq == 1) {\n                dontDelete = 1 + dfs(s, k, i+1, s.charAt(i), 2, dp);\n            }\n            else if(prevFreq == 9) {\n                dontDelete = 1 + dfs(s, k, i+1, s.charAt(i), 10, dp);\n            }\n            else if(prevFreq == 99) {\n                 dontDelete = 1 + dfs(s, k, i+1, s.charAt(i), 100, dp);\n            } else {\n                dontDelete = dfs(s,k,i+1, s.charAt(i), prevFreq+1, dp);\n            }\n        }\n        return dp[i][k][prevChar-'a'][prevFreq] = Math.min(delete, dontDelete);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii","has_notes":false}