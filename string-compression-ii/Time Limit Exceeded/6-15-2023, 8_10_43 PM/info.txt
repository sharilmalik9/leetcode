{"id":971945142,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1686840043,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/971945142/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"class Solution {\n    public int getLengthOfOptimalCompression(String s, int k) {\n       return rec(0,0,26,k,s);        \n    }\n    public int rec(int idx,int len,int prev,int k,String s){\n        if(k<0){\n            return Integer.MAX_VALUE;\n        }\n        if(idx>=s.length()){\n          return 0;\n        }\n        // delete\n        int ans=rec(idx+1,len,prev,k-1,s);\n        //keep\n        int cnt=0;\n        if(s.charAt(idx)-'0'==prev){\n            if(len==1|| len==9||len==99){\n                cnt++;    \n            }\n            ans=Math.min(ans,cnt+rec(idx+1,len+1,prev,k,s));\n        }\n        else{\n            ans=Math.min(ans,1+rec(idx+1,1,s.charAt(idx)-'0',k,s));\n        }\n        return ans;    \n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"string-compression-ii","has_notes":false}