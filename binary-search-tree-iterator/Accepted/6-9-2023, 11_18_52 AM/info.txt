{"id":967145058,"lang":"java","lang_name":"Java","time":"2 weeks, 5 days","timestamp":1686289732,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/967145058/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"46.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    Stack<TreeNode> st;\n    public BSTIterator(TreeNode root) {\n        st=new Stack<>();\n        st.push(root);\n        while(root.left!=null){\n            st.add(root.left);\n            root=root.left;\n        }  \n    }\n    public int next(){\n        TreeNode curr=st.pop();\n        int ans=curr.val;\n        if(curr.right==null){\n            return curr.val;\n        }\n        st.push(curr.right);\n        curr=curr.right;\n        while(curr.left!=null){\n            st.add(curr.left);\n            curr=curr.left;\n        }\n        return ans;\n    }\n    \n    public boolean hasNext() {\n        if(st.size()==0){\n            return false;\n        }\n        else{\n            return true;\n        }\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false}