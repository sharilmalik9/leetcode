{"id":727324071,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1655787208,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/727324071/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"51.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    Stack<TreeNode> stack;\n\n    public BSTIterator(TreeNode root) {\n        stack= new Stack<TreeNode>();\n        while(root!=null){\n            stack.push(root);\n            root=root.left;\n        }\n        \n    }\n    \n    public int next() {\n     TreeNode node= stack.pop();\n        int ans=node.val;\n        if(node.right!=null){\n            node=node.right;\n            while(node!=null){\n                stack.push(node);\n                node=node.left;\n            }\n        }\n        return ans;\n        \n        \n    }\n    \n    public boolean hasNext() {\n        return !stack.isEmpty();\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false}