{"id":934208623,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1681572596,"status":10,"status_display":"Accepted","runtime":"286 ms","url":"/submissions/detail/934208623/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"81.2 MB","code":"class Graph {\npublic:\n    vector<vector<pair<int,int>>> adj;\n    int n;\n    Graph(int N, vector<vector<int>>& edges) {\n        adj.resize(N);\n        n=N;\n        \n        \n        for(auto edge:edges){\n            adj[edge[0]].push_back({edge[1],edge[2]});\n        }\n        \n        \n        \n    }\n    \n    void addEdge(vector<int> edge) {\n        \n        adj[edge[0]].push_back({edge[1],edge[2]});\n        \n    }\n    \n    int shortestPath(int node1, int node2) {\n        \n        priority_queue< pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> >pq;\n        vector<int> mindist(n, INT_MAX);\n        mindist[node1]=0;\n        vector<int>  vis(n,0);\n        pq.push({0, node1});\n        while(!pq.empty())\n        {\n            auto p=pq.top();\n            pq.pop();\n            int node=p.second;\n            if(vis[node]) continue;\n            vis[node]=1;\n            int nodeDistance=p.first;\n            for(auto ad : adj[node])\n            {\n                int neighbour=ad.first;\n                int weight=ad.second;\n                if(nodeDistance+weight<mindist[neighbour])\n                {\n                    mindist[neighbour]=nodeDistance+weight;\n                    pq.push({mindist[neighbour], neighbour});\n                }\n            }\n        }\n        \n        if(mindist[node2]==INT_MAX)return -1;\n        return mindist[node2];\n        \n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false}