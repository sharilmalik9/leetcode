{"id":934203645,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1681572208,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/934203645/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"N/A","code":"class Graph {  \n        int V ;\n int INF = Integer.MAX_VALUE;\n int[][] graph;\n    public Graph(int n, int[][] edges) {\n       \n        V=n;\n       graph=new int[n][n];\n         for(int i=0;i<n;i++){\n            Arrays.fill(graph[i],Integer.MAX_VALUE);\n        }\n        for(int[] i : edges){\n            graph[i[0]][i[1]]=i[2];\n        }\n       \n        \n    }\n    \n    public void addEdge(int[] edge) {\n        graph[edge[0]][edge[1]]=edge[2];\n        \n    }\n    \n    public int shortestPath(int node1, int node2) {\n        boolean visited[] = new boolean[V];\n        visited[node1] = true;\n       int ans= minimumCostSimplePath(node1, node2, visited, graph);\n        if(ans==Integer.MAX_VALUE){\n            return -1;\n        }\n        return ans;\n        \n        \n    }\n     int minimumCostSimplePath(int u, int destination,\n                                 boolean visited[],\n                                 int graph[][])\n{\n     \n    // Check if we find the destination\n    // then further cost will be 0\n    if (u == destination)\n        return 0;\n         \n    // Marking the current node as visited\n    visited[u] = true;\n \n    int ans = INF;\n \n    // Traverse through all\n    // the adjacent nodes\n    for(int i = 0; i < V; i++)\n    {\n        if (graph[u][i] != INF && !visited[i])\n        {\n             \n            // Cost of the further path\n            int curr = minimumCostSimplePath(i,\n                        destination, visited, graph);\n \n            // Check if we have reached the\n            // destination\n            if (curr < INF)\n            {\n                 \n                // Taking the minimum cost path\n                ans = Math.min(ans, graph[u][i] + curr);\n            }\n        }\n    }\n \n    // Unmarking the current node\n    // to make it available for other\n    // simple paths\n    visited[u] = false;\n \n    // Returning the minimum cost\n    return ans;\n}  \n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph obj = new Graph(n, edges);\n * obj.addEdge(edge);\n * int param_2 = obj.shortestPath(node1,node2);\n */","compare_result":"111000000000000000000000000000000000","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false}