{"id":969391292,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1686552761,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/969391292/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended","memory":"77.4 MB","code":"class Solution {\n    public int maxEvents(int[][] events) {\n        Arrays.sort(events, (a,b)->a[0]-b[0]);\n        PriorityQueue<Integer> existingEvents = new PriorityQueue<>((a,b)->a-b);\n        int curDay =events[0][0],eventsAttended=0, i=0;\n        while(i<events.length || !existingEvents.isEmpty()){\n            //step 1\n            while(!existingEvents.isEmpty() && existingEvents.peek()<curDay){\n                //discarding the expired events\n                existingEvents.poll();\n            }\n\n            //step 2\n            while(i<events.length && events[i][0]==curDay){\n                //noting the finish time of events that I can attend\n                existingEvents.offer(events[i][1]);\n                i++;\n            }\n            //step 3\n            if(!existingEvents.isEmpty()){\n                existingEvents.poll();\n                eventsAttended++;\n            }\n            //Day Passed by\n            curDay++;\n        }\n        return eventsAttended;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended","has_notes":false}