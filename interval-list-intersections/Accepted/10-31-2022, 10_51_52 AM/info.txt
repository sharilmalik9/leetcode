{"id":833794448,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1667193712,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/833794448/","is_pending":"Not Pending","title":"Interval List Intersections","memory":"54.3 MB","code":"class Solution {\n    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n        List<List<Integer>> ls= new ArrayList<>();\n        int idx1=0;\n        int idx2=0;\n        while(idx1<firstList.length && idx2<secondList.length){\n           List<Integer> curr= new ArrayList<>();\n            curr.add(Math.max(firstList[idx1][0],secondList[idx2][0]));\n            curr.add(Math.min(firstList[idx1][1],secondList[idx2][1]));\n            if(curr.get(0)<=curr.get(1)){\n                ls.add(curr);\n            }\n          if(firstList[idx1][1]<secondList[idx2][1]){\n              idx1++;\n          }\n            else{\n                 idx2++;\n            }\n        }\n        int[][] ans= new int[ls.size()][2];\n        for(int i=0;i<ls.size();i++){\n            int[] curr= new int[2];\n            curr[0]=ls.get(i).get(0);\n            curr[1]=ls.get(i).get(1);\n            ans[i]=curr;\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"interval-list-intersections","has_notes":false}