{"id":969360261,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1686549755,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/969360261/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended II","memory":"79.9 MB","code":"class Solution {\n    int[][] events;\n    public int maxValue(int[][] events, int K) {\n        int dp[][];\n        this.events = events;\n        dp = new int[events.length+1][K+1];\n        Arrays.sort(events, (a,b) -> a[0] - b[0]);\n\n        for(int i = events.length-1; i>=0; i--){\n            for(int k = 1; k<=K; k++){\n                // Attend the event\n                int nextIdx = search(events[i][1], i+1, events.length-1);\n                int attend = events[i][2];\n                if(nextIdx != -1){\n                    attend += dp[nextIdx][k-1];\n                }\n\n                // Dont attend the event \n                int notAttend = dp[i+1][k];\n\n                dp[i][k] = Math.max(attend, notAttend);\n            }\n        }\n        return dp[0][K];\n    }\n\n\n    // A function to search for the first event that starts after x\n    // i.e search for the least value greater than x (Next greater element)\n    public int search(int x, int i, int j){\n        if(events[j][0] <= x) return -1;\n\n        while(i<j){\n            int mid = (j-i)/2 + i;\n            \n            if(events[mid][0] <= x){\n                i = mid + 1;\n            }else{\n                j = mid;\n            }\n        }\n        return j;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended-ii","has_notes":false}