{"id":697592619,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1652292657,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/697592619/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode head= new ListNode((l1.val+l2.val)%10);\n        ListNode nn=head;\n        int carry=(l1.val+l2.val)/10;\n        if(l1.next==null && l2.next==null){\n            return head;\n        }\n           \n        \n        if(l1.next!=null && l2.next!=null){\n            l1=l1.next;\n            l2=l2.next;\n        \n        \n        while(l1!=null && l2!=null){\n\n            int sum=l1.val+l2.val;\n            \n            ListNode cont=new ListNode(sum%10+carry);\n             carry=sum/10;\n            nn.next=cont;\n            nn=nn.next;\n            l1=l1.next;\n            l2=l2.next;\n        }\n        }\n        while(l1!=null){\n            ListNode nn1= new ListNode((l1.val+carry)%10);\n            carry= (l1.val+carry)/10;\n            nn.next=nn1;\n            nn=nn.next;\n            l1=l1.next;\n        }\n        while(l2!=null){\n            ListNode nn2= new ListNode((l2.val+carry)%10);\n            carry=(l2.val+carry)/10;\n            nn.next=nn2;\n            nn=nn.next;\n            l2=l2.next;\n        }\n        \n        return head;\n        \n        \n    }\n}","compare_resulttitle_slug":"add-two-numbers","has_notes":false}