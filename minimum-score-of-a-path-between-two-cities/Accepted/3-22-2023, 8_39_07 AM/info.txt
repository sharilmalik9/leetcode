{"id":919866658,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1679454547,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/919866658/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"98.4 MB","code":"class Solution {\n    public int minScore(int n, int[][] roads) {\n        List<List<int[]>> graph = new ArrayList<>(); //Weighted Graph\n        for(int i=0;i<n;i++) graph.add(new ArrayList<>());  //Initialse the  graph\n        for(int[] e: roads){  //Fill the graph\n            graph.get(e[0]-1).add(new int[]{e[1]-1,e[2]});\n            graph.get(e[1]-1).add(new int[]{e[0]-1,e[2]});\n        }\n        return getMin(0,new boolean[n],graph); //Single DFS\n    }\n    private int getMin(int node, boolean[] visited,List<List<int[]>> graph){\n        int min = Integer.MAX_VALUE;\n        visited[node] = true;\n        for(int[] child: graph.get(node)){\n            min = Math.min(min,child[1]); //Check if this edge is minimum or not;\n            if(!visited[child[0]]){\n                 min = Math.min(min,getMin(child[0],visited,graph));\n            }\n        }\n        return min;\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false}