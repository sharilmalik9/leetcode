{"id":911833260,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1678334798,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/911833260/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"48.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    class pair{\n        int count;\n        TreeNode head;\n        public pair(TreeNode head,int count){\n            this.head=head;\n            this.count=count;\n        }\n    }\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        HashMap<String,pair> hm= new HashMap<>();\n        help(hm,root);\n        List<TreeNode> list = new ArrayList();\n        for(String key : hm.keySet()){\n            pair pir = hm.get(key);\n            if(pir.count>1) list.add(pir.head);\n        }\n        \n        return list;\n\n    }\n    public String help(HashMap<String,pair> hm,TreeNode root){\n        if(root==null){\n            return \"N\";\n        }\n        String left=help(hm,root.left);\n        String right=help(hm,root.right);\n        String curr=root.val + \"#\" + left+\"#\"+ right;\n        if(hm.containsKey(curr)){\n            hm.get(curr).count++;\n\n        }\n        else{\n            hm.put(curr,new pair(root,1));\n        }\n        return curr;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false}