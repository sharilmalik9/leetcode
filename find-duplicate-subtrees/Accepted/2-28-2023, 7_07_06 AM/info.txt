{"id":906213108,"lang":"java","lang_name":"Java","time":"4Â months","timestamp":1677548226,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/906213108/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"48.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        HashMap<String,Pair> map = new HashMap();\n        \n        dfs(root,map);\n        \n        List<TreeNode> list = new ArrayList();\n        for(String key : map.keySet()){\n            Pair pair = map.get(key);\n            if(pair.count>1) list.add(pair.node);\n        }\n        \n        return list;\n    }\n    \n    private String dfs(TreeNode node ,HashMap<String,Pair> map){\n        if(node==null) return \"N\";\n        \n        String left = dfs(node.left,map);\n        String right = dfs(node.right,map);\n        \n        String curr = node.val+\"#\"+left+\"#\"+right;\n        \n        if(map.containsKey(curr)){\n            map.get(curr).count++;\n        }else{\n            map.put(curr,new Pair(node));\n        }\n        \n        return curr;\n    }\n}\n\nclass Pair{\n    TreeNode node;\n    int count;\n    \n    public Pair(TreeNode node){\n        this.node = node;\n        this.count = 1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false}