{"id":887259483,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674968308,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/887259483/","is_pending":"Not Pending","title":"LFU Cache","memory":"118.5 MB","code":"class Node{\n\tint key;\n\tint val;\n\tNode next;\n\tNode prev;\n\tint freq=1;\n\tNode(int k,int v){\n\t\tkey=k;\n\t\tval=v;\n\t}\n}\nclass DoublyLinkedList{\n\tNode head;\n\tNode tail;\n\tDoublyLinkedList(){\n\t\thead=new Node(-1,-1);\n\t\ttail=new Node(-1,-1);\n\t\thead.next=tail;\n\t\ttail.prev=head;\n\t}\n\tvoid addNode(Node v){\n\t\tNode next=head.next;\n\t\thead.next=v;\n\t\tv.prev=head;\n\t\thead.next=v;\n\t\tv.next=next;\n\t\tnext.prev=v;\n\t}\n\tNode removeNode(){\n\t\tNode node=tail.prev;\n\t\tnode.prev.next=tail;\n\t\ttail.prev=node.prev;\n\t\treturn node;\n\t}\n\tNode removeNode(Node v){\n\t\tNode prev=v.prev;\n\t\tNode next=v.next;\n\t\tprev.next=next;\n\t\tnext.prev=prev;\n\t\treturn v;\n\t}\n\tboolean isEmpty(){\n\t\tif(head.next==tail)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}\nclass LFUCache {\n    HashMap<Integer,DoublyLinkedList> freqList=new HashMap<Integer,DoublyLinkedList>();\n\tHashMap<Integer,Node> lfuCache =new HashMap<Integer,Node>(); \n\tint capacity;\n\tint minFreq;\n    public LFUCache(int capacity) {\n        this.capacity=capacity;\n        minFreq=1;\n    }\n    public int get(int key) {\n        if(lfuCache.get(key)==null)\n        \treturn -1;\n       \tNode v=lfuCache.get(key);\n       \tfreqList.get(v.freq).removeNode(v);\n       \tif(freqList.get(v.freq).isEmpty()){\n       \t\tif(minFreq==v.freq){\n                minFreq=v.freq+1;\n            }\n       \t}\n       \tv.freq+=1;\n       \tif(freqList.get(v.freq)==null){\n       \t\tDoublyLinkedList d=new DoublyLinkedList();\n       \t\td.addNode(v);\n       \t\tfreqList.put(v.freq,d);\n       \t}\n       \telse{\n       \t\tfreqList.get(v.freq).addNode(v);\n       \t}\n       \treturn v.val;\n    }\n    \n    public void put(int key, int value) {\n        if(capacity==0)\n            return;\n        if(lfuCache.get(key)!=null){\n        \tNode v=lfuCache.get(key);\n        \tfreqList.get(v.freq).removeNode(v);\n        \tif(freqList.get(v.freq).isEmpty()){\n                if(minFreq==v.freq)\n        \t\tminFreq=v.freq+1;\n        \t}\n\t       \tv.freq+=1;\n\t       \tif(freqList.get(v.freq)==null){\n\t       \t\t DoublyLinkedList d=new DoublyLinkedList();\n\t       \t\td.addNode(v);\n\t       \t\tfreqList.put(v.freq,d);\n\t       \t}\n\t       \telse{\n\t       \t\tfreqList.get(v.freq).addNode(v);\n\t       \t}\n\t       \tv.val=value;\n\t      }\n\t      else{\n\t     \t\tif(lfuCache.size()==capacity){\n\t     \t\t\tNode v=freqList.get(minFreq).removeNode();\n\t     \t\t\tlfuCache.remove(v.key);\t\t\t\n\t     \t\t}\n\t     \t\tNode newNode = new Node(key,value);\n\t     \t\tlfuCache.put(key,newNode);\n\t     \t\tif(freqList.get(1)!=null){\n\t     \t\t\tfreqList.get(1).addNode(newNode);\n\t     \t\t}\n\t     \t\telse{\n\t     \t\t\tDoublyLinkedList d=new DoublyLinkedList();\n\t     \t\t\td.addNode(newNode);\n\t     \t\t\tfreqList.put(1,d);\n\t     \t\t}\n               minFreq=1;\n\t      }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"lfu-cache","has_notes":false}