{"id":863846270,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1671728823,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/863846270/","is_pending":"Not Pending","title":"Sum of Distances in Tree","memory":"64.1 MB","code":"class Solution {\n   public int[] sumOfDistancesInTree(int n, int[][] edges) {\n        // build graph and declare results\n        final ArrayList<Integer>[] graph = new ArrayList[n];\n        final int[] count = new int[n];\n        Arrays.fill(count, 1);\n        final int[] answer = new int[n];\n        for (int i = 0; i < graph.length; i++) {\n            graph[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            graph[edge[0]].add(edge[1]);\n            graph[edge[1]].add(edge[0]);\n        }\n\n        postOrder(0, -1, graph, count, answer);\n        // after postOrder, only answer[root] is correct, so do preOrder to update answer\n        preOrder(0, -1, graph, count, answer, n);\n\n        return answer;\n    }\n\n    // set count et subTreeSum, here use answer[]\n    private void postOrder(int node, int parent, ArrayList<Integer>[] graph, int[] count, int[] answer) {\n        for (int child : graph[node]) {\n            if (child != parent) {\n                postOrder(child, node, graph, count, answer);\n                count[node] += count[child];\n                answer[node] += answer[child] + count[child];\n            }\n        }\n    }\n\n    private void preOrder(int node, int parent, ArrayList<Integer>[] graph, int[] count, int[] answer, int n) {\n        for (int child : graph[node]) {\n            if (child != parent) {\n                answer[child] = answer[node] + (n - count[child]) - count[child];\n                preOrder(child, node, graph, count, answer, n);\n            }\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-distances-in-tree","has_notes":false}