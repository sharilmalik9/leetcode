{"id":977594469,"lang":"java","lang_name":"Java","time":"5 days, 14 hours","timestamp":1687497782,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/977594469/","is_pending":"Not Pending","title":"Falling Squares","memory":"N/A","code":"class Solution {\n    public List<Integer> fallingSquares(int[][] positions){\n        int[][] arr=new int[positions.length][3];\n        for(int i=0;i<positions.length;i++){\n            arr[i][0]=positions[i][0];\n            arr[i][1]=positions[i][0]+positions[i][1];\n            arr[i][2]=positions[i][1];\n        }\n        List<Integer> ans=new ArrayList<>();\n        int max=0;\n        Arrays.sort(arr,(a,b)->a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]);\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[0]-b[0]);\n       for(int i=0;i<arr.length;i++){\n           int start=arr[i][0];\n           int end=arr[i][1];\n           int height=arr[i][2];\n           while(pq.size()!=0 && pq.peek()[0]<=start){\n               pq.poll();\n           }\n          \n           while(pq.size()!=0 && pq.peek()[0]>start){\n               height+=pq.poll()[1];\n           }\n           max=Math.max(max,height);\n           ans.add(max);\n           pq.add(new int[] {end,height});\n\n       }\n       return ans;\n        \n    }\n}","compare_result":"1111010000000000000000000000000000000000000000","title_slug":"falling-squares","has_notes":false}