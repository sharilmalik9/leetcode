{"id":885764603,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674750892,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/885764603/","is_pending":"Not Pending","title":"Minimum Cost to Hire K Workers","memory":"43.3 MB","code":"class Solution {\n    class Worker {\n        int quality;\n        int wage;\n        double ratio;\n        Worker(int quality, int wage){\n            this.quality = quality;\n            this.wage = wage;\n            this.ratio = this.wage*1.0/this.quality;\n        }\n    }\n    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {\n        List<Worker> workers = new ArrayList<>();\n        for(int i=0; i < quality.length; i++){\n            workers.add(new Worker(quality[i], wage[i]));\n        }\n\n        Collections.sort(workers, (a,b)->Double.compare(a.ratio,b.ratio));\n        PriorityQueue<Worker> pq = new PriorityQueue<>((a,b)-> b.quality-a.quality);\n        double totalQuality = 0, minCost = Double.MAX_VALUE;\n        for(Worker worker : workers){\n            pq.add(worker);\n            totalQuality += worker.quality;\n            if(pq.size() == k){\n                minCost = Math.min(minCost, totalQuality*worker.ratio);\n                totalQuality -= pq.remove().quality;       // Remove the worker with the highest quality\n            }\n        }\n        \n        return minCost;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-hire-k-workers","has_notes":false}