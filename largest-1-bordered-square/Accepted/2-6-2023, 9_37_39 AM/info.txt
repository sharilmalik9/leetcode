{"id":892397872,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1675656459,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/892397872/","is_pending":"Not Pending","title":"Largest 1-Bordered Square","memory":"43.1 MB","code":"class Solution {\n    public int largest1BorderedSquare(int[][] grid){\n        int m=grid.length;\n        int n=grid[0].length;\n        int[][] up=new int[m][n];\n        int[][] side=new int[m][n];\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(grid[i][j]==1){\n                    side[i][j]=(i==0) ? 1: side[i-1][j]+1;\n                    up[i][j]=(j==0) ? 1: up[i][j-1]+1;\n\n                }\n            }\n        }\n        int max=0;\n     \n       \n        for(int i=m-1;i>=0;i--){\n            for(int j=n-1;j>=0;j--){\n                int min=Math.min(up[i][j],side[i][j]);\n                while(min>max){\n                    if(up[i-min+1][j]>=min && side[i][j-min+1]>=min){\n                        max=min;\n                    }\n                    min--;\n                }\n            }\n        }\n        return max*max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-1-bordered-square","has_notes":false}