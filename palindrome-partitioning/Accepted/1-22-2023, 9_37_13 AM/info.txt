{"id":882845620,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674360433,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/882845620/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"195.6 MB","code":"class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> lists = new ArrayList<>();\n        fcb(s,lists,new ArrayList<>(), 0); \n        return lists;\n    }\n    \n    private void fcb(String s, List<List<String>> lists, ArrayList<String> list, int start) {\n        if (start == s.length()){\n            lists.add(new ArrayList<>(list));\n            return;\n        }\n        for (int i = start; i < s.length(); ++i) {\n            if (isPalindrome(s, start, i)){\n                list.add(s.substring(start,i+1));\n                fcb(s,lists,list,i+1);\n                list.remove(list.size() -1);\n            }\n        }\n    }\n\n    private boolean isPalindrome(String substring,int start , int end) {\n        while (end >= start){\n            if (substring.charAt(end) != substring.charAt(start)){\n               return false;\n            }\n            end--;\n            start++;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false}