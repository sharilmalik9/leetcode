{"id":929980090,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1680934271,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/929980090/","is_pending":"Not Pending","title":"Clone Graph","memory":"42.9 MB","code":"\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if(node == null)    return null;\n        HashMap<Node, Node> map = new HashMap<>();\n        ArrayDeque<Node> q = new ArrayDeque<>();\n        q.add(node);\n        Node head = new Node(node.val);\n        map.put(node, head);\n        while(q.size() > 0){\n            Node rem = q.remove();\n            if(map.containsKey(rem) == false){\n                Node newnode = new Node(rem.val);\n                map.put(rem, newnode);\n            }\n            List<Node> ngbrs = rem.neighbors;\n            Node n1 = map.get(rem);\n            for(Node ngbr : ngbrs){\n                if(map.containsKey(ngbr) == false){\n                    Node n2 = new Node(ngbr.val);\n                    map.put(ngbr, n2);\n                    q.add(ngbr);\n                }\n                Node n2 = map.get(ngbr);\n                n1.neighbors.add(n2);\n            }\n        }\n        return head;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}