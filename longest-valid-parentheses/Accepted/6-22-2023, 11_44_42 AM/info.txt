{"id":976878761,"lang":"java","lang_name":"Java","time":"6 days, 13 hours","timestamp":1687414482,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/976878761/","is_pending":"Not Pending","title":"Longest Valid Parentheses","memory":"43.7 MB","code":"class Solution {\n    public int longestValidParentheses(String s) {\n        \n        Stack<Integer> stk = new Stack<>();\n        char[] arr = s.toCharArray();\n        \n        int count =0;\n        int res=0;\n        \n        for(int i=0; i<arr.length; i++){\n            if(arr[i]=='('){\n                stk.push(i);\n            }\n            else if(arr[i]==')' && stk.size()>0){\n                stk.pop();\n            }\n            else if(arr[i]==')' && stk.size()==0){\n                arr[i]='.';\n            }\n        }\n        \n        while(stk.size()>0){\n            arr[stk.pop()]= '.';\n        }\n        \n        for(int i=0; i<arr.length; i++){\n            if(arr[i]=='(' || arr[i]==')'){\n                count++;\n            }\n            else{\n                res = Math.max(res, count);\n                count=0;\n            }\n        }\n        return Math.max(res,count);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-valid-parentheses","has_notes":false}