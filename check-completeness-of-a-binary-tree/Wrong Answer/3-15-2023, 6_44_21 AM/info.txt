{"id":915343929,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1678842861,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/915343929/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        if(root==null){\n            return true;\n        }\n        if(root.right==null && root.left==null){\n            return true;\n        }\n        if(root.right==null && root.left!=null){\n            return isCompleteTree(root.left);\n        }\n        if(root.left==null && root.right!=null){\n            return false;\n        }\n        return isCompleteTree(root.left) && isCompleteTree(root.right);\n    }\n}","compare_result":"111111111100111111001101110111110011100111011001111010011111111101011001101111010001010010100101001010010100101001010100","title_slug":"check-completeness-of-a-binary-tree","has_notes":false}