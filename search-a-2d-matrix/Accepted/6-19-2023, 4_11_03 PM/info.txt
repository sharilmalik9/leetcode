{"id":974678618,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1687171263,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/974678618/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"41.2 MB","code":"class Solution {\n\tpublic boolean searchMatrix(int[][] matrix, int target) {\n\t\t//STEPS FOR SOLUTION:-\n\t\t//1)Starting from i=0 and j=col-1, navigate through matrix by comparing target with matrix[i][j]\n\t\t//2)If target>matrix[i][j]- move down i.e. i=i+1 and j remains same\n\t\t//3)If target<matrix[i][j]- move left i.e. i remains same and j=j-1\n\n\t\tint row= matrix.length;\n\t\tint col= matrix[0].length;\n\n\t\tint i=0, j=col-1;\n\t\twhile(i<row && j>=0)\n\t\t{\n\t\t\tif(matrix[i][j]==target)\n\t\t\t\treturn true;\n\t\t\telse if(matrix[i][j]<target)\n\t\t\t\ti++;\n\t\t\telse if(matrix[i][j]>target)\n\t\t\t\tj--;\n\t\t}\n\t\treturn false;\n\t}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false}