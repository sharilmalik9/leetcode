{"id":924992066,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1680201463,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/924992066/","is_pending":"Not Pending","title":"Scramble String","memory":"43.3 MB","code":"class Solution {\n    // for storing already solved problems\n    Map<String, Boolean> mp = new HashMap<>();\n\n    public boolean isScramble(String s1, String s2) {\n        int n = s1.length();\n\n        // if both strings are not equal in size\n        if (s2.length() != n)\n            return false;\n\n        // if both strings are equal\n        if (s1.equals(s2))\n            return true;\n\n        // if code is reached to this condition then following this are sure:\n        // 1. size of both string is equal\n        // 2. string are not equal\n        // so size is equal (where size==1) and they are not equal then obviously false\n        // example 'a' and 'b' size is equal ,string are not equal\n        if (n == 1)\n            return false;\n\n        String key = s1 + \" \" + s2;\n\n        // check if this problem has already been solved\n        if (mp.containsKey(key))\n            return mp.get(key);\n\n        // for every iteration it can two condition\n        // 1.we should proceed without swapping\n        // 2.we should swap before looking next\n        for (int i = 1; i < n; i++) {\n            // ex of without swap: gr|eat and rg|eat\n            boolean withoutswap = (\n                    // left part of first and second string\n                    isScramble(s1.substring(0, i), s2.substring(0, i))\n\n                            &&\n\n                            // right part of first and second string;\n                            isScramble(s1.substring(i), s2.substring(i))\n            );\n\n            // if without swap give us right answer then we do not need\n            // to call the recursion withswap\n            if (withoutswap) {\n                mp.put(key, true);\n                return true;\n            }\n\n            // ex of withswap: gr|eat rge|at\n            // here we compare \"gr\" with \"at\" and \"eat\" with \"rge\"\n            boolean withswap = (\n                    // left part of first and right part of second\n                    isScramble(s1.substring(0, i), s2.substring(n - i))\n\n                            &&\n\n                            // right part of first and left part of second\n                            isScramble(s1.substring(i), s2.substring(0, n - i))\n            );\n\n            // if withswap give us right answer then we return true\n            // otherwise the for loop do it work\n            if (withswap) {\n                mp.put(key, true);\n                return true;\n            }\n            // we are not returning false in else case\n            // because we want to check further cases with the for loop\n        }\n        mp.put(key, false);\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"scramble-string","has_notes":false}