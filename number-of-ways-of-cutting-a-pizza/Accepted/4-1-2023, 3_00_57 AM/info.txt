{"id":925586287,"lang":"java","lang_name":"Java","time":"2 months, 4 weeks","timestamp":1680298257,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/925586287/","is_pending":"Not Pending","title":"Number of Ways of Cutting a Pizza","memory":"40.3 MB","code":"class Solution {\npublic int ways(String[] pizza, int k) {\nint m = pizza.length, n = pizza[0].length();\nInteger[][][] dp = new Integer[k][m][n];\nint[][] preSum = new int[m+1][n+1];\nfor (int r = m - 1; r >= 0; r--)\nfor (int c = n - 1; c >= 0; c--)\npreSum[r][c] = preSum[r][c+1] + preSum[r+1][c] - preSum[r+1][c+1] + (pizza[r].charAt(c) == 'A' ? 1 : 0);\nreturn dfs(m, n, k-1, 0, 0, dp, preSum);\n}\nint dfs(int m, int n, int k, int r, int c, Integer[][][] dp, int[][] preSum) {\nif (preSum[r][c] == 0) return 0;\nif (k == 0) return 1;\nif (dp[k][r][c] != null) return dp[k][r][c];\nint ans = 0;\nfor (int nr = r + 1; nr < m; nr++)\nif (preSum[r][c] - preSum[nr][c] > 0)\nans = (ans + dfs(m, n, k - 1, nr, c, dp, preSum)) % 1_000_000_007;\nfor (int nc = c + 1; nc < n; nc++)\nif (preSum[r][c] - preSum[r][nc] > 0)\nans = (ans + dfs(m, n, k - 1, r, nc, dp, preSum)) % 1_000_000_007;\nreturn dp[k][r][c] = ans;\n}\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-of-cutting-a-pizza","has_notes":false}