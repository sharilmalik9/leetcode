{"id":950248497,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1684073912,"status":10,"status_display":"Accepted","runtime":"2337 ms","url":"/submissions/detail/950248497/","is_pending":"Not Pending","title":"Maximize Score After N Operations","memory":"50.4 MB","code":"class Solution {\n    public int maxScore(int[] nums) {\n        dp=new HashMap<>();\n        return util(nums, new boolean[nums.length], nums.length/2);\n    }\n\n    private int gcd(int x, int y) {\n        if(x==0) return y;\n        else if(y==0) return x;\n        else return gcd(y, x%y);\n    }\n    private Map<String, Integer> dp;\n    private int util(int arr[], boolean taken[], int operations) {\n        if(operations==0) {\n            return 0;\n        }\n        String key=Arrays.toString(taken)+\"|\"+operations;\n        if(dp.containsKey(key)) return dp.get(key);\n        int max=Integer.MIN_VALUE;\n        for(int i=0;i<arr.length;i++) {\n            for(int j=i+1;j<arr.length;j++) {\n                if(!taken[i] && !taken[j]) {\n                    taken[i]=taken[j]=true;\n                    int val=(operations*gcd(arr[i], arr[j]))+util(arr, taken, operations-1);\n                    max=Math.max(max, val);\n                    taken[i]=taken[j]=false;\n                }\n            }\n        }\n        dp.put(key, max);\n        return max;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-score-after-n-operations","has_notes":false}