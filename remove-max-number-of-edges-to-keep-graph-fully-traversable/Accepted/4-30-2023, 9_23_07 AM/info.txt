{"id":941912555,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1682826787,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/941912555/","is_pending":"Not Pending","title":"Remove Max Number of Edges to Keep Graph Fully Traversable","memory":"116.6 MB","code":"class Solution {\n    public int maxNumEdgesToRemove(int n, int[][] edges) {\n        \n        int[] rootA = new int[n + 1];\n        int[] rootB = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            rootA[i] = i;\n            rootB[i] = i;\n        }\n\n        int res = 0;\n        int aliceEdges = 0;\n        int bobEdges = 0;\n\n        \n        for (int[] edge : edges) {\n            if (edge[0] == 3) {\n                if (union(edge[1], edge[2], rootA)) {\n                    aliceEdges++;\n                    if (union(edge[1], edge[2], rootB)) {\n                        bobEdges++;\n                    }\n                } else {\n                    res++;\n                }\n            }\n        }\n\n        int[] rootA_copy = rootA.clone();\n\n        \n        for (int[] edge : edges) {\n            if (edge[0] == 1) {\n                if (union(edge[1], edge[2], rootA)) {\n                    aliceEdges++;\n                } else {\n                    res++;\n                }\n            }\n        }\n\n        \n        for (int[] edge : edges) {\n            if (edge[0] == 2) {\n                if (union(edge[1], edge[2], rootB)) {\n                    bobEdges++;\n                } else {\n                    res++;\n                }\n            }\n        }\n\n        return (aliceEdges == bobEdges && aliceEdges == n - 1) ? res : -1;\n    }\n\n    public boolean union(int a, int b, int[] root) {\n        int rootA = find(a, root);\n        int rootB = find(b, root);\n        if (rootA == rootB) {\n            return false;\n        }\n        root[rootA] = rootB;\n        return true;\n    }\n\n    public int find(int a, int[] root) {\n        if (root[a] != a) {\n            root[a] = find(root[a], root);\n        }\n        return root[a];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-max-number-of-edges-to-keep-graph-fully-traversable","has_notes":false}