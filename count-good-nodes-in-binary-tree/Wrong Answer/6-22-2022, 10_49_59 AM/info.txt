{"id":728193560,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1655875199,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/728193560/","is_pending":"Not Pending","title":"Count Good Nodes in Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int goodNodes(TreeNode root) {\n         String sb = \"\";\n    ArrayList<String> result = new ArrayList<String>();\n    helper(root, result, sb);\n    return result.size();\n        \n    }\n    public  int convertStringToInt(String input) {\n        // Write your code here\n        if (input.length() == 0) {\n            return 0;\n        }\n        // Ascii value of '0' is 48, therefore to get the integer value of 48 we\n        // subtract by 48.\n        int n = input.charAt(0) - 48;\n\n        for (int i = 0; i < input.length() - 1; i++) {\n            n *= 10;\n        }\n\n        return n + convertStringToInt(input.substring(1));\n    }\n\n    public  boolean checkString(String str) {\n        ArrayList<Integer> arr1 = new ArrayList<>();\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '-') {\n                arr1.add(i);\n            }\n        }\n        int pos = 0;\n        ArrayList<Integer> arr2 = new ArrayList<>();\n\n        for (int i = 0; i < arr1.size(); i++) {\n            String str1 = str.substring(pos, arr1.get(i));\n            pos = arr1.get(i) + 1;\n            arr2.add(convertStringToInt(str1));\n        }\n        arr2.add(convertStringToInt(str.substring(pos)));\n        // System.out.println(arr2);\n\n        int x = arr2.get(arr2.size() - 1);\n\n        for (int i = 0; i < arr2.size() - 1; i++) {\n            if (arr2.get(i) > x) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    public void helper(TreeNode root, ArrayList<String> result, String s){\n    if(root==null){\n        return;\n    }\n \n    s = s+\"-\"+root.val;\n       // System.out.println(s);\n   System.out.println(s);\n    if(checkString(s)){\n            System.out.println(s);\n        \n        result.add(s);\n    }\n \n   \n \n    if(root.left!=null){\n        helper(root.left, result, s);\n    }\n    if(root.right!=null){\n        helper(root.right, result, s);\n    }\n    }\n}","compare_result":"111111111111100000011001111111111111111111101000000000000011100","title_slug":"count-good-nodes-in-binary-tree","has_notes":false}