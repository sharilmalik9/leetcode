{"id":697336509,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1652259365,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/697336509/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int GetAtIdx(int idx,ListNode head){\n        if(idx==0 ){\n            return head.val;\n        }\n        ListNode nn=head;\n        for(int i=1;i<=idx;i++){\n            nn=nn.next;\n            \n            \n        }\n        return nn.val;\n    }\n    public boolean isPalindrome(ListNode head) {\n        if(head==null){\n            return false;\n            \n        }\n        if(head.next==null){\n            return true;\n        }\n        ListNode nn= head;\n        int len=0;\n        while(nn!=null){\n            len++;\n            nn=nn.next;\n        \n        }\n        int check=0;\n        int check1=0;\n        for(int i=0;i<len;i++){\n            check1++;\n            if(GetAtIdx(i,head)==GetAtIdx(len-i-1,head)){\n                check++;\n            }\n            \n        }\n        if(check1==check){\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111100000000000","title_slug":"palindrome-linked-list","has_notes":false}