{"id":911633717,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1678300782,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/911633717/","is_pending":"Not Pending","title":"Maximum Candies Allocated to K Children","memory":"N/A","code":"class Solution {\n    public int maximumCandies(int[] candies, long k){\n        int max=0;\n        long sum=0;\n        for(int i=0;i<candies.length;i++){\n            max=Math.max(max,candies[i]);\n            sum+=candies[i];\n        }\n        if(sum<k){\n            return 0;\n        }\n        if(sum==k){\n            return 1;\n        }\n        int min=0;\n        int ans=0;\n        while(min<=max){\n            int mid=(max+min)/2;\n            if(check(candies,k,mid)){\n                min=mid+1;\n                ans=mid;\n\n            }\n            else{\n                max=mid-1;\n\n            }\n        }\n        return ans;\n        \n    }\n    public boolean check(int[] candies,long k,int mid){\n        for(int i : candies){\n            while(i>=0){\n                i=i-mid;\n                if(i<0){\n                    break;\n                }\n                k--;\n\n            }\n        }\n        if(k<=0){\n            return true;\n        }\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000","title_slug":"maximum-candies-allocated-to-k-children","has_notes":false}