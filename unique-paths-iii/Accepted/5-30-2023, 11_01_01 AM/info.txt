{"id":960025114,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1685424661,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/960025114/","is_pending":"Not Pending","title":"Unique Paths III","memory":"40.4 MB","code":"class Solution {\n   int count = 0;\n  int[][] grid;\n  int rows, cols;\n\n  public int uniquePathsIII(int[][] grid) {\n    rows = grid.length;\n    cols = grid[0].length;\n    this.grid = grid;\n    count = 0;\n\n    int toVisit = 0;\n    int startR = 0, startC = 0;\n\n    for (int r = 0; r < rows; r++) {\n      for (int c = 0; c < cols; c++) {\n        if (grid[r][c] == -1) continue;\n\n        if (grid[r][c] == 1) {\n          startC = c;\n          startR = r;\n        }\n        toVisit++;\n      }\n    }\n\n    dfs(startR, startC, toVisit);\n\n    return count;\n  }\n\n  void dfs(int r, int c, int toVisit) {\n    toVisit--;\n    if (toVisit < 0)\n      return;\n    if (grid[r][c] == 2 && toVisit == 0) {\n      count++;\n      return;\n    }\n    if (grid[r][c] == -1)\n      return;\n\n    grid[r][c] = 3;\n\n    if (r > 0 && grid[r - 1][c] != 3) {\n      int state = grid[r - 1][c];\n      dfs(r - 1, c, toVisit);\n      grid[r - 1][c] = state;\n    }\n    if (c > 0 && grid[r][c - 1] != 3) {\n      int state = grid[r][c - 1];\n      dfs(r, c - 1, toVisit);\n      grid[r][c - 1] = state;\n    }\n    if (r < rows - 1 && grid[r + 1][c] != 3) {\n      int state = grid[r + 1][c];\n      dfs(r + 1, c, toVisit);\n      grid[r + 1][c] = state;\n    }\n    if (c < cols - 1 && grid[r][c + 1] != 3) {\n      int state = grid[r][c + 1];\n      dfs(r, c + 1, toVisit);\n      grid[r][c + 1] = state;\n    }\n  }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"unique-paths-iii","has_notes":false}