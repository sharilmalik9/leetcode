{"id":825601474,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666146311,"status":10,"status_display":"Accepted","runtime":"348 ms","url":"/submissions/detail/825601474/","is_pending":"Not Pending","title":"Using a Robot to Print the Lexicographically Smallest String","memory":"126.1 MB","code":"class Solution {\n\t/*The function sufficeMin is mainly used to retreive the minimum characters index towards the right of the string\n\tIt stores the minimum characters index towards its right in it. */\n    public int[] sufficeMin(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        arr[n-1] = n-1;\n        for(int i=n-2; i>=0; i--) {\n            if(s.charAt(i) <= s.charAt(arr[i+1])) arr[i] = i;\n            else arr[i] = arr[i+1];\n        }\n        return arr;\n    }\n\t/*The fucntion checks if the two either of the two condition is satsfied, if it is the character is appended to the finalans.*/\n    public String robotWithString(String s) {\n        Stack<Character> t = new Stack<>();\n        int strlen = s.length(), index = 1;\n        StringBuilder finalstr = new StringBuilder();\n        int[] sufficemin = sufficeMin(s);\n        t.push(s.charAt(0));\n        while(index < strlen) {\n            int minInd = sufficemin[index];\n            if(!t.isEmpty() && (t.peek() <= s.charAt(minInd))) {\n                finalstr.append(t.pop());\n                continue;\n            \n            }else if(s.charAt(index) <= s.charAt(minInd)){\n                finalstr.append(s.charAt(index));\n                index++;   \n            }\n            else  {\n                while(index < minInd) {\n                    t.push(s.charAt(index));\n                    index++;\n                }\n            }\n        }\n        \n        while(!t.isEmpty()) {\n            finalstr.append(t.pop());\n        }\n        return finalstr.toString();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"using-a-robot-to-print-the-lexicographically-smallest-string","has_notes":false}