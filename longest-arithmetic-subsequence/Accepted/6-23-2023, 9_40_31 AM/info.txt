{"id":977556341,"lang":"java","lang_name":"Java","time":"5 days, 15 hours","timestamp":1687493431,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/977556341/","is_pending":"Not Pending","title":"Longest Arithmetic Subsequence","memory":"54.2 MB","code":"// class Solution {\n//     Integer[][][] dp;\n//     public int longestArithSeqLength(int[] nums) {\n//         dp=new Integer[nums.length+1][nums.length+1][1002];\n//         return rec(0,1001,-1,nums);\n        \n//     }\n//     public int rec(int idx,int diff,int prev,int[] nums){\n//         if(idx>=nums.length){\n//             return 0;\n//         }\n//         if()\n//         int ans=0;\n//         //dont include\n//         ans=rec(idx+1,diff,prev,nums);\n//         // include\n//         if(prev==-1){\n//             ans=Math.max(1+rec(idx+1,diff,idx,nums),ans);\n//         }\n//         else if(diff==1001){\n//             ans=Math.max(1+rec(idx+1,nums[idx]-nums[prev],idx,nums),ans);\n//         }\n//         else if(nums[idx]-nums[prev]==diff){\n//             ans=Math.max(1+rec(idx+1,diff,idx,nums),ans);\n//         }\n//         return ans;\n//     }\n// }\nclass Solution {\n    public int longestArithSeqLength(int[] nums) {\n        int dp[][] = new int[nums.length][1001];\n        int max = 0;\n        for(int i = 1; i<nums.length; i++){\n            for(int j = i-1; j >= 0; j--){\n                int dif = 500 + nums[i] - nums[j];\n                dp[i][dif] = Math.max(dp[i][dif], dp[j][dif]+1);\n                max = Math.max(max, dp[i][dif]);\n            }\n        }\n        return max+1;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-arithmetic-subsequence","has_notes":false}