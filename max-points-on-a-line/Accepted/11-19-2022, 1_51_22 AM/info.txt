{"id":846020035,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1668802882,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/846020035/","is_pending":"Not Pending","title":"Max Points on a Line","memory":"41.9 MB","code":"class Solution {\n    public int maxPoints(int[][] p) {\n    // If 0, 1, or 2 points, then there are that many points on a line.\n    int n = p.length;\n    if (n<= 2)  \n        return p.length;\n    // Else 3 or more points were passed so we need to test for co-linear triples.\n    int maxP = 0;\n    // Loop through the passed points to get point1 as first point.\n    for (int i = n-1;i>=2;i--) {\n        int x1 = p[i][0];\n        int y1 = p[i][1];\n        // Loop through all points after point1, to get point2.  This will define \n        // a line through point1 and point2.\n        for (int j=i-1;j>=1;j--) {\n            int x2 = p[j][0] - x1;\n            int y2 = p[j][1] - y1;\n            int Count = 2;\n            // Loop through all points after point2, to get point3.  If point3 is \n            // on the same line as point1 and point2, then count another point on \n            // that same point1:point2 line.\n            for (int k=j-1;k>=0;k--)\n                if ((p[k][1]-y1)*x2 == (p[k][0]-x1)*y2)\n                    Count++;\n            maxP = Math.max(maxP, Count);\n        }\n    }\n    return maxP;               \n}\n}","compare_result":"11111111111111111111111111111111111","title_slug":"max-points-on-a-line","has_notes":false}