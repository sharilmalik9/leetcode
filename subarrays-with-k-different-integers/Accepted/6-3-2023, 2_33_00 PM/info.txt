{"id":962861846,"lang":"java","lang_name":"Java","time":"3 weeks, 4 days","timestamp":1685782980,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/962861846/","is_pending":"Not Pending","title":"Subarrays with K Different Integers","memory":"44.9 MB","code":"// utmost k length -utmost k-1 length = k length \n// for utmost k length - max till k (i and j )=j-i+1 ie no of elements here \n// if greater than k move the pointer \nclass Solution {\n    static int subarraysWithAtMostKDistinct(int nums[],int k){\n        int ans = 0;\n        int l = 0;\n        Map<Integer,Integer> mp = new HashMap<>();\n        for(int i = 0;i < nums.length;i++){\n            mp.put(nums[i],mp.getOrDefault(nums[i],0) + 1);\n            for(;mp.size() > k;){\n                mp.put(nums[l],mp.get(nums[l]) - 1);\n                if(mp.get(nums[l]) == 0) mp.remove(nums[l]);\n                l++;\n            }\n            ans += i - l + 1;\n        }\n        return ans;\n    }\n    public int subarraysWithKDistinct(int[] nums, int k) {\n        return subarraysWithAtMostKDistinct(nums,k) - subarraysWithAtMostKDistinct(nums,k - 1);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"subarrays-with-k-different-integers","has_notes":false}