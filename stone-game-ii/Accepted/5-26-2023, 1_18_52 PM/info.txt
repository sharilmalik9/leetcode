{"id":957559227,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685087332,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/957559227/","is_pending":"Not Pending","title":"Stone Game II","memory":"44.1 MB","code":"class Solution {\n    int[] piles;\n    int n;\n    int ans = 0;\n    int[][][]  dp;\n    public int stoneGameII(int[] piles) {\n        this.piles = piles;\n        this.n = piles.length;\n        this.dp  = new int[piles.length][piles.length*2 + 1][2];\n        for(int i[][] : dp) for(int j[] : i) Arrays.fill(j,-1);\n        return f(0,1,true);\n    }\n    public int f(int i, int m, boolean turn){\n\n        if(i == piles.length) {\n            // ans = Math.max(ans,curr);\n            return 0;\n        }\n\n        int k = turn ? 1:0;\n        if(dp[i][m][k] != -1 ) return dp[i][m][k];\n        if(turn){\n            int ans2 = 0;\n            int sum = 0;\n            for(int x = 1; x<= 2*m && i+x-1<n; x++){\n                sum += piles[i+x-1];\n                ans2 = Math.max(ans2, sum + f(i + x, Math.max(x,m), !turn));\n            }\n            return dp[i][m][k] = ans2;\n\n        }else{\n            int ans1 = Integer.MAX_VALUE;\n            for(int x = 1; x<= 2*m  && i+x-1<n; x++){\n                ans1 = Math.min(ans1, f(i + x, Math.max(x,m), !turn));\n            }\n            return dp[i][m][k]= ans1;\n        }\n\n\n        \n    }\n    \n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-ii","has_notes":false}