{"id":957817284,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685121723,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/957817284/","is_pending":"Not Pending","title":"Stone Game II","memory":"41.1 MB","code":"class Solution {\n    public int helper(int[] piles, int[][] dp, int[] suffixSum, int i, int M) {\n        if (i == piles.length) return 0;\n        if (i + 2 * M >= piles.length) return suffixSum[i];\n\n        if (dp[i][M] != 0) return dp[i][M];\n\n        int result = 0;\n        for (int x = 1; x <= 2 * M; ++x) {\n            result = Math.max(result, suffixSum[i] - helper(piles, dp, suffixSum, i + x, Math.max(M, x)));\n        }\n\n        dp[i][M] = result;\n        return result;\n    }\n\n    public int stoneGameII(int[] piles) {\n        if (piles.length == 0) return 0;\n        int[][] dp = new int[piles.length][piles.length];\n\n        int[] suffixSum = new int[piles.length];\n        suffixSum[suffixSum.length - 1] = piles[piles.length - 1];\n        for (int i = piles.length - 2; i >= 0; --i) suffixSum[i] = piles[i] + suffixSum[i + 1];\n\n        return helper(piles, dp, suffixSum, 0, 1);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-ii","has_notes":false}