{"id":974250388,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1687113223,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/974250388/","is_pending":"Not Pending","title":"Random Pick with Blacklist","memory":"55.4 MB","code":"class Solution {\n\n    int range;\n    Random r;\n    HashMap<Integer,Integer> map = new HashMap<>();\n    HashSet<Integer> invalid = new HashSet<>();\n    \n    public Solution(int n, int[] blacklist) {\n        range = n - blacklist.length;\n        r = new Random();\n        map = new HashMap<>();\n        invalid = new HashSet<>();\n        \n        for(int val : blacklist){\n            invalid.add(val);\n        }\n        \n        int curr = range;\n        for(int val : blacklist){\n            if(val < range){\n                while(invalid.contains(curr)){\n                    curr++;\n                }\n                map.put(val,curr);\n                curr++;\n            }\n        }\n        \n    }\n    \n    public int pick() {\n        int res = r.nextInt(range);\n        \n        if(map.containsKey(res)){\n            res = map.get(res);\n        }\n        \n        return res;\n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(n, blacklist);\n * int param_1 = obj.pick();\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"random-pick-with-blacklist","has_notes":false}