{"id":978331804,"lang":"java","lang_name":"Java","time":"4 days, 12 hours","timestamp":1687588619,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/978331804/","is_pending":"Not Pending","title":"Last Stone Weight II","memory":"42.6 MB","code":"class Solution {\n    int rec(int[] stones, int cur, int[][] dp, int i, int sum){\n        if(i == stones.length){\n            if(cur<0) return 10000;\n            else return 0;\n        } \n        if(dp[i][cur+sum] != -1){\n            return dp[i][cur+sum];\n        }\n        int add = rec(stones, cur+ stones[i], dp, i+1, sum) + stones[i];\n        int sub = rec(stones, cur - stones[i], dp, i+1, sum) - stones[i];\n\n        dp[i][cur+sum] = Math.min(add, sub);\n        return dp[i][cur+sum];\n    }\n    public int lastStoneWeightII(int[] stones) {\n        int sum = 0;\n        for(int i:stones) sum+=i;\n        int[][] dp = new int[stones.length][2*sum + 1];\n        for(int i=0;i<dp.length;i++) Arrays.fill(dp[i], -1);\n        return rec(stones, 0, dp, 0, sum);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"last-stone-weight-ii","has_notes":false}