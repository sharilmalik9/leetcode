{"id":931397727,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1681145575,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/931397727/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"43.5 MB","code":"class Solution {\n\tpublic int cherryPickup(int[][] arr) {\n\t\tint m = arr.length;\n\t\tint n = arr[0].length;\n        int[][][] dp = new int[m][n][n];\n        \n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\t\tdp[i][j][k] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Math.max(0, cherryPickup(0, 0, n - 1, m, n, arr, dp));\n\t}\n\n\tprivate int cherryPickup(int r1, int c1, int c2, int row, int col, int[][] arr, int[][][] dp) {\n\t\tif (c1 < 0 || c1 >= col || c2 < 0 || c2 >= col) {\n\t\t\treturn Integer.MIN_VALUE;\n\t\t}\n\n\t\tif (r1 == row - 1) {\n\t\t\tif (c1 == c2)\n\t\t\t\treturn arr[r1][c1];\n\t\t\telse\n\t\t\t\treturn arr[r1][c1] + arr[r1][c2];\n\t\t}\n\n\t\tif (dp[r1][c1][c2] != -1)\n\t\t\treturn dp[r1][c1][c2];\n\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor (int dc1 = -1; dc1 <= +1; dc1++) {\n\t\t\tfor (int dc2 = -1; dc2 <= +1; dc2++) {\n\t\t\t\tint val = 0;\n\t\t\t\tif (c1 == c2)\n\t\t\t\t\tval = arr[r1][c1];\n\t\t\t\telse\n\t\t\t\t\tval = arr[r1][c1] + arr[r1][c2];\n\t\t\t\tval += cherryPickup(r1 + 1, dc1 + c1, dc2 + c2, row, col, arr, dp);\n\t\t\t\tmax = Math.max(max, val);\n\t\t\t}\n\t\t}\n\t\tdp[r1][c1][c2] = max;\n\t\treturn max;\n\t}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii","has_notes":false}