{"id":921605899,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1679713548,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/921605899/","is_pending":"Not Pending","title":"Count Unreachable Pairs of Nodes in an Undirected Graph","memory":"126.3 MB","code":"class Solution {\n    public long countPairs(int n, int[][] edges){\n        List<List<Integer>> graph= new ArrayList<>();\n        boolean[] vis= new boolean[n];\n        long ans=0;\n        List<Integer> ls= new ArrayList<>();\n        long sum=0;\n        for(int i=0;i<n;i++){\n           \n            graph.add(new ArrayList<>());\n        }\n       for(int[] arr:edges){\n           graph.get(arr[0]).add(arr[1]);\n           graph.get(arr[1]).add(arr[0]);\n       }\n       for(int i=0;i<n;i++){\n           if(!vis[i]){\n               ls.add(dfs(graph,i,vis));\n               sum+=ls.get(ls.size()-1);\n\n           }\n       }\n      for(int i=0;i<ls.size();i++){\n          sum=sum-ls.get(i);\n          ans=ans+sum*ls.get(i);\n\n      }\n\n\n     return ans;\n        \n    }\n    public int dfs(List<List<Integer>> graph,int i,boolean[] vis){\n        vis[i]=true;\n        int curr=1;\n        for(int j:graph.get(i)){\n            if(!vis[j]){\n                curr+=dfs(graph,j,vis);\n            }\n        }\n        return curr;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-unreachable-pairs-of-nodes-in-an-undirected-graph","has_notes":false}