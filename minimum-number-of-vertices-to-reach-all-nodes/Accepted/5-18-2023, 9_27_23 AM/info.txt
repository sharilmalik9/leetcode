{"id":952458703,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684382243,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/952458703/","is_pending":"Not Pending","title":"Minimum Number of Vertices to Reach All Nodes","memory":"94.6 MB","code":"class Solution {\n    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {\n        List<List<Integer>> ls = new ArrayList<>();\n        for(int i=0; i<n ;i++){\n            ls.add(new ArrayList<>());\n        }\n        int[] indegree=new int[n];\n        for(List<Integer> curr : edges){\n            ls.get(curr.get(0)).add(curr.get(1));\n            indegree[curr.get(1)]++;\n        }\n        boolean[] vis= new boolean[n];\n        List<Integer> ans= new ArrayList<>();\n        Queue<Integer> que= new LinkedList<>();\n        for(int i=0;i<n;i++){\n            if(indegree[i]==0){\n                ans.add(i);\n                que.add(i);\n                vis[i]=true;\n            }\n        }\n       \n        return ans;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-vertices-to-reach-all-nodes","has_notes":false}