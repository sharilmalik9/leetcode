{"id":860485589,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1671164771,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/860485589/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"40 MB","code":"public class MyQueue {\n    private Stack<Integer> stack;\n    private Iterator<Integer> queueIterator;\n    private Integer cached;\n    \n    /** Initialize your data structure here. */\n    public MyQueue() {\n        stack = new Stack<>();\n        queueIterator = null;\n        cached = null;\n    }\n    \n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        stack.push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        if (cached != null) {\n            final int temp = cached;\n            cached = null;\n            return temp;\n        } else if (queueIterator != null) {\n            final int temp = queueIterator.next();\n            if (!queueIterator.hasNext()) {\n                queueIterator = null;\n            }\n            return temp;\n        } else {\n            queueIterator = stack.iterator();\n            stack = new Stack<>();\n            return pop();\n        }        \n    }\n    \n    /** Get the front element. */\n    public int peek() {\n        if (cached != null) {\n            return cached;\n        } else if (queueIterator != null) {\n            cached = pop();\n            return cached;\n        } else {\n            return stack.iterator().next();\n        }\n    }\n    \n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        return cached == null && queueIterator == null && stack.empty();\n    }\n}\n","compare_result":"1111111111111111111111","title_slug":"implement-queue-using-stacks","has_notes":false}