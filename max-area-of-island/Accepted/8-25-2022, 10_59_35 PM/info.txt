{"id":783261633,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1661448575,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/783261633/","is_pending":"Not Pending","title":"Max Area of Island","memory":"47.7 MB","code":"class Solution {\n   public int maxAreaOfIsland(int[][] grid) {\n        \n        int max = 0;\n        \n        for(int i = 0 ; i < grid.length ; i++){\n            for(int j = 0 ; j < grid[0].length ; j++){\n                if(grid[i][j] == 1){\n                    int island = dfs(grid, i, j);\n                    max = Math.max(max, island);\n                }\n            }\n        }\n        \n        return max;\n    }\n    \n    int[][] dir = {{0,1}, {1,0}, {-1,0}, {0,-1}};\n    \n    public int dfs(int[][] grid, int i, int j){\n        \n        if(i < 0 || j < 0 || i == grid.length || j == grid[0].length || grid[i][j] == 0){\n            return 0;\n        }\n        \n        int count = 1;\n        grid[i][j] = 0;\n        for(int k = 0 ; k < dir.length ; k++){\n            count += dfs(grid, i+dir[k][0], j+dir[k][1]);\n        }\n        \n        return count;\n    }\n}","compare_resulttitle_slug":"max-area-of-island","has_notes":false}