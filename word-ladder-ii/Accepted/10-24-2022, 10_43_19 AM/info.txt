{"id":829064733,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666588399,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/829064733/","is_pending":"Not Pending","title":"Word Ladder II","memory":"54.8 MB","code":"class Solution {\n    \n    List<List<String>> ans;\n    \n    public void dfs(String endWord,String beginWord,List<String> path,Map<String,Integer> map){\n        \n        if(endWord.equals(beginWord)){\n            List<String> pathCopy=new ArrayList<>(path);\n            Collections.reverse(pathCopy);\n            ans.add(pathCopy);\n            return;\n        }\n        \n        int steps=map.get(endWord);\n        char arr[]=endWord.toCharArray();\n        for(int i=0;i<arr.length;i++){\n            char og=arr[i];\n            for(char ch='a';ch<='z';ch++){\n                arr[i]=ch;\n                String transition=String.valueOf(arr);\n                if(map.containsKey(transition) && map.get(transition)+1==steps){\n                    path.add(transition);\n                    dfs(transition,beginWord,path,map);\n                    path.remove(path.size()-1);\n                }\n            }\n            arr[i]=og;\n        }\n    }\n    \n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        \n        ans=new ArrayList<>();\n        Set<String> set=new HashSet<>();\n        Set<String> vis=new HashSet<>();\n        for(String a : wordList) set.add(a);\n        Map<String,Integer> map=new HashMap<>();\n        Queue<String> q=new ArrayDeque<>();\n        vis.add(beginWord);\n        q.add(beginWord);\n        map.put(beginWord,0);\n        \n        while(!q.isEmpty()){\n            int n=q.size();\n            for(int i=0;i<n;i++){\n                String temp=q.remove();\n                int steps=map.get(temp);\n                char arr[]=temp.toCharArray();\n                for(int j=0;j<arr.length;j++){\n                    char og=arr[j];\n                    for(char ch='a';ch<='z';ch++){\n                        arr[j]=ch;\n                        String transition=String.valueOf(arr);\n                        if(set.contains(transition) && !vis.contains(transition)){\n                            vis.add(transition);\n                            q.add(transition);\n                            map.put(transition,steps+1);\n                        }\n                    }\n                    arr[j]=og;\n                }\n            }\n        }\n        \n        if(map.containsKey(endWord)){\n            List<String> path=new ArrayList<>();\n            path.add(endWord);\n            dfs(endWord,beginWord,path,map);\n        }\n        \n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"word-ladder-ii","has_notes":false}