{"id":829061503,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666587986,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/829061503/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        List<List<String>> result = new ArrayList<>();\n        \n        Set<String> hs = new HashSet<>();\n        \n        for(String word : wordList){\n            hs.add(word);\n        }\n        \n        Queue<List<String>> queue = new LinkedList<>();\n        List<String> temp = new ArrayList<>();\n        temp.add(beginWord);\n        queue.offer(temp);\n        \n        \n        while(!queue.isEmpty()){\n            int size = queue.size();\n            Set<String> eligibleToRemove = new HashSet<>();\n            \n            for(int i = 0; i < size; i++){\n                List<String> currList = queue.poll();\n                String currWord = currList.get(currList.size() - 1);\n                \n                if(currWord.equals(endWord)){\n                    result.add(new ArrayList<>(currList));\n                }\n                \n                List<String> neighbours = findAllNeighbours(currWord, hs);\n                for(String neighbour : neighbours){\n                    currList.add(neighbour);\n                    queue.offer(new ArrayList<>(currList));\n                    currList.remove(currList.size() - 1);\n                    eligibleToRemove.add(neighbour);\n                }\n            }\n            \n            for(String word : eligibleToRemove){\n                hs.remove(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private List<String> findAllNeighbours(String word, Set<String> hs){\n        \n        char[] wordChar = word.toCharArray();\n        List<String> neighbours = new ArrayList<>();\n        \n        for(int i = 0; i < wordChar.length; i++){\n            char ch = wordChar[i];\n            \n            for(char character = 'a'; character <= 'z'; character++){\n                    wordChar[i] = character;\n                    String eligibleNeighbour = new String(wordChar);\n                    if(hs.contains(eligibleNeighbour) && character != ch)\n                        neighbours.add(eligibleNeighbour);\n            }\n            \n            wordChar[i] = ch;\n        }\n        \n        return neighbours;\n    }\n}\n","compare_result":"111111111111111111111111111111110000","title_slug":"word-ladder-ii","has_notes":false}