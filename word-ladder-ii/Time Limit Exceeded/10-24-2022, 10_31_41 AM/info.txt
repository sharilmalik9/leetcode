{"id":829059302,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666587701,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/829059302/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        var res = new ArrayList<List<String>>();\n                \n        var words = new HashSet<>(wordList);\n        if (!words.contains(endWord)) {\n            return res;\n        }\n        \n        var queue = new ArrayDeque<List<String>>();\n        queue.push(Arrays.asList(beginWord));\n        \n        var usedInPreviousLevels = new HashSet<String>();\n        usedInPreviousLevels.add(beginWord);\n        \n        var lastLevel = false;\n        while (!queue.isEmpty() && !lastLevel) {\n            var levelSize = queue.size();\n            \n            var usedInCurrentLevel = new HashSet<String>();\n            for (int lvl = 0; lvl < levelSize; lvl++) {\n                var path = queue.poll();\n                var node = path.get(path.size() - 1);\n                \n                if (node.equals(endWord)) {\n                    res.add(path);\n                    lastLevel = true;\n                }\n                \n                if (!lastLevel) {\n                    var chars = node.toCharArray();\n                    for (int i = 0; i < chars.length; i++) {\n                        var oldChar = chars[i];\n                        for (char l = 'a'; l <= 'z'; l++) {\n                            chars[i] = l;\n                            var str = new String(chars);\n                            if (words.contains(str) && !usedInPreviousLevels.contains(str)) {\n                                var newPath = new ArrayList(path);\n                                newPath.add(str);\n                                queue.add(newPath);\n                                usedInCurrentLevel.add(str);\n                            }\n                        }\n                        chars[i] = oldChar;\n                    }\n                }\n            }\n            usedInPreviousLevels.addAll(usedInCurrentLevel);\n        }\n        \n        return res;\n    }\n}","compare_result":"111111111111111111111111111111110000","title_slug":"word-ladder-ii","has_notes":false}