{"id":958867658,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685262347,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/958867658/","is_pending":"Not Pending","title":"Maximum Strictly Increasing Cells in a Matrix","memory":"97.6 MB","code":"class Solution {\n\n    public int maxIncreasingCells(int[][] mat) {\n        int m=mat.length;\n        int n=mat[0].length;\n        TreeMap<Integer,List<int[]>> tm=new TreeMap<>();\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                int val=mat[i][j];\n                if(tm.containsKey(val)){\n                    tm.get(val).add(new int[] {i,j});\n                }\n                else{\n                    List<int[]> ls=new ArrayList<>();\n                    ls.add(new int[] {i,j});\n                    tm.put(val,ls);\n                }\n            }\n        }\n        int[][] dp=new int[m][n];\n        int[] row=new int[m];\n        int[] col=new int[n];\n        for(int val:tm.keySet()){\n            for(int[] arr:tm.get(val)){\n                int x=arr[0];\n                int y=arr[1];\n                dp[x][y]=Math.max(row[x],col[y])+1;\n            }\n            for(int[] arr:tm.get(val)){\n                int x=arr[0];\n                int y=arr[1];\n                row[x]=Math.max(row[x],dp[x][y]);\n                col[y]=Math.max(col[y],dp[x][y]);\n            }\n        }\n        int ans=0;\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                ans=Math.max(ans,dp[i][j]);\n            }\n        }\n        return ans;\n    }\n}","compare_resulttitle_slug":"maximum-strictly-increasing-cells-in-a-matrix","has_notes":false}