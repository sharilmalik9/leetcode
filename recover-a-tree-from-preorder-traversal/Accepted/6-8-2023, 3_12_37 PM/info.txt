{"id":966520038,"lang":"java","lang_name":"Java","time":"2 weeks, 6 days","timestamp":1686217357,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/966520038/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"43.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int i=0;\n    public TreeNode recoverFromPreorder(String traversal) {\n        return preorder(traversal,0);\n    }\n    public TreeNode preorder(String traverse,int c){\n        if(i==traverse.length()){\n            return null;\n        }\n        int j=i;\n        while(i<traverse.length() && traverse.charAt(i)!='-'){\n            i++;\n        }\n        TreeNode root=new TreeNode(Integer.parseInt(traverse.substring(j,i)));\n        int co=0;\n        j=i;\n        while(i<traverse.length() && traverse.charAt(i)=='-'){\n            i++;\n            co++;\n        }\n        if(co==c+1){\n            root.left=preorder(traverse,c+1);\n        }else{\n            i=j;\n        }\n        co=0;\n        j=i;\n        while(i<traverse.length() && traverse.charAt(i)=='-'){\n            i++;\n            co++;\n        }\n        if(co==c+1){\n            root.right=preorder(traverse,c+1);\n        }else{\n            i=j;\n        }\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal","has_notes":false}