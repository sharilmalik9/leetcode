{"id":881693875,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674200577,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/881693875/","is_pending":"Not Pending","title":"Difference Between Maximum and Minimum Price Sum","memory":"82.9 MB","code":"class Solution {\n    long res = 0;\n    List<Integer>[] g;\n    int[] price;\n\n    record returnType(int withLeaf, int withoutLeaf) {}\n    public long maxOutput(int n, int[][] edges, int[] price) {\n        this.price = price;\n        \n        // create adjacency list graph(tree)\n        g = new List[n];\n        for (int i = 0; i < n; i++) g[i] = new ArrayList<>();\n        for (var e : edges) {\n            g[e[0]].add(e[1]);\n            g[e[1]].add(e[0]);\n        }\n\n        dfs(n > 2 ? 2 : 0, -1);\n        return res;\n    }\n\n    private returnType dfs(int cur, int pre) {\n        int withLeaf = price[cur], withoutLeaf = 0;\n        for (int child : g[cur]) if (child != pre) {\n            var childMax = dfs(child, cur);\n            res = Math.max(res, withLeaf + childMax.withoutLeaf);\n            res = Math.max(res, withoutLeaf + childMax.withLeaf);\n            withLeaf = Math.max(withLeaf, childMax.withLeaf + price[cur]);\n            withoutLeaf = Math.max(withoutLeaf, childMax.withoutLeaf + price[cur]);\n        }\n\n        return new returnType(withLeaf, withoutLeaf); // single leg\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"difference-between-maximum-and-minimum-price-sum","has_notes":false}