{"id":881693172,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674200468,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/881693172/","is_pending":"Not Pending","title":"Difference Between Maximum and Minimum Price Sum","memory":"N/A","code":"class Solution {\n    public long maxOutput(int n, int[][] edges, int[] price) {\n        Map<Integer, Long>[] adjList = new Map[n];\n        for (int i = 0; i < n; i++) {\n            adjList[i] = new HashMap<>();\n        }\n        for (int[] edge : edges) {\n            adjList[edge[0]].put(edge[1], 0L);\n            adjList[edge[1]].put(edge[0], 0L);\n        }\n        // Above we simply construct the adjacency list for the given tree.\n        long res = 0;\n        // Below, we dfs every node of our tree,\n        // but every iteration won't be O(n),\n        // because we use information from previous dfs iteration\n        // to compute edge values.\n        for (int i = 0; i < n; i++) {\n            res = Math.max(res, dfs(adjList, price, i, -1) - price[i]);\n        }\n        return res;\n    }\n    \n    private long dfs(Map<Integer, Long>[] tree, int[] price, int cur, int parent) {\n        long maxPath = 0;\n        for (int child : tree[cur].keySet()) {\n            if (child != parent) {\n                // get the weight of edge from node cur to node child.\n                long temp = tree[cur].get(child);\n\n                // if the weight of the edge is not already computed,\n                // then we compute by calling dfs for this\n                // adjacent or child node.\n                if (temp == 0) {\n                    temp = dfs(tree, price, child, cur);\n                    tree[cur].put(child, temp);\n                }\n                // maxPath starting from node cur is updated.\n                maxPath = Math.max(maxPath, temp);\n            }\n        }\n        // cost of including current path in previous\n        // stack call is returned.\n        return maxPath + price[cur];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111110000","title_slug":"difference-between-maximum-and-minimum-price-sum","has_notes":false}