{"id":881692761,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674200409,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/881692761/","is_pending":"Not Pending","title":"Difference Between Maximum and Minimum Price Sum","memory":"N/A","code":"class Solution {\n    public long maxOutput(int n, int[][] edges, int[] price) {\n        List<List<Integer>> adj = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adj.add(new ArrayList());\n        }\n        for (int[] e : edges) {\n            adj.get(e[0]).add(e[1]);\n            adj.get(e[1]).add(e[0]);\n        }\n        long res = 0;\n       Map<String,Long> dp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            res = Math.max(res, dfs(i,-1,adj,dp,price) - price[i]);\n        }\n        return res;\n    }\n    \n    private long dfs(int curr,int prev,List<List<Integer>> adj,Map<String,Long> dp,int[] prices) {\n        long max = 0;\n        for(int child:adj.get(curr)){\n            String x = curr+\"-\"+child;\n            if(child!=prev){\n                if(dp.get(x)==null){\n                    dp.put(x,dfs(child,curr,adj,dp,prices));\n                }\n                max=Math.max(max,dp.get(x));\n            }\n        }\n        return max+prices[curr];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111110000","title_slug":"difference-between-maximum-and-minimum-price-sum","has_notes":false}