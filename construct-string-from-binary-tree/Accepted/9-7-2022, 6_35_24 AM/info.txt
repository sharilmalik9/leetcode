{"id":793454874,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1662512724,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/793454874/","is_pending":"Not Pending","title":"Construct String from Binary Tree","memory":"54.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public String tree2str(TreeNode root) {\n        if (root == null) {\n            return \"\";\n        } \n        \n        String ans = String.valueOf(root.val);\n        String left = tree2str(root.left);\n        String right = tree2str(root.right);\n        \n        if (!left.equals(\"\") || !right.equals(\"\")) {\n            left = \"(\" + left + \")\";\n        }\n        \n        if (!right.equals(\"\")) {\n            right = \"(\" + right + \")\";\n        }\n        \n        ans = ans + left + right;\n        \n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-string-from-binary-tree","has_notes":false}