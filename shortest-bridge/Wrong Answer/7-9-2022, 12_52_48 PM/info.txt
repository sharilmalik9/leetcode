{"id":742340558,"lang":"java","lang_name":"Java","time":"11 months, 3 weeks","timestamp":1657351368,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/742340558/","is_pending":"Not Pending","title":"Shortest Bridge","memory":"N/A","code":"class Solution {\n    class pair{\n        int row;\n        int col;\n        pair(int x,int y){\n            this.row=x;\n            this.col=y;\n            \n        }\n    }\n    public int shortestBridge(int[][] grid) {\n        boolean[][] visited= new boolean[grid.length][grid[0].length];\n        LinkedList<pair> que= new LinkedList<>();\n        boolean flag=true;\n        for(int i=0;i<grid.length;i++){\n            for(int j=0;i<grid[0].length;i++){\n                 if(grid[i][j]==1 && flag){\n                     flag=false;\n                     dfs(grid,visited,i,j,que);\n}  \n            }\n        }\n        int level=0;\n        while(que.size()!=0){\n            int size=que.size();\n            while(size-->0){\n                pair curr= que.removeFirst();\n                int x=curr.row;\n                int y=curr.col;\n                \n        if(x>0 && !visited[x-1][y]){\n            if(grid[x-1][y]==1){\n                return level;\n            }\n            else{\n                que.addLast(new pair(x-1,y));\n            }\n        }\n        if(y>0  && !visited[x][y-1]){\n            if(grid[x][y-1]==1){\n                return level;\n            }\n            else{\n                que.addLast(new pair(x-1,y));\n            }\n        }\n        if(x<grid.length-1  && !visited[x+1][y]){\n            if(grid[x+1][y]==1){\n                return level;\n            }\n            else{\n                que.addLast(new pair(x-1,y));\n            }\n        }\n        if(y<grid[0].length-1 && !visited[x][y+1]){\n            if(grid[x][y+1]==1){\n                return level;\n            }\n            else{\n                que.addLast(new pair(x-1,y));\n            }\n           \n        }        \n            }\n            level++;        \n}\n        return -1;  \n    }\n    public void dfs(int[][] grid,boolean[][] visited, int x,int y,LinkedList<pair> que){\n        visited[x][y]=true;\n        que.addLast(new pair(x,y));\n        \n        if(x>0 && grid[x-1][y]==1 && !visited[x-1][y]){\n            dfs(grid,visited,x-1,y,que);\n        }\n        if(y>0 && grid[x][y-1]==1 && !visited[x][y-1]){\n            dfs(grid,visited,x,y-1,que);\n        }\n        if(x<grid.length-1 && grid[x+1][y]==1 && !visited[x+1][y]){\n            dfs(grid,visited,x+1,y,que);\n        }\n        if(y<grid[0].length-1 && grid[x][y+1]==1 && !visited[x][y+1]){\n            dfs(grid,visited,x,y+1,que);\n        }\n        \n        \n        \n    }\n}","compare_result":"1010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"shortest-bridge","has_notes":false}