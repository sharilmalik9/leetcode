{"id":954317034,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684647410,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/954317034/","is_pending":"Not Pending","title":"Shortest Bridge","memory":"44.1 MB","code":"class Pair{\n    int row;\n    int col;\n    Pair(int row,int col){\n        this.row=row;\n        this.col=col;\n    }\n\n}\n\nclass Solution {\n    public int shortestBridge(int[][] grid) {\n        int n=grid.length;\n        int m=grid[0].length;\n        int visit[][]=new int[n][m];\n        Queue<Pair>q=new LinkedList<>();\n\n        int delRow[]={1,-1,0,0};\n        int delCol[]={0,0,1,-1};\n\n        boolean flag=false;\n        \n        for(int i=0;i<n && !flag;i++){\n            for(int j=0;j<m && !flag;j++){\n                if(visit[i][j]==0 && grid[i][j]==1){\n                    dfs(i,j,grid,visit,q,delRow,delCol);\n                    flag=true;\n                }\n            }\n        }\n    \n\n        int count=0;\n        while(!q.isEmpty()){\n            int size=q.size();\n            while(size-->0){\n                Pair pr=q.poll();\n                int row=pr.row;\n                int col=pr.col;\n                visit[row][col]=1;\n\n                for(int i=0;i<4;i++){\n                    int nrow=row+delRow[i];\n                    int ncol=col+delCol[i];\n\n                    if(nrow<n && nrow>=0 && ncol<m && ncol>=0 && visit[nrow][ncol]==0){  \n                        q.add(new Pair(nrow,ncol));\n                        visit[nrow][ncol]=1;\n                        if(grid[nrow][ncol]==1){\n                            return count;\n                        }\n                    }    \n                }\n\n            }\n            count++;\n            \n        }\n        return -1;\n\n\n    }\n\n    public static void dfs(int row,int col,int [][]grid,int visit[][],Queue<Pair>q,int delRow[],int delCol[]){\n        int n=grid.length;\n        int m=grid[0].length;\n        q.add(new Pair(row,col));\n        visit[row][col]=1;\n\n        for(int i=0;i<4;i++){\n            int nrow=row+delRow[i];\n            int ncol=col+delCol[i];\n\n            if(nrow<n && nrow>=0 && ncol<m && ncol>=0 && visit[nrow][ncol]==0 && grid[nrow][ncol]==1){  \n                dfs(nrow,ncol,grid,visit,q,delRow,delCol);\n            }\n\n            \n        }\n        \n    }\n\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-bridge","has_notes":false}