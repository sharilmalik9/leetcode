{"id":960906119,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1685533328,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/960906119/","is_pending":"Not Pending","title":"Longest Happy String","memory":"40.2 MB","code":"class Solution {\n  public String longestDiverseString(int a, int b, int c) {\n            StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\"x\");\n        PriorityQueue<Pair<String, Integer>> priorityQueue = new PriorityQueue<>((el1, el2) -> el2.getValue() - el1.getValue());\n\n        if (a > 0) {\n            priorityQueue.add(new Pair<>(\"a\", a));\n        }\n\n        if (b > 0) {\n            priorityQueue.add(new Pair<>(\"b\", b));\n        }\n\n        if (c > 0) {\n            priorityQueue.add(new Pair<>(\"c\", c));\n        }\n\n        while (!priorityQueue.isEmpty()) {\n\n            if (priorityQueue.size() == 1 && priorityQueue.peek().getKey().charAt(0) == stringBuilder.charAt(stringBuilder.length() - 1)) {\n                break;\n            }\n\n            if (priorityQueue.peek().getKey().charAt(0) != stringBuilder.charAt(stringBuilder.length() - 1)) {\n                Pair<String, Integer> pair = priorityQueue.poll();\n                int repeatFactor = pair.getValue() >= 2 ? 2 : 1;\n                for (int i=0;i<repeatFactor;i++){\n                    stringBuilder.append(pair.getKey());\n                }\n                if (pair.getValue() - repeatFactor > 0) {\n                    priorityQueue.add(new Pair<>(pair.getKey(), pair.getValue() - repeatFactor));\n                }\n            } else {\n                Pair<String, Integer> pairOne = priorityQueue.poll();\n                Pair<String, Integer> pairTwo = priorityQueue.poll();\n\n                Double checkFactor = Double.valueOf(pairOne.getValue()) / Double.valueOf(pairTwo.getValue());\n                int repeatFactor = checkFactor > 1.0 ? 1 : 2;\n\n                priorityQueue.add(pairOne);\n                if (pairTwo.getValue() - repeatFactor > 0) {\n                    priorityQueue.add(new Pair<>(pairTwo.getKey(), pairTwo.getValue() - repeatFactor));\n                }\n                for (int i=0;i<repeatFactor;i++){\n                    stringBuilder.append(pairTwo.getKey());\n                }\n            }\n        }\n\n        stringBuilder.replace(0, 1, \"\");\n        return stringBuilder.toString();\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"longest-happy-string","has_notes":false}