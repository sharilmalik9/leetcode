{"id":920256527,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1679505911,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/920256527/","is_pending":"Not Pending","title":"Stamping The Sequence","memory":"43.2 MB","code":"class Solution {\n    //eg :- stamp='abc', target='ababc' -> target='*****'\n    //start iterating over target if target has stamp or not\n    //if it contains stamp, then replace all characters corresponding to stamp with *\n    //also while comparing target with stamp,\n    //* can be substituted with any character because this will be overwritten\n    \n    //step 1:- target = 'ababc'\n    //step 2:- target = 'ab***'(abc has been replaced with stars)\n    //step 3:- target = '*****'(ab* can make abc by substituting * with c, therefore replace it with star)\n    \n    //this is the approach we would be following\n    //carefully read the code to better understand the approach\n    public int[] movesToStamp(String stamp, String target) {\n        //reverse engineering should be used\n        //start from T and convert it to all stars\n        //if it is not possible, then return empty array\n\n        char S[]=stamp.toCharArray();\n        char T[]=target.toCharArray();\n        ArrayList<Integer> arr=new ArrayList<>();\n        //checking if we have already checked this index\n        boolean visited[]=new boolean[T.length-S.length+1];\n        //checks if there is a change in T in this iteration\n        boolean change=true;\n        //stores number of stars\n        int stars=0;\n        \n        while(stars<T.length){\n            //initially keep it false\n            change=false;\n            \n            for(int i=0;i<=T.length-S.length;i++){\n                //if we have not checked index i and from this index T follows the pattern of S\n                //then convert it to stars\n                //and add this index to arr\n                if(!visited[i] && check(S,T,i)){\n                    stars+=replace(S,T,i);\n                    change=true;\n                    visited[i]=true;\n                    arr.add(i);\n                }\n            }\n            \n            //if we were not able to find any position for change\n            //then return empty array\n            if(change==false){\n                return new int[0];\n            }\n        }\n        \n        int ans[]=new int[arr.size()];\n        for(int i=0;i<ans.length;i++){\n            ans[i]=arr.get(arr.size()-i-1);\n        }\n        \n        return ans;\n    }\n\n    //checking if this substring follows the pattern of S \n    private boolean check(char S[],char T[],int ind){\n        for(int i=0;i<S.length;i++){\n            if(T[i+ind]!='*' && S[i]!=T[i+ind]){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    //replacing characters with stars\n    private int  replace(char S[],char T[],int ind){\n        int count=0;\n        for(int i=0;i<S.length;i++){\n            if(T[i+ind]!='*'){\n                count++;\n                T[i+ind]='*';\n            }\n        }\n        return count;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stamping-the-sequence","has_notes":false}