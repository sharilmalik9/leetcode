{"id":727360050,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1655790397,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/727360050/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Postorder Traversal","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {\n        return construct(preorder,postorder,0,preorder.length-1,0,postorder.length-1);\n        \n        \n        \n    }\n    public TreeNode construct(int[] preorder,int[] postorder,int prestart,int preend,int poststart,int postend){\n        if(prestart>preend){\n            return null;\n        }\n         TreeNode root= new TreeNode(preorder[prestart]);\n        if(prestart==preend){\n            return root;\n        }\n        int postindex=poststart;\n        while(postorder[postindex]!=preorder[prestart+1]){\n            postindex++;\n        }\n        int len=postindex-poststart+1;\n        root.left=construct(preorder,postorder,prestart+1,prestart+len,poststart,postindex);\n            root.right=construct(preorder,postorder,prestart+len+1,preend,postindex+1,postend-1);\n        return root;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-postorder-traversal","has_notes":false}