{"id":863269275,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1671633678,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/863269275/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"48.9 MB","code":"class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        Map<Integer,Map<Integer,Integer>> map = new HashMap<>();\n        for(int[] f : flights){\n            map.computeIfAbsent(f[0],m->new HashMap<>()).put(f[1],f[2]);\n        }\n        k++;\n        int min = Integer.MAX_VALUE; \n        int[] count = new int[n];\n        count[src]++; \n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(new int[]{src,0});\n        while(!queue.isEmpty()){\n            int size = queue.size();\n            if(k--==0) break;\n            while(size-->0){\n                int[] cur = queue.poll();\n                Map<Integer,Integer> next = map.getOrDefault(cur[0],null);\n                if(next==null) continue;\n                for(Map.Entry<Integer,Integer> entry : next.entrySet()){\n                    if(cur[1] + entry.getValue() >= min) continue;\n                    if(entry.getKey()==dst){\n                        min = Math.min(min,cur[1] + entry.getValue());\n                        continue;\n                    } \n                    if(count[entry.getKey()]++<=n){\n                        queue.add(new int[]{entry.getKey(),cur[1] + entry.getValue()});    \n                    }       \n                }\n            }\n        }\n        return min == Integer.MAX_VALUE ? -1 : min;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"cheapest-flights-within-k-stops","has_notes":false}