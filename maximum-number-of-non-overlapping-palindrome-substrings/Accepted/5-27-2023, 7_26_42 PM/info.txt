{"id":958277408,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685195802,"status":10,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/958277408/","is_pending":"Not Pending","title":"Maximum Number of Non-overlapping Palindrome Substrings","memory":"40.7 MB","code":"class Solution {\n    Integer[] dp;\n    public int maxPalindromes(String s, int k) {\n\n        Set<Character> set = new HashSet<>();\n        for(char c : s.toCharArray()) set.add(c);\n        if(set.size() == 1) return s.length()/k;\n\n        dp = new Integer[s.length()];\n        return helper(s, 0, k);   \n    }\n    public int helper(String s, int index, int k) {\n        if(index == s.length()) return 0;\n        if(dp[index] != null) return dp[index];\n\n        int max = 0;\n        for(int i=index+k; i<=s.length(); i++) {\n            if(isPalindrome(s, index, i-1)) {\n                max = Math.max(max, helper(s, i, k)+1);\n            }\n        }\n        return dp[index] = Math.max(max, helper(s, index+1, k));\n    }\n    public boolean isPalindrome(String s, int start, int end) {\n\n        while(start<end) {\n            if(s.charAt(start++) != s.charAt(end--)) return false;\n        }\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-non-overlapping-palindrome-substrings","has_notes":false}