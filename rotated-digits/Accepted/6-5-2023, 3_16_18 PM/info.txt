{"id":964275469,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1685958378,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/964275469/","is_pending":"Not Pending","title":"Rotated Digits","memory":"39.7 MB","code":"class Solution {\n    String s;\n    Integer[][][] dp;\n    public int rotatedDigits(int n) {\n        s = Integer.toString(n);\n        dp = new Integer[s.length()][2][s.length()];\n        return f(0,true,0);\n    }\n\n    public int f(int i, boolean bound, int cnt){\n\n        if(i == s.length()) {\n            return cnt > 0 ? 1 : 0;\n        }\n        if(dp[i][bound ? 1:0][cnt] != null) return dp[i][bound ? 1:0][cnt];\n\n        int maxDig = 9;\n\n        if(bound){\n            maxDig = s.charAt(i) - '0';\n        }\n        int ans = 0;\n        for(int j = 0; j<=maxDig; j++){\n            int add = 0;\n            if(j == 3 || j == 7 || j == 4) continue;\n            if(j == 2 || j ==5 || j == 6 || j == 9 ) {\n                add = 1;\n            }\n            ans += f(i+1, bound && j == s.charAt(i) - '0', cnt + add);\n            \n        }\n\n        // return ans;\n        return dp[i][bound ? 1:0][cnt]=ans ;\n\n        \n    }\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"rotated-digits","has_notes":false}