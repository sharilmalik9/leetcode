{"id":831791757,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1666926338,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/831791757/","is_pending":"Not Pending","title":"Sum of Subarray Ranges","memory":"N/A","code":" public static long subArrayRanges(int[] nums) {\n\n        long[] minLeft = subArrayMaxMinLeft(nums, true);\n        long[] minRight = subArrayMaxMinRight(nums, true);\n        long[] maxLeft = subArrayMaxMinLeft(nums, false);\n        long[] maxRight = subArrayMaxMinRight(nums, false);\n\n        long res = 0;\n        for (int i = 0; i < nums.length; i++) {\n            res += ((maxLeft[i] * maxRight[i]) - (minLeft[i] * minRight[i])) * nums[i];\n        }\n        return res;\n    }\n\n    static long[] subArrayMaxMinRight(int[] nums, boolean lesser) {\n        long[] arr = new long[nums.length];\n        Deque<Pair> st = new ArrayDeque<>();\n        Predicate<Integer> predicate = lesser ? num -> num <= st.peek().num : num -> num >= st.peek().num;\n        for (int i = nums.length - 1; i >= 0; i--) {\n            long count = 1;\n            while (!st.isEmpty() && predicate.test(nums[i])) {\n                count += st.pop().count;\n            }\n            st.push(new Pair(nums[i], count));\n            arr[i] = count;\n        }\n        st.clear();\n        return arr;\n    }\n\n    static long[] subArrayMaxMinLeft(int[] nums, boolean lesser) {\n        long[] arr = new long[nums.length];\n        Deque<Pair> st = new ArrayDeque<>();\n        Predicate<Integer> predicate = lesser ? num -> num < st.peek().num : num -> num > st.peek().num;\n        for (int i = 0; i < nums.length; i++) {\n            long count = 1;\n            while (!st.isEmpty() && predicate.test(nums[i])) {\n                count += st.pop().count;\n            }\n            st.push(new Pair(nums[i], count));\n            arr[i] = count;\n        }\n        st.clear();\n        return arr;\n    }\n\n    static class Pair {\n        long num, count;\n\n        public Pair(long num, long count) {\n            this.num = num;\n            this.count = count;\n        }\n    }","compare_result":null,"title_slug":"sum-of-subarray-ranges","has_notes":false}