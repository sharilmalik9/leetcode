{"id":831843759,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1666932882,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/831843759/","is_pending":"Not Pending","title":"Sum of Subarray Ranges","memory":"46.2 MB","code":"class Solution {\n    public long subArrayRanges(int[] nums) {\n\tint n = nums.length;\n\tlong sum = 0;\n\tDeque<Integer> q = new ArrayDeque<>(); // store index\n\n\tq.add(-1);\n\tfor (int i = 0; i <= n; i++) {\n\t\twhile (q.peekLast() != -1 && (i == n || nums[q.peekLast()] <= nums[i])) {\n\t\t\tint cur = q.removeLast();\n\t\t\tint left = q.peekLast();\n\t\t\tint right = i;\n\t\t\tsum += 1L * (cur - left) * (right - cur) * nums[cur];\n\t\t}\n\t\tq.add(i);\n\t}\n\n\tq.clear();\n\tq.add(-1);\n\tfor (int i = 0; i <= n; i++) {\n\t\twhile (q.peekLast() != -1 && (i == n || nums[q.peekLast()] >= nums[i])) {\n\t\t\tint cur = q.removeLast();\n\t\t\tint left = q.peekLast();\n\t\t\tint right = i;\n\t\t\tsum -= 1L * (cur - left) * (right - cur) * nums[cur];\n\t\t}\n\t\tq.add(i);\n\t}\n\treturn sum;\n}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-ranges","has_notes":false}