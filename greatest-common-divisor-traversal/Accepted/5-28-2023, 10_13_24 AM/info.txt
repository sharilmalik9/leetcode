{"id":958765058,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685249004,"status":10,"status_display":"Accepted","runtime":"519 ms","url":"/submissions/detail/958765058/","is_pending":"Not Pending","title":"Greatest Common Divisor Traversal","memory":"61 MB","code":"class DisjointSet {\n    List<Integer> rank = new ArrayList<>();\n    List<Integer> parent = new ArrayList<>();\n    public DisjointSet(int n) {\n        for (int i = 0; i < n; i++) {\n            rank.add(0);\n            parent.add(i);\n        }\n    }\n\n    public int findUPar(int node) {\n        if (node == parent.get(node)) {\n            return node;\n        }\n        int ulp = findUPar(parent.get(node));\n        parent.set(node, ulp);\n        return parent.get(node);\n    }\n\n    public void unionByRank(int u, int v) {\n        int ulp_u = findUPar(u);\n        int ulp_v = findUPar(v);\n        if (ulp_u == ulp_v) return;\n        if (rank.get(ulp_u) < rank.get(ulp_v)) {\n            parent.set(ulp_u, ulp_v);\n        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {\n            parent.set(ulp_v, ulp_u);\n        } else {\n            parent.set(ulp_v, ulp_u);\n            int rankU = rank.get(ulp_u);\n            rank.set(ulp_u, rankU + 1);\n        }\n    }\n\n}\n\nclass Solution {\n    ArrayList<Integer> primes;\n    public void primeFactors(int n)\n    {\n        HashSet<Integer> hs = new HashSet<>();\n        while (n%2==0)\n        {\n            hs.add(2);\n            n /= 2;\n        }\n \n        for (int i = 3; i <= Math.sqrt(n); i+= 2){\n            while (n%i == 0){\n                hs.add(i);\n                n /= i;\n            }\n        }\n \n        if (n > 2)\n            hs.add(n);\n        \n        primes = new ArrayList<>(hs);\n        \n    }\n \n    public boolean canTraverseAllPairs(int[] nums) {\n        HashMap<Integer, Integer> hs = new HashMap<>();\n        DisjointSet ds = new DisjointSet(nums.length);\n        \n        for(int i=0; i< nums.length; i++){\n            boolean flag = true;\n            primeFactors(nums[i]); \n            \n            for(int j = 0; j< primes.size();j++){\n                if(!hs.containsKey(primes.get(j))){\n                    hs.put(primes.get(j),i);\n                }else{\n                     ds.unionByRank(i,hs.get(primes.get(j)));\n                }\n            }\n            \n        }\n        int cnt = 0;\n        for(int i = 0; i< nums.length; i++){\n            if(ds.findUPar(i) == i){\n                cnt++;\n            }\n        }\n        return cnt==1;\n        \n    }\n    \n    public int gcd(int a, int b){\n        int i;\n        if (a < b)\n            i = a;\n        else\n            i = b;\n \n        for (i = i; i > 1; i--) {\n \n            if (a % i == 0 && b % i == 0)\n                return i;\n        }\n \n        return 1;\n    }\n    \n    \n    \n}","compare_resulttitle_slug":"greatest-common-divisor-traversal","has_notes":false}