{"id":878630500,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1673792052,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/878630500/","is_pending":"Not Pending","title":"Number of Good Paths","memory":"N/A","code":"class Solution {\n    int good=0;\n    public int numberOfGoodPaths(int[] vals, int[][] edges) {\n        List<List<Integer>> ls= new ArrayList<>();\n        for(int i=0;i<vals.length;i++){\n            ls.add(new ArrayList<>());\n        }\n        for(int i=0;i<edges.length;i++){\n            ls.get(edges[i][0]).add(edges[i][1]);\n            ls.get(edges[i][1]).add(edges[i][0]);\n        }\n       \n        for(int i=0;i<vals.length;i++){\n             boolean[] visited=new boolean[vals.length];\n             dfs(ls,vals,i,i,visited);\n\n        }\n        return good/2 + vals.length;\n        \n    }\n    public void dfs(List<List<Integer>> ls, int[] vals,int start,int curr,boolean[] visited){\n        if(curr!=start && vals[start]==vals[curr]){\n            good++;\n\n        }\n        visited[curr]=true;\n        for(int i: ls.get(curr)){\n            if(!visited[i] && vals[i] <=vals[start]){\n                dfs(ls,vals,start,i,visited);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000","title_slug":"number-of-good-paths","has_notes":false}