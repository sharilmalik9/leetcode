{"id":909361809,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1677995569,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/909361809/","is_pending":"Not Pending","title":"Jump Game IV","memory":"54.7 MB","code":"// class Solution {\n//     public int minJumps(int[] arr){\n//         HashMap<Integer,List<Integer>> hm= new HashMap<>();\n//         for(int i=0;i<arr.length;i++){\n//             if(hm.containsKey(arr[i])){\n//                 hm.get(arr[i]).add(i);\n//             }\n//            else{\n//                List<Integer> ls= new ArrayList<>();\n//                ls.add(i);\n//                hm.put(arr[i],ls);\n//            }\n//         }\n//         List<List<Integer>> graph= new ArrayList<>();\n//         for(int i=0;i<arr.length;i++){\n//             List<Integer> adj= new ArrayList<>();\n//             List<Integer> curr= hm.get(arr[i]);\n//             for(int j=0;j<curr.size();j++){\n//                   if(curr.get(j)!=i-1 && curr.get(j)!=i+1 && curr.get(j)!=i){\n//                       adj.add(curr.get(j));\n//                   }\n\n//             }\n//             if(i!=0){\n//                 adj.add(i-1);\n//             }\n//             if(i!=arr.length-1){\n//                 adj.add(i+1);\n//             }\n           \n//             graph.add(adj);\n//         } \n//         Queue<Integer> que= new LinkedList<>();\n//         que.add(0);\n//         int ans=0;\n//         boolean[] vis= new boolean[arr.length];\n//         vis[0]=true;\n//         while(que.size()!=0){\n//             int size=que.size();\n//             ans++;\n//             while(size!=0){\n//                 int curr=que.poll();\n//                 for(int i: graph.get(curr)){\n//                     if(i==arr.length-1){\n//                         return ans;\n//                     }\n//                     if(!vis[i]){\n//                         que.add(i);\n//                         vis[i]=true;\n//                     }\n//                 }\n//                 size--;\n//             }\n\n//         }\n\n//         return 0;       \n//     }\n// }\n\n\n\nclass Solution {\n    public int minJumps(int[] arr) {\n        int steps=0;\n        int  n=arr.length;\n        HashMap<Integer,List<Integer>> hm=new HashMap<>();\n        for(int i=0;i<arr.length;i++){\n            if(!hm.containsKey(arr[i])){\n                List<Integer> temp =new ArrayList<>();\n                temp.add(i);\n                hm.put(arr[i],temp);\n            }\n            else{\n                List<Integer> temp=hm.get(arr[i]);\n                temp.add(i);\n                hm.put(arr[i],temp);\n            }\n        }\n        boolean vis[]=new boolean[n];\n        vis[0]=true;\n        Queue<Integer> qu=new LinkedList<>();\n        qu.add(0);\n        while(!qu.isEmpty()){\n            int size=qu.size();\n            for(int i=0;i<size;i++){\n                int curridx=qu.poll();\n                if(curridx==n-1)\n                    return steps;\n                List<Integer> jumptoindexes=hm.get(arr[curridx]);\n                jumptoindexes.add(curridx+1);\n                jumptoindexes.add(curridx-1);\n                for(int q:jumptoindexes){\n                    if(q>=0 && q<n && !vis[q]){\n                        vis[q]=true;\n                        qu.add(q);\n                    }\n                }\n                jumptoindexes.clear();\n            }\n            steps++;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"jump-game-iv","has_notes":false}