{"id":784358566,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1661565296,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/784358566/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"54.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n// brute force \nclass Solution {\n    public int deepestLeavesSum(TreeNode root) {\n        int h = height(root);\n        \n        return currLevelSum(root, h);\n    }\n    \n    private int height(TreeNode root){\n        if(root==null)\n            return 0;\n        \n        return Math.max(height(root.left), height(root.right))+1;\n    }\n    \n    int sum = 0;\n    \n    private int currLevelSum(TreeNode root, int level){\n        if(root==null)\n            return 0;\n        \n        if(level==1)\n            sum+=root.val;\n        else if(level>1){\n            currLevelSum(root.left, level-1);\n            currLevelSum(root.right, level-1);\n        }\n        \n        return sum;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"deepest-leaves-sum","has_notes":false}