{"id":977674203,"lang":"java","lang_name":"Java","time":"5 days, 11 hours","timestamp":1687505832,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/977674203/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"64.7 MB","code":"class Solution {\n    public int minimumTime(int n, int[][] relations, int[] time) {\n        List<List<Integer>> adj = new ArrayList<>();\n        int[] maxTime = new int[n];\n        int[] indegree = new int[n];\n        \n        for(int i=0;i<n;i++){\n            adj.add(new ArrayList<>());\n        }\n        for(int[] rel: relations){\n            adj.get(rel[0]-1).add(rel[1]-1);\n            indegree[rel[1]-1]++;\n        }\n        \n        Queue<Integer> q = new LinkedList<>();\n        for(int i=0;i<n;i++){\n            if(indegree[i] == 0){\n                q.offer(i);\n            }\n        }\n        for(int i=0;i<n;i++){\n            maxTime[i] = time[i];\n        }\n        int duration = 0;\n        while(!q.isEmpty()){\n            int cur = q.poll();\n            List<Integer> nbrs = adj.get(cur);\n            for(int nbr: nbrs){\n                indegree[nbr]--;\n                maxTime[nbr] = Math.max(maxTime[nbr], maxTime[cur]+time[nbr]);\n                if(indegree[nbr] == 0)\n                    q.add(nbr);\n            }\n            duration = Math.max(duration, maxTime[cur]);\n        }\n        return duration;\n    }\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false}