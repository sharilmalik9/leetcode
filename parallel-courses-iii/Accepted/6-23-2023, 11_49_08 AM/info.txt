{"id":977627791,"lang":"java","lang_name":"Java","time":"5 days, 13 hours","timestamp":1687501148,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/977627791/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"67.6 MB","code":"class Solution {\n    List<List<Integer>> adj=new ArrayList<>();\n    public int minimumTime(int n, int[][] relations, int[] time) {\n        for(int i=0;i<=n;i++)adj.add(new ArrayList<>());\n        for(int a[] : relations){\n            adj.get(a[0]).add(a[1]);\n        }\n\n        if(n == 1)return time[0];\n\n        int indegree[]=new int[n+1];\n        for(int a[] : relations){\n            indegree[a[1]]++;\n        }\n       \n        PriorityQueue<int []> pq=new PriorityQueue<>((x,y) -> x[0] - y[0]);\n        for(int i=1;i<=n;i++){\n             if(indegree[i] == 0){\n                 int tn=time[i-1];\n                 pq.add(new int[] {tn , i});\n             }\n        }\n        \n        int max=0;\n        while(pq.size()>0){\n            int cur[]=pq.remove();\n             int dist=cur[0];\n             int node=cur[1];\n\n            max=Math.max(max , dist);       // for single node component\n\n            for(int edg : adj.get(node)){\n                 indegree[edg]--;\n                 if(indegree[edg] == 0){\n                     int newtime = dist + time[edg-1];\n                     max=Math.max(max , newtime);\n                     pq.add(new int[] {newtime , edg});\n                 }\n             }\n        }\n\n        return max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false}