{"id":956204950,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1684902219,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/956204950/","is_pending":"Not Pending","title":"Maximum Subsequence Score","memory":"65.6 MB","code":"class Solution {\n    public long maxScore(int[] nums1, int[] nums2, int k) {\n        int n = nums1.length;\n        pair arr[] = new pair[n];\n        for(int i = 0;i<n;i++) {\n            arr[i] = new pair(nums1[i] , nums2[i]);\n        }\n        Arrays.sort(arr , (a , b)->b.i - a.i);\n        long sum = 0;\n        PriorityQueue<pair> pq = new PriorityQueue<>((a , b)->a.j - b.j);\n        long ans = 0;\n        for(int i = 0;i<n;i++) {\n            pq.offer(arr[i]);\n            sum += arr[i].i;\n            if(pq.size() > k) {\n                pair p = pq.poll();\n                sum -= p.i;\n            }\n            if(pq.size() == k) {\n            long a = sum * pq.peek().j;\n            ans = Math.max(ans  , a);\n\n            }\n        }\n        return ans;\n    }\n}\nclass pair {\n    int i ; int j;\n    public pair(int i , int j) {\n        this.i = i;\n        this.j = j;\n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"maximum-subsequence-score","has_notes":false}