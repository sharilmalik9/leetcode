{"id":792701727,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1662438470,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/792701727/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"41.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode pruneTree(TreeNode root) {\n        if(root==null){\n            return null;\n        }\n        TreeNode sub= root;\n       return help(root);\n        \n      \n        \n        \n       \n            \n        \n        \n        \n    }\n     \n     public TreeNode help(TreeNode root) {\n        if(root==null){\n            return null  ;\n        }\n        root.left=pruneTree(root.left);\n        root.right=pruneTree(root.right);   \n        if(root.left==null && root.right==null && root.val==0){\n           \n            return null;\n            \n}\n        \n        return root;\n    }   \n    \n    \n    \n    \n}","compare_result":"111111111111111111111111111111","title_slug":"binary-tree-pruning","has_notes":false}