{"id":887274528,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674970389,"status":10,"status_display":"Accepted","runtime":"153 ms","url":"/submissions/detail/887274528/","is_pending":"Not Pending","title":"Ones and Zeroes","memory":"82.9 MB","code":"class Solution {\n    HashMap<Integer,Integer> one= new HashMap<>();\n    HashMap<Integer,Integer> zero=new HashMap<>();\n    public int findMaxForm(String[] strs, int m, int n) {\n        for(int i=0;i<strs.length;i++){\n            int cntone=0;\n            int cntzero=0;\n            for(int j=0;j<strs[i].length();j++){\n                if(strs[i].charAt(j)=='1'){\n                    cntone++;\n                }\n                else{\n                    cntzero++;\n                }\n            }\n            one.put(i,cntone);\n            zero.put(i,cntzero);  \n        }\n        int[][][] dp= new int[strs.length][m+1][n+1];\n        for(int i=0;i<strs.length;i++){\n            for(int j=0;j<m+1;j++){\n                for(int k=0;k<n+1;k++){\n                    dp[i][j][k]=-1;\n                }\n            }\n\n        }\n        return help(strs,0,m,n,dp);\n    }\n    public int help(String[] strs,int idx,int m,int n,int[][][] dp){\n        if(idx==strs.length){\n            return 0;\n        }\n        if(m==0 && n==0){\n            return 0;\n        }\n        if(dp[idx][m][n]!=-1){\n            return dp[idx][m][n];\n        }\n        int ones=one.get(idx);\n        int zeros=zero.get(idx);\n        int include=0;\n        if(m-zeros>=0 && n-ones>=0){\n            include=1+help(strs,idx+1,m-zeros,n-ones,dp);\n        }\n        int dont=help(strs,idx+1,m,n,dp);\n        return dp[idx][m][n]=Math.max(include,dont);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ones-and-zeroes","has_notes":false}