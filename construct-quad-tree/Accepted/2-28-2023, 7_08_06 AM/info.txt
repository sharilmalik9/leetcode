{"id":906213453,"lang":"java","lang_name":"Java","time":"4Â months","timestamp":1677548286,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/906213453/","is_pending":"Not Pending","title":"Construct Quad Tree","memory":"42.6 MB","code":"class Solution {\n    public Node construct(int[][] grid) {\n        return construct(grid, 0, 0, grid.length - 1, grid[0].length - 1);\n    }\n    \n    private Node construct(int[][] grid, int rowStart, int colStart, int rowEnd, int colEnd) {\n        if (rowStart > rowEnd || colStart > colEnd) {\n            return null;\n        }\n        boolean isLeaf = true;\n        int val = grid[rowStart][colStart];\n        for (int i = rowStart; i <= rowEnd; i++) {\n            for (int j = colStart; j <= colEnd; j++) {\n                if (grid[i][j] != val) {\n                    isLeaf = false;\n                    break;\n                }\n            }\n        }\n        if (isLeaf) {\n            return new Node(val == 1, true, null, null, null, null);\n        }\n        int rowMid = (rowStart + rowEnd) / 2;\n        int colMid = (colStart + colEnd) / 2;\n        Node topLeft = construct(grid, rowStart, colStart, rowMid, colMid);\n        Node topRight = construct(grid, rowStart, colMid + 1, rowMid, colEnd);\n        Node bottomLeft = construct(grid, rowMid + 1, colStart, rowEnd, colMid);\n        Node bottomRight = construct(grid, rowMid + 1, colMid + 1, rowEnd, colEnd);\n        return new Node(false, false, topLeft, topRight, bottomLeft, bottomRight);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"construct-quad-tree","has_notes":false}