{"id":965694742,"lang":"java","lang_name":"Java","time":"3Â weeks","timestamp":1686120168,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/965694742/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    class pair{\n        TreeNode node;\n        int idx;\n        public pair(TreeNode node,int idx){\n            this.node=node;\n            this.idx=idx;\n        }\n    }\n    public int widthOfBinaryTree(TreeNode root){\n        Queue<pair> que=new LinkedList<>();\n        int ans=1;\n        que.add(new pair(root,0));\n        while(que.size()!=0){\n            int size=que.size();\n            int left=Integer.MAX_VALUE;\n            int right=Integer.MIN_VALUE;\n            while(size!=0){\n                pair curr=que.poll();\n                left=Math.min(curr.idx,left);\n                right=Math.max(curr.idx,right);\n                if(curr.node.left!=null){\n                    que.add(new pair(curr.node.left,curr.idx*2+1));\n                }\n                if(curr.node.right!=null){\n                    que.add(new pair(curr.node.right,curr.idx*2+2));\n                }\n                \n                size--;\n            }\n            int width=right-left+1;\n            ans=Math.max(width,ans);\n        }\n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false}