{"id":965682347,"lang":"java","lang_name":"Java","time":"3Â weeks","timestamp":1686118960,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/965682347/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root){\n        List<TreeNode> que=new ArrayList<>();\n        int ans=1;\n        que.add(root);\n        while(que.size()!=0){\n            int size=que.size();\n            int hehe=check(que);\n            if(hehe<=0){\n                break;\n            }\n            ans=Math.max(ans,hehe);\n            while(size!=0){\n                TreeNode curr=que.remove(0);\n                if(curr==null){\n                    que.add(null);\n                    que.add(null);\n                }\n                else{\n                    que.add(curr.left);\n                    que.add(curr.right);\n                }\n                size--;\n            }\n            \n        }\n        return ans;\n    }\n    public int check(List<TreeNode> ls){\n       int  idx=0;\n        while(idx<ls.size() && ls.get(idx)==null){\n            idx++;\n        }\n        int back=ls.size()-1;\n        while(back>=idx && ls.get(back)==null){\n            back--;\n        }\n\n        return back-idx+1;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree","has_notes":false}