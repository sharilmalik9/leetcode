{"id":937046544,"lang":"java","lang_name":"Java","time":"2 months, 1 week","timestamp":1682013967,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/937046544/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        Queue<TreeNode> que= new LinkedList<>();\n        root.val=1;\n        int ans=1;\n        que.add(root);\n        while(que.size()!=0){\n            int l=0;\n            int r=0;\n            int n=que.size();\n            int curr=n;\n            while(curr!=0){\n                TreeNode nn=que.poll();\n                if(curr==n){\n                    l=nn.val;\n\n                }\n                if(curr==1){\n                    r=nn.val;\n                }\n                if(nn.left!=null){\n                    nn.left.val=nn.val*2;\n                    que.add(nn.left);\n                }\n                if(nn.right!=null){\n                    nn.right.val=nn.val*2+1;\n                    que.add(nn.right);\n                }\n                ans=Math.max(ans,r-l+1);\n                curr--;\n\n            }\n        }\n        return ans;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111101111111111101111101","title_slug":"maximum-width-of-binary-tree","has_notes":false}