{"id":969526841,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1686567272,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/969526841/","is_pending":"Not Pending","title":"Meeting Rooms III","memory":"100.4 MB","code":"class Solution {\n\tpublic int mostBooked(int n, int[][] meetings) {\n\t\t// sort by start\n\t\tArrays.sort(meetings, (a, b) -> a[0] - b[0]);\n\n\t\t// available rooms\n\t\tvar rooms = new PriorityQueue<Integer>();\n\t\tfor (int i = 0; i < n; i++)\n\t\t\trooms.add(i);\n\n\t\t// { meeting end, room taken } -> sort by end time and by room number\n\t\tvar runningMeetings = new PriorityQueue<int[]>((a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n\n\t\t// room usage count\n\t\tvar count = new int[n];\n\t\tfor (int[] meeting : meetings) {\n\t\t\t// return room to available if meeting has ended\n\t\t\twhile (!runningMeetings.isEmpty() && runningMeetings.peek()[0] <= meeting[0])\n\t\t\t\trooms.add(runningMeetings.poll()[1]);\n\n\t\t\tvar delayedStart = meeting[0];\n\t\t\tif (rooms.isEmpty()) { // no available rooms, adjust the next meeting start time with delay\n\t\t\t\tvar await = runningMeetings.poll();\n\t\t\t\tdelayedStart = await[0];\n\t\t\t\trooms.add(await[1]);\n\t\t\t}\n\n\t\t\t// schedule the next meeting\n\t\t\tvar room = rooms.poll();\n\t\t\tcount[room]++;\n\t\t\trunningMeetings.add(new int[] { delayedStart + meeting[1] - meeting[0], room});\n\t\t}\n\n\t\t// find the most used room\n\t\tvar maxIdx = 0;\n\t\tfor (int r = 0; r < count.length; r++)\n\t\t\tif (count[maxIdx] < count[r])\n\t\t\t\tmaxIdx = r;\n\n\t\treturn maxIdx;\n\t}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"meeting-rooms-iii","has_notes":false}