{"id":825810433,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666171013,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/825810433/","is_pending":"Not Pending","title":"Frog Jump","memory":"69 MB","code":"class Solution {\n    public boolean canCross(int[] stones) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < stones.length; i++){\n            map.put(stones[i], i);\n        }\n        return stones[1] == 1 && solve(1, 1, stones, map, new boolean[stones.length][stones.length]);\n    }\n\n    private boolean solve(int i, int k, int[] stones, Map<Integer, Integer> map, boolean[][] bad){\n        if (i == stones.length-1)\n            return true;\n        if (i < 0 || k <= 0 || bad[k][i])\n            return false;\n        return  solve(map.getOrDefault(stones[i]+k-1, -1), k-1, stones, map, bad)\n            ||  solve(map.getOrDefault(stones[i]+k,   -1), k,   stones, map, bad)\n            ||  solve(map.getOrDefault(stones[i]+k+1, -1), k+1, stones, map, bad)\n            ||  !(bad[k][i] = true);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"frog-jump","has_notes":false}