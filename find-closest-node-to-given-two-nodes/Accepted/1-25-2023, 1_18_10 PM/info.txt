{"id":884881778,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674632890,"status":10,"status_display":"Accepted","runtime":"203 ms","url":"/submissions/detail/884881778/","is_pending":"Not Pending","title":"Find Closest Node to Given Two Nodes","memory":"138.7 MB","code":"class Solution {\n    public int closestMeetingNode(int[] edges, int node1, int node2) {\n        int[] dis1=new int[edges.length];\n        int[] dis2=new int[edges.length];\n        cal(edges,node1,dis1);\n        cal(edges,node2,dis2);\n        int ans=-1;\n        int res=Integer.MAX_VALUE;\n        for(int i=0;i<dis1.length;i++){\n            if(dis1[i]==-1 || dis2[i]==-1){\n                continue;\n            }\n            int max=Math.max(dis1[i],dis2[i]);\n            if(res>max){\n                res=max;\n                ans=i;\n            }\n        }\n        System.out.println(Arrays.toString(dis1));\n          System.out.println(Arrays.toString(dis2));\n        return ans;\n    }\n\n    public void cal(int[] edges, int node,int[] dis1){\n        Arrays.fill(dis1,-1);\n        Queue<Integer> que= new LinkedList<>();\n        dis1[node]=0;\n        que.add(node);\n        while(que.size()>0){\n            int curr=que.poll();\n            int next=edges[curr];\n            if(next!=-1 && dis1[next]==-1){\n                dis1[next]=1+dis1[curr];\n                que.add(next);\n            }\n             \n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-closest-node-to-given-two-nodes","has_notes":false}