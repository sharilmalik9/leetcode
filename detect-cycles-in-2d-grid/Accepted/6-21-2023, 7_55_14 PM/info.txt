{"id":976395253,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1687357514,"status":10,"status_display":"Accepted","runtime":"25 ms","url":"/submissions/detail/976395253/","is_pending":"Not Pending","title":"Detect Cycles in 2D Grid","memory":"90.6 MB","code":"class Solution {\n    int N, M;\n    boolean[][] vis;\n    final int[][] dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    public boolean containsCycle(char[][] G) {\n        N = G.length; M = G[0].length;\n        vis = new boolean[N][M];\n        for(int i=0; i<N; i++){\n            for(int j=0; j<M; j++){\n                if(!vis[i][j]){        \n                    if(dfs(i, j, G, G[i][j], -1, -1))\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n    boolean dfs(int r, int c, char[][] G, char u, int pr, int pc){\n        if(vis[r][c])\n            return true;\n        vis[r][c] = true; \n\n        for(int[] d : dir){\n            int newR = r+d[0], newC = c+d[1];\n            if(newR<0||newR>=N||newC<0||newC>=M || G[newR][newC] != u || newR == pr && newC == pc)\n                continue;\n            if(dfs(newR, newC, G, u, r, c))\n                return true;\n        }\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"detect-cycles-in-2d-grid","has_notes":false}