{"id":963109819,"lang":"java","lang_name":"Java","time":"3 weeks, 4 days","timestamp":1685812843,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/963109819/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"44.1 MB","code":"class Solution {\n    public String minWindow(String s, String t) {\n        if (s == null || t == null || s.length() ==0 || t.length() == 0 ||\n                s.length() < t.length()) {\n            return new String();\n        }\n        int[] map = new int[128];\n        int count = t.length();\n        int start = 0, end = 0, minLen = Integer.MAX_VALUE,startIndex =0;\n        for (char c :t.toCharArray()) {\n            map[c]++;\n        }\n        char[] chS = s.toCharArray();\n        while (end < chS.length) {\n            if (map[chS[end++]]-- >0) {\n                count--;\n            }\n            while (count == 0) {\n                if (end - start < minLen) {\n                    startIndex = start;\n                    minLen = end - start;\n                }\n                if (map[chS[start++]]++ == 0) {\n                    count++;\n                }\n            }\n        }\n\n        return minLen == Integer.MAX_VALUE? new String():\n                new String(chS,startIndex,minLen);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false}