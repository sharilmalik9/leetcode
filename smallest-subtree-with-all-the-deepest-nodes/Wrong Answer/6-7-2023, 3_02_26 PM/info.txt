{"id":965785783,"lang":"java","lang_name":"Java","time":"3Â weeks","timestamp":1686130346,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/965785783/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\nclass Solution {\n    TreeNode ans;\n    int max;\n    public TreeNode subtreeWithAllDeepest(TreeNode root) {\n        ans=null;\n        max=0;\n        rec(root);\n        return ans;\n    }\n    public  int rec(TreeNode root){\n        if(root==null){\n            return 0;\n        }\n        int left=rec(root.left);\n        int right=rec(root.right);\n         max=Math.max(max,Math.max(right,left)+1);\n     \n        if(left==right){\n            if(left+1>=max){\n                ans=root;\n            }\n            return left+1;\n        }\n        else{\n            return Math.max(left,right)+1;\n        }\n    }\n}","compare_result":"1111111111111111111111111110101100110101000000011000100000","title_slug":"smallest-subtree-with-all-the-deepest-nodes","has_notes":false}