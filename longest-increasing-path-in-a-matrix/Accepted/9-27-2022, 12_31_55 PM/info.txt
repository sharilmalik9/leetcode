{"id":809627260,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1664262115,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/809627260/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"53.8 MB","code":"class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        int n = matrix.length;\n        int m = matrix[0].length;\n\t\t\n        int max = 0;\n\n        dp = new int[n][m];\n        for(int i=0; i<n; i++)\n            Arrays.fill(dp[i], -1);\n\t\t\n        boolean[][] vis = new boolean[n][m];\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n\t\t\t\t// initially prev = -1\n\t\t\t\t// x stores the max length of increasing path starting from (i,j) in the matrix\n                int x = s(matrix, i, j, vis, -1);\n                max = Math.max(x, max);\n            }\n        }\n        return max;\n    }\n    int[][] dp;\n    int s(int[][] arr, int i, int j, boolean[][] vis, int prev){\n        if((i<0 || j<0 || i>=arr.length || j>=arr[0].length || vis[i][j] || arr[i][j]<=prev) && prev!=-1)\n\t\t\treturn 0;\n\n        if(dp[i][j]!=-1)\n\t\t\treturn dp[i][j];\n\t\t\n        vis[i][j] = true;\n        int a = s(arr, i-1, j, vis, arr[i][j]); // top\n        int b = s(arr, i+1, j, vis, arr[i][j]); // down\n        int c = s(arr, i, j-1, vis, arr[i][j]); // left\n        int d = s(arr, i, j+1, vis, arr[i][j]); // right\n\t\t\n        vis[i][j] = false; // backtrack\n        return dp[i][j] = 1+Math.max(a, Math.max(b, Math.max(c, d)));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false}