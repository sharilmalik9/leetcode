{"id":814764548,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1664861294,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/814764548/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\n    \n    public String longestPalindrome(String s) {\n        if(s.length()==0){\n            return \"\";\n                          }\n        if(s.length()==1){\n            return \"\"+s.charAt(0);\n        }\n        \n        String ans=longestPalindromeSubseq(s);\n        if(ans.length()==1){\n            return \"\"+s.charAt(0);\n        }\n        return longestPalindromeSubseq(s);\n    }\n     public String longestPalindromeSubseq(String s) {\n        StringBuilder input1 = new StringBuilder();\n \n        \n        input1.append(s);\n        input1.reverse();\n        return longestCommonSubsequence(s,input1.toString());\n        \n    }\n     public String longestCommonSubsequence(String s, String t) {\n        int m=s.length();\n        int n=t.length();\n        \n        int dp[][] = new int[m+1][n+1];\n        \n        for(int i = m-1; i>=0 ; i--){\n        \tfor(int j = n-1; j>=0 ; j--){\n                \n                int ans=0;\n\t\t\t\tif(s.charAt(i) == t.charAt(j)){\n                    ans=dp[i+1][j+1]+1;\n                }\n                else{\n                    ans=dp[i+1][j+1];\n                }\n               \n                dp[i][j]=ans;\n            }\n        }\n        return print(dp,m,n,s,t);\n    }\n    public String print(int[][] dp,int n , int m,String s1,String s2 ){\n        int len = dp[n][m];\n         int i = n;\n          int j = m;\n\n  int index = len - 1;\n  String ans = \"\";\n\n  while (i > 0 && j > 0) {\n    if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n      ans += s1.charAt(i-1);\n      index--;\n      i--;\n      j--;\n    }\n      else{\n          i--;\n          j--;\n      }\n   \n  }\n      return  ans;\n    }\n}","compare_result":"11101100110011100000010010010011110001110110100000000000000000000000000000001111111111111111100000010101010101010101010101011010101010101110","title_slug":"longest-palindromic-substring","has_notes":false}