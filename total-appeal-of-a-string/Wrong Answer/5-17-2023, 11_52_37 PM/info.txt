{"id":952251668,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684347757,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/952251668/","is_pending":"Not Pending","title":"Total Appeal of A String","memory":"N/A","code":"class Solution {\n    public long appealSum(String s) {\n         HashMap<Character,List<Integer>> hm= new HashMap<>();\n        for(int i=0;i<s.length();i++){\n            if(hm.containsKey(s.charAt(i))){\n                hm.get(s.charAt(i)).add(i);\n            }\n            else{\n                List<Integer> ls = new ArrayList<>();\n                ls.add(i);\n                hm.put(s.charAt(i),ls);\n            }\n        }\n        long ans=0;\n        int left;\n        int right;\n        for(Character ch: hm.keySet()){\n            for(int i=0;i<hm.get(ch).size();i++){\n                left= i==0 ? hm.get(ch).get(i)+1 : hm.get(ch).get(i)- hm.get(ch).get(i-1)+1;\n                right=i==hm.get(ch).size()-1 ? s.length()-hm.get(ch).get(i) : hm.get(ch).get(i+1)-hm.get(ch).get(i)+1;\n                ans+=left*right;\n\n            }\n            \n\n        }\n        return ans;\n    }\n}","compare_result":"1101011101011010100111110100000000000000000000000000000000000000000001100000","title_slug":"total-appeal-of-a-string","has_notes":false}