{"id":824867181,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666060409,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/824867181/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution {\n    private boolean backtrack(int idx, int[] arr, int k, int target, int sum, boolean[] used) {\n        if (k == 0) return true;\n        if (target == sum) return backtrack(0, arr, k - 1, target, 0, used);\n\n        for (int i = idx; i < arr.length; i++) {\n            if (used[i] || sum + arr[i] > target) continue;\n            used[i] = true;\n            if (backtrack(i + 1, arr, k, target, sum + arr[i], used)) return true;\n            used[i] = false;\n        }\n\n        return false;\n    }\n    void reverse(int[] arr) {\n        for (int i = 0, j = arr.length - 1; i < j; i++, j--) {\n            int tmp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = tmp;\n        }\n    }\n    public boolean canPartitionKSubsets(int[] arr, int k) {\n        int totalSum = Arrays.stream(arr).sum();\n        if (totalSum % k != 0) return false;\n        int target = totalSum / k;\n        boolean[] used = new boolean[arr.length];\n        Arrays.fill(used, false);\n        Arrays.sort(arr);\n      //  reverse(arr);\n        return backtrack(0, arr, k, target, 0, used);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false}