{"id":727436684,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1655799438,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/727436684/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"54.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n     public List<Node> returnlevel(Node root,int level,List<Node> ans1){\n        if(root== null){\n            return null;\n        }\n       // List<Integer> ans1= new ArrayList<Integer>();\n        if(level==1){\n          //  System.out.println(root.val);\n            ans1.add(root);\n          //  System.out.println(ans1);\n            \n        }\n         returnlevel(root.left,level-1,ans1);\n        returnlevel(root.right,level-1,ans1);\n       \n       \n        return ans1;\n    }\n    \n    public int height(Node root){\n        if(root==null){\n            return 0;\n        }\n        return Math.max(height(root.left),height(root.right))+1;\n    }\n    public Node connect(Node root) {\n       \n        for(int i=1;i<height(root)+1;i++){\n             List<Node> ans1=new ArrayList<Node>();\n             returnlevel(root,i,ans1);\n            System.out.println( returnlevel(root,i,ans1));\n            for(int j=0;j<ans1.size()-1;j++){\n                ans1.get(j).next=ans1.get(j+1); \n                \n            }\n            ans1.get(ans1.size()-1).next=null; \n         }\n        \n        return root;\n       \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false}