{"id":812077895,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1664548111,"status":10,"status_display":"Accepted","runtime":"498 ms","url":"/submissions/detail/812077895/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"51.9 MB","code":"class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        List<List<Integer>> ans= new ArrayList<>();\n        List<int[]> ls= new ArrayList<>();\n        for(int[] i:buildings){\n            ls.add(new int[]{i[0],-i[2]});\n            ls.add(new int[]{i[1],i[2]});\n            \n        }\n        Collections.sort(ls,(a,b)-> a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]);\n        PriorityQueue<Integer> pq= new PriorityQueue<>((a,b)->b-a);\n        pq.add(0);\n        int max=0;\n        for(int[] pair:ls){\n            if(pair[1]<0){\n                pq.offer(-pair[1]);\n            }\n            else{\n                pq.remove(pair[1]);\n            }\n            int curr=pq.peek();\n            if(max!=curr){\n                List<Integer> ansarr=new ArrayList<>();\n                ansarr.add(pair[0]);\n                ansarr.add(curr);\n                max=curr;\n                ans.add(ansarr);\n            }\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem","has_notes":false}