{"id":863120094,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1671610271,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/863120094/","is_pending":"Not Pending","title":"Add Edges to Make Degrees of All Nodes Even","memory":"143.9 MB","code":"class Solution {\n    public boolean isPossible(int n, List<List<Integer>> edges) {\n        // number of edges of each node\n        int[] noe=new int[n+1];\n        \n        // make a graph\n        List<List<Integer>> graph=new ArrayList<>();\n        for(int i=0;i<=n;i++) graph.add(new ArrayList<>());\n        for(List<Integer> c:edges){\n            int x=c.get(0);\n            int y=c.get(1);\n            graph.get(x).add(y);\n            graph.get(y).add(x);\n            noe[x]++;\n            noe[y]++;\n        }\n        \n        // nodes with number of odd edges will be in the list\n        List<Integer> list=new ArrayList<>();\n        \n        for(int i=0;i<noe.length;i++){ \n            if(noe[i]%2==1){\n                list.add(i);\n            }\n        }\n        \n        int odd=list.size();   \n        \n        //no odds\n        if(odd==0) return true;\n        else if(odd>4||odd==1||odd==3) return false; // we can't get ans with these conditions because edges will connect 2 nodes\n        else if(odd==4){ // if odd is 4 then we have to try out every possible combination\n            int node1=list.get(0);\n            int node2=list.get(1);\n            int node3=list.get(2);\n            int node4=list.get(3);\n            if(checkIfLegal(graph,node1,node2) && checkIfLegal(graph,node3,node4)) return true;\n            if(checkIfLegal(graph,node1,node3) && checkIfLegal(graph,node2,node4)) return true;\n            if(checkIfLegal(graph,node1,node4) && checkIfLegal(graph,node2,node3)) return true;\n        }else if(odd==2){ // if odd is 2 there are 2 conditions either join the 2 nodes with odd edges or join one node with even edge with 2 nodes with odd edge\n            int x=list.get(0);\n            int y=list.get(1);\n            if(checkIfLegal(graph,y,x)) return true;\n            for(int i=1;i<noe.length;i++){\n                if(i==x||i==y) continue;\n                if(checkIfLegal(graph,i,x) && checkIfLegal(graph,i,y)) return true;\n            }\n        }\n        return false;\n    }\n    \n    // will check if there is not a repeated edge or self loop\n    public boolean checkIfLegal(List<List<Integer>> graph,int x,int y){\n        for(int val:graph.get(x)) if(val==y) return false;\n        return true;\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"add-edges-to-make-degrees-of-all-nodes-even","has_notes":false}