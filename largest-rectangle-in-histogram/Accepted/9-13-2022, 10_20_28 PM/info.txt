{"id":798934375,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1663087828,"status":10,"status_display":"Accepted","runtime":"352 ms","url":"/submissions/detail/798934375/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"98 MB","code":"class Solution {\n    public int largestRectangleArea(int[] heights) {\n    int[] rb = new int[heights.length];\n    Stack<Integer> st = new Stack<>();\n        \n    st.push(heights.length-1);\n    rb[heights.length-1] = heights.length;\n        \n    for(int i=heights.length-2;i>=0;i--){\n       while(!st.isEmpty() && heights[i]<=heights[st.peek()]){\n          st.pop();\n       }\n       rb[i]= st.isEmpty()?heights.length:st.peek();\n       st.push(i);\n    }\n\n    int[] lb = new int[heights.length];\n    st = new Stack<>();\n        \n    st.push(0);\n    lb[0] = -1;\n        \n    for(int i=1;i<heights.length;i++){\n       while(!st.isEmpty() && heights[i]<=heights[st.peek()]){\n          st.pop();\n       }\n       lb[i]= st.isEmpty()?-1:st.peek();\n       st.push(i);\n    }\n        \n    int maxArea = 0;\n        \n    for(int i=0;i<heights.length;i++){\n       int width = rb[i] - lb[i] -1;\n       int area = width*heights[i];\n       if(area>maxArea){\n          maxArea=area;\n       }\n    }\n        return maxArea;\n  }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false}