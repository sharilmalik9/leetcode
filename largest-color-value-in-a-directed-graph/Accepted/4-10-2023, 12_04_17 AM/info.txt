{"id":930876677,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1681065257,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/930876677/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"115.1 MB","code":"class Solution {\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        int n=colors.length();\r\n        ArrayList<ArrayList<Integer>> graph=new ArrayList<>();\r\n        for(int i=0;i<n;i++)\r\n        graph.add(new ArrayList<Integer>());\r\n        for(int[] edge : edges){\r\n            int a=edge[0];\r\n            int b=edge[1];\r\n            graph.get(a).add(b);\r\n        }\r\n\r\n        int[][] dp=new int[n][26];\r\n        boolean[] vis=new boolean[n];\r\n        int ans=0;      \r\n        \r\n        for(int i=0;i<n;i++){\r\n//if i is not visited do dfs\r\n            if(!vis[i] && dfs(i,graph,dp,vis,new boolean[n],colors))\r\n            return -1;\r\n            for(int k : dp[i])\r\n            ans=Math.max(ans,k);\r\n\r\n        }\r\n        return ans;\r\n    }\r\n    public boolean dfs(int node,ArrayList<ArrayList<Integer>> graph,int[][] dp,boolean[] vis,boolean[] dfsvis,\r\n    String colors){\r\n        vis[node]=true;\r\n        dfsvis[node]=true;\r\n\r\n        for(int val : graph.get(node)){\r\n// return true if loop\r\n            if(dfsvis[val])\r\n            return true;\r\n// do dfs if not visited i.e if visited dfs is already done\r\n            if(!vis[val] && dfs(val,graph,dp,vis,dfsvis,colors))\r\n            return true; \r\n                   \r\n          for(int i=0;i<26;i++)\r\n          dp[node][i]=Math.max(dp[node][i],dp[val][i]);\r\n        }\r\n        dfsvis[node]=false;\r\n         dp[node][colors.charAt(node)-'a']++;\r\n         return false;\r\n    }\r\n   \r\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false}