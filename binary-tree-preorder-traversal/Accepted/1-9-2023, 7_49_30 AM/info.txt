{"id":874430469,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1673230770,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/874430469/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"40.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private List<Integer> answer = new ArrayList<>();\n\n    private void dfs(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        // Visit the root first, then the left subtree, then the right subtree.\n        answer.add(node.val);\n        dfs(node.left);\n        dfs(node.right);\n    }\n    \n    public List<Integer> preorderTraversal(TreeNode root) {\n        dfs(root);\n        return answer;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal","has_notes":false}