{"id":862973362,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1671587719,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/862973362/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"73.2 MB","code":"class Solution {\n    public boolean possibleBipartition(int N, int[][] dislikes) {        \n        List<Integer>[] graph = new List[N + 1];  \n\n        for (int i = 1; i <= N; ++i) graph[i] = new ArrayList<>();        \n\n        for (int[] dislike : dislikes) {\n            graph[dislike[0]].add(dislike[1]);\n            graph[dislike[1]].add(dislike[0]);\n        }\n\n        Integer[] colors = new Integer[N + 1];\n\n        for (int i = 1; i <= N; ++i) {\n            // If the connected component that node i belongs to hasn't been colored yet then try coloring it.\n            if (colors[i] == null && !dfs(graph, colors, i, 1)) return false;\n        }\n        return true;   \n    }\n\n    private boolean dfs(List<Integer>[] graph, Integer[] colors, int currNode, int currColor) {\n        colors[currNode] = currColor;\n\n        // Color all uncolored adjacent nodes.\n        for (Integer adjacentNode : graph[currNode]) {\n\n            if (colors[adjacentNode] == null) {\n                if (!dfs(graph, colors, adjacentNode, currColor * -1)) return false;     \n\n            } else if (colors[adjacentNode] == currColor) {\n                return false;                                     \n            }\n        }\n        return true;        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition","has_notes":false}