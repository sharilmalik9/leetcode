{"id":829936758,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1666701688,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/829936758/","is_pending":"Not Pending","title":"Partition Array for Maximum Sum","memory":"41.9 MB","code":"class Solution {\n    public int maxSumAfterPartitioning(int[] arr, int k) {\n        int[] dp= new int[arr.length];\n        Arrays.fill(dp,-1);\n        return help(arr,0,k,dp);\n        \n    }\n    public int help(int[] arr,int idx, int k,int[] dp){\n        if(idx==arr.length){\n            return 0;\n        }\n        if (dp[idx]!=-1){\n            return dp[idx];\n        }\n        int max=Integer.MIN_VALUE;\n        int maxSum=Integer.MIN_VALUE;\n        int len=0;\n        \n        for(int j=idx;j<Math.min(idx+k,arr.length);j++){\n            len++;\n            max=Math.max(max,arr[j]);\n            maxSum=Math.max(maxSum,max*len+help(arr,j+1,k,dp));\n            \n            \n        }\n        return dp[idx]=maxSum;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"partition-array-for-maximum-sum","has_notes":false}