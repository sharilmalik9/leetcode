{"id":798539476,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1663047520,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/798539476/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"53.8 MB","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {   \n        int max =0;\n        int speed =0;\n        for(int i=0;i<piles.length;i++)\n    {\n        max=Math.max(piles[i],max);\n    }\n    \n    if(piles.length==h)\n        return max;\n    \n    int low = 1;\n    int high= max;\n    \n    while(low<=high)\n    {\n        int mid=low+(high-low)/2;\n        \n        double num=0;\n        int neededTime=0;\n        \n        for(int i=0;i<piles.length;i++)\n        {\n            num=(double)piles[i]/(mid);\n            \n            if(num>piles[i]/mid)\n                neededTime += num+1;\n            else\n                neededTime += num;\n        }\n        \n        if(neededTime<=h)\n        {\n            speed = mid;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    \n    return speed;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false}