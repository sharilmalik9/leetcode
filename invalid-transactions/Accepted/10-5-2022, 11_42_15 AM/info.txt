{"id":815544217,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1664950335,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/815544217/","is_pending":"Not Pending","title":"Invalid Transactions","memory":"54.2 MB","code":"// class Solution {\n//     class transaction{\n//         String name;\n//         int time;\n//         int amount;\n//         String city;\n//         public transaction(String line){\n\t\t\t\n//             String[] split = line.split(\",\");\n//             name = split[0];\n//             time = Integer.parseInt(split[1]);\n//             amount = Integer.parseInt(split[2]);\n//             city = split[3];\n//         }\n//     }\n//     public List<String> invalidTransactions(String[] transactions) {\n//         List<String> invalid = new ArrayList<>();\n//         List<transaction> sep = new ArrayList<>();\n//         Map< String, List<transaction>> mp= new HashMap<>();\n//         for(String t : transactions){\n//             transaction tr= new transaction(t);\n//             sep.add(tr);\n//             if(mp.containsKey(tr.name)){\n//                 mp.get(tr.name).add(tr);\n//             }\n//             else{\n//                 List<transaction> hey= new ArrayList<>();\n//                 hey.add(tr);\n//                 mp.put(tr.name,hey);\n//             }\n//         }\n//         int idx=0;\n//         for(transaction t: sep){\n            \n//             if(check(t,mp.get(t.name))){\n//                 invalid.add(transactions[idx]);\n//             }\n//             idx++;\n// }\n        \n//         return invalid;\n        \n        \n//     }\n//     public boolean check(transaction t1,List<transaction> ls ){\n//         System.out.println(ls);\n//         if(t1.amount>1000){\n//             return true;\n//         }\n//         for(transaction tt: ls){\n//           //  System.out.println(t1.city);\n//             if(Math.abs(t1.time - tt.time) <= 60 && !t1.city.equals(tt.city)){\n               \n//                   //  System.out.println(t1.amount);\n//                     return true;\n                \n                \n//             }\n//         }\n//         return false;\n//     }\n// }\nclass Solution {\n\t// store transaction in an object for ease of handling and cleaner code\n    class Transaction{\n        String name;\n        int time;\n        int amount;\n        String city;\n        public Transaction(String line){\n\t\t\t// split the string and parse it\n            String[] split = line.split(\",\");\n            name = split[0];\n            time = Integer.parseInt(split[1]);\n            amount = Integer.parseInt(split[2]);\n            city = split[3];\n        }\n    }\n    public List<String> invalidTransactions(String[] transactions) {\n        List<String> invalid = new ArrayList<>();\n        Map<String, List<Transaction>> map = new HashMap<>();\n\t\t// go through entire transaction list and create object and store in map using 'name' as key\n        for(String transaction : transactions){\n            Transaction t = new Transaction(transaction);\n            map.putIfAbsent(t.name, new ArrayList<>());\n            map.get(t.name).add(t);\n        }\n\t\t// now go through the transaction list again and \n\t\t// compare each transaction to the respective list for that name\n        for(String transaction : transactions){\n            Transaction t = new Transaction(transaction);\n\t\t\t// if transaction is not valid, add to final result\n\t\t\t// (notice we are passing to the function only the list of transactions for that specific name\n\t\t\t// we only care about transactions for the same name)\n            if(!isValid(t, map.getOrDefault(t.name, new ArrayList<>()))){\n                invalid.add(transaction);\n            }\n        }\n        return invalid;\n    }\n    public boolean isValid(Transaction t, List<Transaction> list){\n\t\t// if the transaction is greater than 1000, \n\t\t/// we hit the first condition in the description so return the transaction as false\n        if(t.amount > 1000){\n\t\t\treturn false;\n\t\t}\n\t\t// go through the list for that name\n\t\t// see if the time of the transaction is less than or equal to 60\n\t\t// and if the transaction is not in the same city\n\t\t// we hit the second condition return the transaction as false\n        for(Transaction ta : list){\n            if(Math.abs(ta.time - t.time) <= 60 && !ta.city.equals(t.city)){\n\t\t\t\treturn false;\n\t\t\t}\n        }\n\t\t// if we go through the entire list and we don't hit any condition, then the transaction is true\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"invalid-transactions","has_notes":false}