{"id":911825369,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1678333650,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/911825369/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"43.2 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head){\n        if(head==null || head.next==null){\n            return null;\n        }\n        ListNode slow=head;\n        ListNode fast=head;\n        while(fast!=null && fast.next!=null){\n            fast=fast.next.next;\n            slow=slow.next;\n            if(fast==slow){\n                break;\n            }\n        }\n        if(fast!=slow){\n            return null;\n        }\n        if(slow==head){\n            return head;\n        }\n        fast=head;\n        while(fast!=slow){\n            fast=fast.next;\n            slow=slow.next;\n            if(fast==slow){\n                return fast;\n            }\n        }\n        return null;\n\n        \n    }\n}","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}