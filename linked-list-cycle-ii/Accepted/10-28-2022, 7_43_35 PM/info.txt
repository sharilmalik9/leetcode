{"id":832090561,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1666966415,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/832090561/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"44.5 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if(head==null || head.next==null) return null;\n        ListNode fast = head, slow = head;\n        //lets find the cycle\n        while(fast!=null && fast.next!=null){\n            fast = fast.next.next;\n            slow = slow.next;\n            if(slow == fast) break;\n        }\n        if(slow!=fast) return null; //no cycle\n        if(head==slow) return head; //cycle ended at the starting point only\n        //lets find the starting point\n        while(head!=slow){\n            slow=slow.next;\n            head=head.next;\n            if(slow==head) return head;\n        }\n        return null;\n    }\n}","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}