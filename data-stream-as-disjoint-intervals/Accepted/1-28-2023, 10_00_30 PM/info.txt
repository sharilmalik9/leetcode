{"id":886927314,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1674923430,"status":10,"status_display":"Accepted","runtime":"115 ms","url":"/submissions/detail/886927314/","is_pending":"Not Pending","title":"Data Stream as Disjoint Intervals","memory":"69.5 MB","code":"class SummaryRanges {\n  public void addNum(int val) {\n    if (map.containsKey(val))\n      return;\n\n    final Integer lo = map.lowerKey(val);  // Maximum in map < key\n    final Integer hi = map.higherKey(val); // Minimum in map > key\n\n    // {lo, map.get(lo)[1]} + val + {hi, map.get(hi)[1]} = {lo, map.get(hi)[1]}\n    if (lo != null && hi != null && map.get(lo)[1] + 1 == val && val + 1 == hi) {\n      map.get(lo)[1] = map.get(hi)[1];\n      map.remove(hi);\n      // {lo, map.get(lo)[1]} + val = {lo, val}\n      // (prevent adding duplicate entry by using '>=' instead of '==')\n    } else if (lo != null && map.get(lo)[1] + 1 >= val) {\n      map.get(lo)[1] = Math.max(map.get(lo)[1], val);\n      // Val + {hi, map.get(hi)[1]} = {val, map.get(hi)[1]}\n    } else if (hi != null && val + 1 == hi) {\n      map.put(val, new int[] {val, map.get(hi)[1]});\n      map.remove(hi);\n    } else {\n      map.put(val, new int[] {val, val});\n    }\n  }\n\n  public int[][] getIntervals() {\n    List<int[]> intervals = new ArrayList<>(map.values());\n    return intervals.toArray(new int[intervals.size()][]);\n  }\n\n  // {start: {start, end}}\n  private TreeMap<Integer, int[]> map = new TreeMap<>();\n}","compare_result":"111111111","title_slug":"data-stream-as-disjoint-intervals","has_notes":false}