{"id":952187937,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684341599,"status":10,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/952187937/","is_pending":"Not Pending","title":"Making A Large Island","memory":"83.7 MB","code":"// store the computed sizes and then for all zeroes add pre computed from all 4 dirs and +1 \n// give id to all uniq groups\nclass Solution {\n    public int largestIsland(int[][] grid) {\n        int max = 0;\n        int id=1;\n        int max1=0;\n        HashMap<Integer,Integer> hm= new HashMap<>();\n        for(int i = 0 ; i < grid.length ; i++){\n            for(int j = 0 ; j < grid[0].length ; j++){\n                if(grid[i][j] == 1){\n                    id++;\n                    int island = dfs(grid, i, j,id);\n                    hm.put(id,island);\n                    max1=Math.max(max1,island);\n                    \n                }\n            }\n        }\n\n        int zeros=0;\n        for(int i = 0 ; i < grid.length ; i++){\n        \n            for(int j = 0 ; j < grid[0].length ; j++){\n                if(grid[i][j] == 0){\n                    zeros++;\n                    \n                    int island = dfs2(grid, i, j,hm);\n                    max=Math.max(max,island);\n                    \n                    \n                }\n            }\n        }\n\n         if(zeros==0){\n             return max1;\n         }\n        return max;\n\n\n\n    }\n    int[][] dir = {{0,1}, {1,0}, {-1,0}, {0,-1}};\n    \n    public int dfs(int[][] grid, int i, int j,int id){\n        \n        if(i < 0 || j < 0 || i == grid.length || j == grid[0].length || grid[i][j]==0 || grid[i][j]==id){\n            return 0;\n        }\n        \n        \n        int count = 1;\n        grid[i][j] = id;\n        for(int k = 0 ; k < dir.length ; k++){\n            count += dfs(grid, i+dir[k][0], j+dir[k][1],id);\n\n        }\n        return count;\n    }\n    public int dfs2(int[][] grid, int i, int j,HashMap<Integer,Integer> hm){\n        int ans=1;\n        HashSet<Integer> hs= new HashSet<>();\n        if(i>0){\n            hs.add(grid[i-1][j]);\n        }\n        if(j>0){\n             hs.add(grid[i][j-1]);\n        }\n        if(i<grid.length-1){\n           hs.add(grid[i+1][j]);\n        }\n        if(j<grid[0].length-1){\n            hs.add(grid[i][j+1]);\n        }\n         \n        for (int k: hs) {\n            ans+=hm.getOrDefault(k,0);\n        }\n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"making-a-large-island","has_notes":false}