{"id":978107198,"lang":"java","lang_name":"Java","time":"4 days, 23 hours","timestamp":1687551056,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/978107198/","is_pending":"Not Pending","title":"Smallest Subsequence of Distinct Characters","memory":"40.7 MB","code":"class Solution {\n    public String smallestSubsequence(String s) {\n        char[] hm=s.toCharArray();\n        Stack<Integer> st=new Stack<>();\n        int[] arr=new int[26];\n        for(int i=0;i<s.length();i++){\n            arr[s.charAt(i)-'a']=i;\n        }\n\n        boolean[] vis=new boolean[26];\n        for(int i=0;i<hm.length;i++){\n            if(vis[hm[i]-'a']){\n                continue;\n            }\n\n        \n                while(st.size()!=0  && hm[st.peek()]-'a'>hm[i]-'a' && i<arr[hm[st.peek()]-'a']){\n                   \n                     vis[hm[st.pop()]-'a']=false;\n                   \n\n                }\n\n                \n                      st.add(i);\n                      vis[hm[i]-'a']=true;\n                \n            }\n        \n\n        StringBuilder sb=new StringBuilder();\n        while(st.size()!=0){\n            sb.append(hm[st.pop()]);\n        }\n        return sb.reverse().toString();\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subsequence-of-distinct-characters","has_notes":false}