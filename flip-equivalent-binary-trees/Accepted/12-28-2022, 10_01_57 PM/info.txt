{"id":867033233,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1672245117,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/867033233/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"40 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean flipEquiv(TreeNode root1, TreeNode root2) {\n        \n        return help(root1,root2);\n    }\n    public boolean help(TreeNode root1,TreeNode root2){\n        if(root1==null || root2==null){\n            return root1==root2;\n        }\n        if(root1.val!=root2.val){\n            return false;\n        }\n        return (help(root1.left,root2.left) && help(root1.right,root2.right))||(help(root1.left,root2.right) && help(root1.right,root2.left));\n\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-equivalent-binary-trees","has_notes":false}