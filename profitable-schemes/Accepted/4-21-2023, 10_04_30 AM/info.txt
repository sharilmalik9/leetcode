{"id":937237549,"lang":"java","lang_name":"Java","time":"2 months, 1 week","timestamp":1682051670,"status":10,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/937237549/","is_pending":"Not Pending","title":"Profitable Schemes","memory":"50.8 MB","code":"class Solution {\n    int mod = (int) (1e9 + 7);\n    public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {\n        int[][][] dp= new int[minProfit+1][group.length+1][n+1];\n        for(int[][] i: dp){\n            for(int[] j : i){\n                Arrays.fill(j,-1);\n            }\n        }\n        return rec(group.length,minProfit,n,group,profit,0,dp);\n\n\n\n        \n    }\n    public int rec(int n ,int currprofit,int ppl,int[] group,int[] profit,int idx,int[][][] dp){\n        if(idx==n){\n           return currprofit==0 ? 1 : 0;\n            \n        }\n        if(dp[currprofit][idx][ppl]!=-1){\n            return dp[currprofit][idx][ppl];\n        }\n        long p1=0;\n        long p2=0;\n        p1=rec(n,currprofit,ppl,group,profit,idx+1,dp);\n        if(ppl>=group[idx]){\n            p2=rec(n,Math.max(currprofit-profit[idx],0),ppl-group[idx],group,profit,idx+1,dp);\n        }\n        long p=p1+p2;\n        p%=mod;\n      \n        return dp[currprofit][idx][ppl]= (int)p;\n        \n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"profitable-schemes","has_notes":false}