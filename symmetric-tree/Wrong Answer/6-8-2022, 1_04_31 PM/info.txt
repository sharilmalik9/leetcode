{"id":717152384,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1654673671,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/717152384/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n     public int height(TreeNode root){\n       if(root==null){\n            return 0;\n        }\n        return Math.max(height(root.left),height(root.right))+1;\n    }\n     public List<Integer> returnlevel(TreeNode root,int level,List<Integer> ans1){\n        if(root== null){\n          //  ans1.add(0);\n            return null;\n        }\n       // List<Integer> ans1= new ArrayList<Integer>();\n        if(level==1){\n          //  System.out.println(root.val);\n            ans1.add(root.val);\n          //  System.out.println(ans1);\n            \n        }\n        else if(level>1){\n            if(root.left==null){\n                ans1.add(1001);\n                \n            }\n            \n             returnlevel(root.left,level-1,ans1);\n             if(root.right==null){\n                ans1.add(1001);\n            }\n             returnlevel(root.right,level-1,ans1);\n       \n            \n        }\n      \n        return ans1;\n    }\n    \n    public boolean ispalin(List<Integer> ans){\n        if(ans.size()==0){\n            return true;\n        }\n        if(ans.size()==1){\n            return true;\n        }\n        int count=0;\n        int count1=0;\n        for(int i=0;i<ans.size()/2;i++){\n            count++;\n            if(ans.get(i)==ans.get(ans.size()-i-1)){\n                count1++;\n            }\n            \n        }\n        if(count1==count){\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n    }\n    public boolean isSymmetric(TreeNode root) {\n        int truecount=0;\n        int falsecount=0;\n        int count=0;\n       \n        \n        for(int i=1;i<height(root)+1;i++){\n            count++;\n             List<Integer> ans1=new ArrayList<Integer>();\n            \n            ans1=returnlevel(root,i,ans1);\n            System.out.println(ans1);\n             System.out.println(ispalin(ans1));\n            \n           if(ispalin(ans1)){\n               truecount++;\n                \n                \n           }\n           else{\n               falsecount++;\n            }\n        }\n        if(truecount==count){\n            return true;\n        }\n        else{\n            return false;\n        }\n        \n        \n        \n    }\n}","compare_result":"111111111101011111111010101111000110011110111101111111111011011110110001101100011111111101001111011110010110110111101101011110001001110010111101000011100110101100011000100111110011110011001101011111","title_slug":"symmetric-tree","has_notes":false}