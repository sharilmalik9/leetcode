{"id":808701649,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1664160298,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/808701649/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"45.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high){\n        \n        return delete(root,low,high,root);\n        \n        \n        \n        \n    }\n    public TreeNode delete(TreeNode root,int low, int high,TreeNode mainroot){\n        if(root==null){\n            return null;\n        }\n        delete(root.left,low,high,mainroot);\n        delete(root.right,low,high,mainroot);\n        \n        if(root.val<low || root.val>high){\n            return helper(mainroot,root.val);\n        }\n        \n        return root;\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n     public TreeNode deleteNode(TreeNode root, int key) {\n        return helper(root,key);\n        \n    }\n    public TreeNode helper(TreeNode root,int key){\n        if(root==null){\n            return null;\n        }\n        if(root.val>key){\n            root.left=helper(root.left,key);\n            \n        }\n        else if(root.val<key){\n            root.right=helper(root.right,key);\n            \n        }\n        else{\n            if(root.left==null){\n                return root.right;\n            }\n            else if(root.right==null){\n                  return root.left;\n            }\n            root.val=minval(root.right);\n          root.right= helper(root.right,root.val);\n        }\n        return root;\n    }\n    public int minval(TreeNode root){\n        int min=root.val;\n        while(root.left!=null){\n            \n           min=root.left.val;\n            root=root.left;\n        }\n        return min;\n        \n    }\n\n        \n    \n    \n    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trim-a-binary-search-tree","has_notes":false}