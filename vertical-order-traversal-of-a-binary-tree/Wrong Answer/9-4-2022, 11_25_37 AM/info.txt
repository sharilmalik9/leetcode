{"id":791052093,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1662270937,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/791052093/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    class pair{\n        TreeNode tp;\n        int x;\n        int y;\n        pair(TreeNode tp,int x,int y){\n            this.tp=tp;\n            this.x=x;\n            this.y=y;\n            \n        }\n    }\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        Queue<pair> pq= new LinkedList<>();\n        PriorityQueue<pair> que= new PriorityQueue<>((a,b)->a.y-b.y);\n        pq.add(new pair(root,0,0));\n        while(pq.size()!=0){\n            int size=pq.size();\n            while(size!=0){\n                pair curr=pq.poll();\n                que.add(curr);\n                \n                \n                if(curr.tp.left!=null){\n                    pq.add(new pair(curr.tp.left,curr.x+1,curr.y-1));\n                }\n                if(curr.tp.right!=null){\n                    pq.add(new pair(curr.tp.right,curr.x+1,curr.y+1));\n                }\n                size--;\n                \n                \n}\n            List<List<Integer>> ans= new ArrayList<>();\n            \n\n            \n}\n         List<List<Integer>> ans= new ArrayList<>();\n        while(que.size()!=0){\n            pair curr=que.poll();\n            int y=curr.y;\n            List<Integer> ls= new ArrayList<>();\n            List<pair> sub= new ArrayList<>();\n            sub.add(curr);\n            ls.add(curr.tp.val);\n            while(que.size()!=0&&que.peek().y==y){\n                pair pp= que.poll();\n                if(sub.get(sub.size()-1).x==pp.x){\n                    pair prepre=sub.get(sub.size()-1);\n                    sub.remove(prepre);\n                    ls.remove(ls.size()-1);\n                    if(prepre.tp.val<pp.tp.val){\n                        sub.add(prepre);\n                        ls.add(prepre.tp.val);\n                        sub.add(pp);\n                        ls.add(pp.tp.val);\n}\n                    else{\n                         sub.add(pp);\n                        ls.add(pp.tp.val);\n                        sub.add(prepre);\n                        ls.add(prepre.tp.val);\n                        \n                    }\n                    \n                }\n                else{\n                    sub.add(pp);\n                     ls.add(pp.tp.val);\n                    \n                }\n               // ls.add(pp.tp.val);\n                \n            }\n          //  Collections.sort(ls);\n            ans.add(ls);\n            \n        }\n        \n            \n        return ans;\n        \n        \n    }\n}","compare_result":"11111010100000000000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false}