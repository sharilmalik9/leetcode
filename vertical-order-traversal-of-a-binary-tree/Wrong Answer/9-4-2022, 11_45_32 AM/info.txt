{"id":791066391,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1662272132,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/791066391/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    class pair{\n        TreeNode tp;\n        int x;\n        int y;\n        pair(TreeNode tp,int x,int y){\n            this.tp=tp;\n            this.x=x;\n            this.y=y;\n            \n        }\n    }\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        Queue<pair> pq= new LinkedList<>();\n        PriorityQueue<pair> que= new PriorityQueue<>((a,b)->a.y-b.y);\n        pq.add(new pair(root,0,0));\n        while(pq.size()!=0){\n            int size=pq.size();\n            while(size!=0){\n                pair curr=pq.poll();\n                que.add(curr);\n                \n                \n                if(curr.tp.left!=null){\n                    pq.add(new pair(curr.tp.left,curr.x+1,curr.y-1));\n                }\n                if(curr.tp.right!=null){\n                    pq.add(new pair(curr.tp.right,curr.x+1,curr.y+1));\n                }\n                size--;\n        \n            }       \n       }\n        List<List<pair>> ls = new ArrayList<>();\n        while(que.size()!=0){\n            pair pp= que.poll();\n            int y=pp.y;\n            List<pair> curr = new ArrayList<>();\n            PriorityQueue<pair> pnow= new PriorityQueue<>((a,b)->a.x-b.x);\n            pnow.add(pp);\n            while(que.size()!=0 && que.peek().y==y){\n                pair now= que.poll();\n                pnow.add(now);\n            }\n            while(pnow.size()!=0){\n                pair  now = pnow.poll();\n                if(curr.size()!=0){\n                    if(now.x==curr.get(curr.size()-1).x){\n                        pair aabkya=curr.get(curr.size()-1);\n                        curr.remove(aabkya);\n                        if(aabkya.tp.val>now.tp.val){\n                            curr.add(now);\n                            curr.add(aabkya);\n                        }\n                        else{\n                            curr.add(aabkya);\n                            curr.add(now);\n                        }\n                        \n                    }\n                    else{\n                        curr.add(now); \n                    }\n                }\n                else{\n                    curr.add(now);\n                }\n                \n                \n                \n                \n            }\n            ls.add(curr);\n            \n        }\n        System.out.println(ls);\n        List<List<Integer>> ans= new ArrayList<>();\n        for(int i=0;i<ls.size();i++){\n            List<Integer> curr= new ArrayList<>();\n            for(int j=0;j<ls.get(i).size();j++){\n                curr.add(ls.get(i).get(j).tp.val);\n                \n            }\n            ans.add(curr);\n        }\n        return ans;\n        \n       \n        \n        \n    }\n}","compare_result":"11111111111111111111111100000000","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false}