{"id":871620093,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1672887995,"status":10,"status_display":"Accepted","runtime":"133 ms","url":"/submissions/detail/871620093/","is_pending":"Not Pending","title":"Minimum Number of Arrows to Burst Balloons","memory":"99.6 MB","code":"class Solution {\n    public int findMinArrowShots(int[][] points) {\n        if (points == null || points.length == 0) return 0;\n        Arrays.sort(points, (int[] p1, int[] p2)->{\n\t\t    // Don't use p1[1 ] - p2[1]. It may overflow \n            return p1[0] < p2[0] ? -1 : 1;\n        });\n        int start = points[0][0], end = points[0][1];\n\t\t\n\t\t// the reason res = 1 is that we need an arrow to destroy the last group. \n        int res = 1;\n        for (int[] point: points)\n        {\n            if (point[0]<= end)\n            {\n                start= Math.max(start, point[0]);\n                end = Math.min(end, point[1]);\n            }\n            else\n            {\n                res++;\n                start = point[0];\n                end = point[1];\n            }\n        }\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-arrows-to-burst-balloons","has_notes":false}