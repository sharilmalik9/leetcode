{"id":828533055,"lang":"java","lang_name":"Java","time":"8 months, 1 week","timestamp":1666518404,"status":10,"status_display":"Accepted","runtime":"123 ms","url":"/submissions/detail/828533055/","is_pending":"Not Pending","title":"Longest String Chain","memory":"44.6 MB","code":"class Solution {\n    \n    Boolean compareForIncreaseByOne(String str1,String str2){\n            //str 1 will be long than str2\n        int first=0;\n        int second=0;\n        if(str1.length() != (str2.length() + 1)){\n            return false;\n        }\n        while(first < str1.length()){\n            if(second < str2.length() && str1.charAt(first) == str2.charAt(second)){\n                first++;\n                second++;\n            }else{\n                first++;\n            }\n        }\n        if(first == str1.length() && second == str2.length()){\n            return true;\n        }\n        return false;\n    }\n    \n    public int longestStrChain(String[] words) {\n        int N = words.length;\n        Arrays.sort(words,(a,b) -> a.length()-b.length());  //as Sequence/Subset are not ordered\n        int []dp =new int[N];\n        Arrays.fill(dp,1);\n        int maxi = 1;\n        for(int i=0;i<N;i++){\n            for(int j=0;j<i;j++){\n                if(compareForIncreaseByOne(words[i],words[j]) && dp[j]+1 > dp[i]){\n                    dp[i] = dp[j] + 1;\n                    maxi = Math.max(maxi,dp[i]);\n                }\n            }\n        }//for neds\n        return maxi;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-string-chain","has_notes":false}