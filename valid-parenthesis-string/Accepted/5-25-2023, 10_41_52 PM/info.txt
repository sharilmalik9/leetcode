{"id":957213716,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1685034712,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/957213716/","is_pending":"Not Pending","title":"Valid Parenthesis String","memory":"40.8 MB","code":"class Solution {\n    public boolean checkValidString(String s) {\n        //first stack to store position of open bracket\n        Stack<Integer> star  = new Stack<Integer>();\n        //second stack to store position of star\n        Stack<Integer> open = new Stack<Integer>();\n        \n        for(int i=0;i<s.length();i++) {\n            char ch = s.charAt(i);\n            \n            //if left bracket then push it in stack\n            if(ch =='(')\n                open.push(i);\n            \n            else  if(ch == '*')\n                star.push(i);\n            \n            else{\n                //when right bracket comes, check for stack of left bracket\n                if(!open.empty()) //if non empty remove it\n                    open.pop();\n                \n                else if(!star.empty()) //if left is 0, then check if we can take star as left bracket\n                    star.pop();\n                else\n                    return false;\n            }\n        }\n        \n        \n        //left over left bracket balance needs to be checked\n        while(!open.empty()) {\n            if(star.empty())\n                return false;\n            \n            //position comparison as left bracket should come before right bracket\n            else if(open.peek()<star.peek()) {\n                open.pop();\n                star.pop();\n            }\n            \n            else\n                return false;\n        }\n        \n        return true;\n        \n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parenthesis-string","has_notes":false}