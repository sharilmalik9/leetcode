{"id":813250454,"lang":"java","lang_name":"Java","time":"8 months, 4 weeks","timestamp":1664685914,"status":10,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/813250454/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"67.5 MB","code":"class Solution {\n    public int longestPalindromeSubseq(String s) {\n        StringBuilder input1 = new StringBuilder();\n \n        \n        input1.append(s);\n        input1.reverse();\n        return longestCommonSubsequence(s,input1.toString());\n        \n    }\n     public int longestCommonSubsequence(String s, String t) {\n        int m=s.length();\n        int n=t.length();\n        \n        int dp[][] = new int[m+1][n+1];\n        \n        \n        // Arrays.fill(dp, Integer.MAX_VALUE);\n       \n        \n        for(int i = m-1; i>=0 ; i--){\n        \tfor(int j = n-1; j>=0 ; j--){\n                \n                int ans;\n\t\t\t\tif(s.charAt(i) == t.charAt(j)){\n                    ans=dp[i+1][j+1]+1;\n                } \n                else{\n                    ans=Math.max(dp[i+1][j],dp[i][j+1]);\n                    \n                }\n                dp[i][j]=ans;\n            }\n        }\n        return dp[0][0];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence","has_notes":false}