{"id":969350486,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1686548780,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/969350486/","is_pending":"Not Pending","title":"Merge Intervals","memory":"45.6 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        List<int[]> ans = new ArrayList<>();\n        if(intervals == null || intervals.length == 0){\n            return ans.toArray(new int[0][]);\n        }\n        Arrays.sort(intervals,(x,y) -> x[0] - y[0]);\n        int start = intervals[0][0];\n        int end = intervals[0][1];\n        for(int[] interval : intervals){\n            if(interval[0]<= end){\n                end = Math.max(end,interval[1]);\n            }\n            else{\n                ans.add(new int[]{start,end});\n                start = interval[0];\n                end = interval[1];\n            }\n        }\n        ans.add(new int[]{start,end});\n        return ans.toArray(new int[0][]);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false}