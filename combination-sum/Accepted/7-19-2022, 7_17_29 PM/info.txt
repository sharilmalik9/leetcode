{"id":751144474,"lang":"java","lang_name":"Java","time":"11 months, 2 weeks","timestamp":1658238449,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/751144474/","is_pending":"Not Pending","title":"Combination Sum","memory":"44.9 MB","code":"class Solution {\n    // TC --> O(2^target * k) || SC --> O(target * k) || k is avg length of the subset\n    private void combinationSumUtil(int ind, int target, ArrayList<Integer> combination, int[] candidates, List<List<Integer>> allCombinations) {\n        //  Assumption :: combinationSumUtil() will store all the combinations which sums to target in allCombinations data structure\n        \n        //base - case\n        if(ind == candidates.length) return;\n        if(target == 0) {\n            allCombinations.add(new ArrayList<Integer>(combination));\n            return;\n        }\n        \n        //Main - logic :: pick() and non-pick\n        \n        //pick (as we can pick same number any numer of times), we will remain at teh same index after picking \n        if(target >= candidates[ind]) {\n            combination.add(candidates[ind]);\n            combinationSumUtil(ind, target - candidates[ind], combination, candidates, allCombinations);\n            combination.remove(combination.size()-1);\n        }\n        \n        //not-pick (we are no more interested in elment at index = ind, so we move further index)\n        combinationSumUtil(ind+1, target, combination, candidates, allCombinations);\n    }\n    \n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> allCombinations = new ArrayList<>();\n        ArrayList<Integer> combination = new ArrayList<>();\n        combinationSumUtil(0, target, combination, candidates, allCombinations);\n        return allCombinations;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false}