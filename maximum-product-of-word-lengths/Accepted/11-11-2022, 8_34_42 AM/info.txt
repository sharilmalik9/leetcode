{"id":841105964,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1668135882,"status":10,"status_display":"Accepted","runtime":"339 ms","url":"/submissions/detail/841105964/","is_pending":"Not Pending","title":"Maximum Product of Word Lengths","memory":"119.7 MB","code":"class Solution {\n    public int maxProduct(String[] words) {\n        Arrays.sort(words,(a,b)->b.length()-a.length());\n        \n        int ans = 0;\n        for(int i=0;i<words.length;i++){\n            if(words[i].length() * words[i].length() <= ans) break;\n            \n            for(int j=i+1;j<words.length;j++){\n                \n                if(!isCommon(words[i],words[j])){\n                    ans = Math.max(ans,words[i].length()*words[j].length());\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n    private boolean isCommon(String a,String b){\n        boolean[] freq = new boolean[26];\n        for(int i=0;i<a.length();i++){\n            freq[a.charAt(i)-'a'] = true;\n        }\n        for(int i=0;i<b.length();i++){\n            if(freq[b.charAt(i)-'a']) return true;\n        }\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-word-lengths","has_notes":false}