{"id":881558780,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674181447,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/881558780/","is_pending":"Not Pending","title":"Non-decreasing Subsequences","memory":"49.9 MB","code":"class Solution {\n    public List<List<Integer>> findSubsequences(int[] nums) {\n         List<List<Integer>> ans= new ArrayList<>();\n         List<Integer> ls= new ArrayList<>();\n         Set<List<Integer>> hs= new HashSet<>();\n        \n         help(hs,ls,nums,0);\n         for(List<Integer> i : hs){\n             if(i.size()>1){\n                 ans.add(i);\n             }\n         }\n         return ans;\n    \n    }\n    public void help( Set<List<Integer>> hs,List<Integer> ls,int[] nums,int idx){\n        \n        if(idx==nums.length){\n            hs.add(new ArrayList<>(ls));\n            return;\n        }\n\n\n       help(hs,ls,nums,idx+1);\n       if(ls.size()==0 || (nums[idx]>=ls.get(ls.size()-1))){\n           ls.add(nums[idx]);\n           help(hs,ls,nums,idx+1);\n           ls.remove(ls.size()-1);\n       }\n\n\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-decreasing-subsequences","has_notes":false}