{"id":953892228,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1684586073,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/953892228/","is_pending":"Not Pending","title":"Redundant Connection","memory":"44.1 MB","code":"class Solution {\n        boolean[] visited;\n\n    public int[] findRedundantConnection(int[][] edges) {\n        HashMap<Integer, List<Integer>> hashMap = new HashMap<Integer, List<Integer>>();\n        for(int i = 0; i < edges.length; i++){\n            hashMap.put(i + 1, new ArrayList<>());\n        }\n\n        int[] res = new int[2];\n        for(int i = 0; i < edges.length; i++){\n            int[] edge = edges[i];\n            visited = new boolean[edges.length + 1];\n            if(!hashMap.get(edge[0]).isEmpty() && !hashMap.get(edge[1]).isEmpty() && dfs(edge[0], edge[1], hashMap)){\n                return edge;\n            }\n            hashMap.get(edge[0]).add(edge[1]);\n            hashMap.get(edge[1]).add(edge[0]);\n        }\n        return res;\n    }\n\n    public boolean dfs(int src, int target, HashMap<Integer, List<Integer>> hashMap){\n        if(src == target){\n            return true;\n        }\n        visited[src] = true;\n        List<Integer> edgeList = hashMap.get(src);\n\n        for(Integer next: edgeList){\n            if(!visited[next]){\n                if(dfs(next, target, hashMap)){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false}