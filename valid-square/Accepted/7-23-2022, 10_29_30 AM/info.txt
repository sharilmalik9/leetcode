{"id":754223174,"lang":"java","lang_name":"Java","time":"11 months, 1 week","timestamp":1658552370,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/754223174/","is_pending":"Not Pending","title":"Valid Square","memory":"42.4 MB","code":"class Solution {\n    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n        long[] disSquare = new long[6];\n        disSquare[0] = (p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]);\n        disSquare[1] = (p3[0] - p1[0]) * (p3[0] - p1[0]) + (p3[1] - p1[1]) * (p3[1] - p1[1]);\n        disSquare[2] = (p4[0] - p1[0]) * (p4[0] - p1[0]) + (p4[1] - p1[1]) * (p4[1] - p1[1]);\n        disSquare[3] = (p3[0] - p2[0]) * (p3[0] - p2[0]) + (p3[1] - p2[1]) * (p3[1] - p2[1]);\n        disSquare[4] = (p4[0] - p2[0]) * (p4[0] - p2[0]) + (p4[1] - p2[1]) * (p4[1] - p2[1]);\n        disSquare[5] = (p4[0] - p3[0]) * (p4[0] - p3[0]) + (p4[1] - p3[1]) * (p4[1] - p3[1]);\n\n        // no same point.\n        for (int i = 0; i < 6; i++) {\n            if (disSquare[i] == 0) {\n                return false;\n            }\n        }\n        Arrays.sort(disSquare);\n        // four edge equal\n        for (int i = 1; i <= 3; i++) {\n            if (disSquare[i] != disSquare[0]) {\n                return false;\n            }\n        }\n        // diagonal's square is sum of two adjacent edge's square.\n        for (int i = 4; i < 6; i++) {\n            if (disSquare[i] != 2 * disSquare[0]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-square","has_notes":false}