{"id":759218327,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1659030333,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/759218327/","is_pending":"Not Pending","title":"3Sum","memory":"59.1 MB","code":"class Solution {\n           public List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> ans = new ArrayList<>();\n        \n        for(int i=0; i<nums.length; i++){\n            if(i>0 && nums[i] == nums[i-1]){\n                continue;\n            }\n            \n            int toFind = -nums[i];\n            int low = i+1, high = nums.length-1;\n            while(low < high){\n                int sum = nums[low] + nums[high];\n                if(sum == toFind){\n                    List<Integer> curr = new ArrayList<>();\n                    curr.add(nums[i]);\n                    curr.add(nums[low]);\n                    curr.add(nums[high]);\n                    ans.add(curr);\n                    low++;\n                    high--;\n                    while(low < high && nums[low] == nums[low-1]) low++;\n                    while(low < high && nums[high] == nums[high+1]) high--;\n                }else if(sum < toFind){\n                    low++;\n                }else{\n                    high--;\n                }\n            }\n        }\n        return ans;\n    }\n  }","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum","has_notes":false}