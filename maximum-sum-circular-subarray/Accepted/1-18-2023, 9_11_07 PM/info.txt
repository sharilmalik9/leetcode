{"id":880623710,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1674056467,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/880623710/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"47.2 MB","code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n        // we compute the maximum subarray sum using kadane's algo\n        int maxSubarraySum = kadane(nums);\n        // we find total sum of the array\n        int totalSum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            totalSum += nums[i];\n            // at each iteration we invert the signs\n            // because it'll help us find min subarray sum\n            nums[i] = -nums[i]; \n        }\n\n        // now we compute min subarray sum\n        // as we had inverted the signs of every number, \n        // so actually we will internally compute max subarray sum again (with inverted signs)\n        // so we invert the result's sign to convert the max to min\n        int minSubarraySum = -kadane(nums);\n        // if all the numbers in array are negative, this condition would be hit\n        // so we return maxSubarraySum which will be the maximum element in the array\n        // say in [-1,-2,-3], maxSubarraySum would be -1 \n        // while totalSum as well as minSubarraySum would be -6\n        if (totalSum == minSubarraySum) {\n            return maxSubarraySum;\n        }\n\n        // we now calculate the max cicrular subarray sum\n        int maxCircularSubarraySum = totalSum - minSubarraySum;\n        // we return whichever is greater out of them\n        // might be possible that our normal subarray sum is greater\n        // so we return the max out of normal subarray sum and circular subarray sum\n        return Math.max(maxSubarraySum, maxCircularSubarraySum);\n    }\n\n    // this method implements kadane's algorithm to implement maximum subarray sum\n    // (LeetCode 53: Maximum Subarray)\n    private int kadane(int[] a) {\n        int sum = 0, maxSum = Integer.MIN_VALUE;\n        for (int n : a) {\n            sum += n;\n            if (sum > maxSum) maxSum = sum;\n            if (sum < 0) sum = 0;\n        }\n\n        return maxSum;\n    }\n}\n\n// TC: O(3 * n) => O(n)\n// SC: O(1)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray","has_notes":false}