{"id":958092805,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1685170234,"status":10,"status_display":"Accepted","runtime":"323 ms","url":"/submissions/detail/958092805/","is_pending":"Not Pending","title":"Stone Game VII","memory":"22.7 MB","code":"class Solution {\npublic:\n   int dp[1001][1001][2] = {};\n    \n    /*\n    * sumOfStonesBetween contains all the sub-arrays sums, thus speeding up the computation of the score's difference\n    */\n    int sumOfStonesBetween[1001][1001] = {};\n    \n    int game(int leftmostStoneIdx, int rightmostStoneIdx, int turn)\n    {\n        /*\n        *   There's no remaining stone, exit condition\n        */\n        if(leftmostStoneIdx >= rightmostStoneIdx) return 0;\n        \n        /*\n        *   If we have already happened to compute the result for the same situation, we return the previously computed result.\n        */\n        if(dp[leftmostStoneIdx][rightmostStoneIdx][turn]!=0) \n            return dp[leftmostStoneIdx][rightmostStoneIdx][turn];\n        \n        //Alice's turn\n        if(turn==0)\n        {\n            /*\n            *   When Alice picks the rightmost stone, the final score difference increases by the sum of the remaining stones\n            *   (sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx-1])\n            */\n            int scoreDiffPickingRightmostStone = \n                sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx-1] + \n                game(leftmostStoneIdx, rightmostStoneIdx-1, 1);\n            /*\n            *   When Alice picks the leftmost stone, the final score difference increases by the sum of the remaining stones\n            *   (sumOfStonesBetween[leftmostStoneIdx+1][rightmostStoneIdx])\n            */\n            int scoreDiffPickingLeftmostStone = \n                sumOfStonesBetween[leftmostStoneIdx+1][rightmostStoneIdx] + \n                game(leftmostStoneIdx+1, rightmostStoneIdx, 1);\n            \n            /*\n            *   Once computed the two different score's differences that Alice can get based on the stone she picked,\n            *   she will keep only the result maximixing this difference.\n            *   We store the solution in dp, so that we can reause it in case we come across the same situation later on.\n            */\n            dp[leftmostStoneIdx][rightmostStoneIdx][0] = max(scoreDiffPickingRightmostStone, scoreDiffPickingLeftmostStone);\n            \n            return  dp[leftmostStoneIdx][rightmostStoneIdx][0];\n        }\n        //Bob's turn\n        else\n        {\n            /*\n            *   When Bob picks the rightmost stone, the final score difference decreses by the sum of the remaining stones\n            *   (sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx-1])\n            */\n            int scoreDiffPickingRightmostStone = \n                game(leftmostStoneIdx, rightmostStoneIdx-1, 0) - \n                sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx-1];\n            \n            /*\n            *   When Bob picks the leftmost stone, the final score difference decreases by the sum of the remaining stones\n            *   (sumOfStonesBetween[leftmostStoneIdx+1][rightmostStoneIdx])\n            */\n            int scoreDiffPickingLeftmostStone = \n                game(leftmostStoneIdx+1, rightmostStoneIdx, 0) - \n                sumOfStonesBetween[leftmostStoneIdx+1][rightmostStoneIdx];\n            \n            /*\n            *   Once computed the two different score's differences that Bob can get based on the stone he picked,\n            *   he will keep only the result minimizing this difference.\n            *   We store the solution in dp, so that we can reause it in case we come across the same situation later on.\n            */\n            dp[leftmostStoneIdx][rightmostStoneIdx][1] = min(scoreDiffPickingRightmostStone, scoreDiffPickingLeftmostStone);\n            \n            return  dp[leftmostStoneIdx][rightmostStoneIdx][1];\n        }\n        \n    }\n    \n    int stoneGameVII(vector<int>& stones) \n    {\n        /*\n        * Fill up the matrix sumOfStonesBetween[start][end] with the sums of the stones between 'start' and 'end'.\n        * This way we won't need to go through each remaining stone to compute the total sum every single time a player picks one.\n        * EXAMPLE: input [5,3,1,4,2]\n        * sumOfStonesBetween[][]:\n        *\n        *    rightmostStone |   5   |   3   |   1   |   4   |   2   |\n        * leftmostStone     |\n        *           5       |   5   |   8   |   9   |   13  |   15  |\n        *           3       |       |   3   |   4   |   8   |   10  |\n        *           1       |       |       |   1   |   5   |   7   |\n        *           4       |       |       |       |   4   |   6   |\n        *           2       |       |       |       |       |   2   |\n        *\n        *   sumOfStonesBetween[1][3] = 8, meaning that given the input [5,3,1,4,2], considering the subarray between indexes 0 and 3 -\n        *   [3,1,4] - the total sum of these stones is 8.\n        */\n        for(int leftmostStoneIdx=0; leftmostStoneIdx<stones.size(); ++leftmostStoneIdx)\n        {\n            for(int rightmostStoneIdx=leftmostStoneIdx; rightmostStoneIdx<stones.size(); ++rightmostStoneIdx)\n            {\n                /*\n                * sumOfStonesBetween[IDX][IDX] = stones[IDX]; \n                */\n                if(leftmostStoneIdx == rightmostStoneIdx)\n                    sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx] = stones[leftmostStoneIdx];\n                /*\n                * sumOfStonesBetween[A][B] = sumOfStonesBetween[A][B-1] + stones[B]\n                */\n                else\n                    sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx] = \n                        sumOfStonesBetween[leftmostStoneIdx][rightmostStoneIdx-1] +\n                        stones[rightmostStoneIdx];\n            }\n        }\n        \n        return game(0, stones.size()-1, 0);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-vii","has_notes":false}