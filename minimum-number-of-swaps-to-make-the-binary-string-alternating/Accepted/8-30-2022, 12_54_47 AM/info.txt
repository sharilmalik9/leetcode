{"id":786577081,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1661801087,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/786577081/","is_pending":"Not Pending","title":"Minimum Number of Swaps to Make the Binary String Alternating","memory":"42.4 MB","code":"class Solution {\n    public int minSwaps(String s) {\n        int ones = 0;\n        int zeros = 0;\n        \n        //count no. of zeros and ones\n        for(char c: s.toCharArray()){\n            if(c=='0')\n                zeros++;\n            else\n                ones++;\n        }\n        \n        //base case we cannot make it alternative if this is the case\n        if(Math.abs(ones-zeros)>1)\n            return -1;\n        \n        //if ones are more, the string should start with 1\n        if(ones>zeros)\n            return findMinSwaps(s, '1');\n        \n        //string should start with 0\n        if(zeros>ones)\n            return findMinSwaps(s, '0');\n        \n        //if both are equal, lets check both possibilities\n        return Math.min(findMinSwaps(s, '1'),findMinSwaps(s, '0'));\n    }\n    \n    \n    //we are counting the no. of changes we are doing, but we are basically swapping two indexes,\n    //so return /2\n    public int findMinSwaps(String s, char ch){\n        int minSwaps = 0;\n        \n        for(char c: s.toCharArray()){\n            if(c!=ch)\n            {\n                minSwaps++;\n            }\n            ch = (ch == '1')? '0':'1';\n        }\n        \n        return minSwaps/2;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-swaps-to-make-the-binary-string-alternating","has_notes":false}