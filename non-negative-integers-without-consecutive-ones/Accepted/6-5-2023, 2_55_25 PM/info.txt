{"id":964263694,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1685957125,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/964263694/","is_pending":"Not Pending","title":"Non-negative Integers without Consecutive Ones","memory":"41.3 MB","code":"class Solution {\n    String s;\n    Integer[][][] dp;\n    public int findIntegers(int n) {\n        \n        s=Integer.toBinaryString(n);\n        dp=new Integer[s.length()+1][2+1][2];\n        return rec(0,-1,true);\n    }\n    public int rec(int idx,int prev,boolean bounded){\n        if(idx>=s.length()){\n            return 1;\n        }\n        if(dp[idx][prev+1][bounded?1:0]!=null){\n            return dp[idx][prev+1][bounded?1:0];\n        }\n        int ans=0;\n        ans+=rec(idx+1,0,bounded && s.charAt(idx)=='0');\n        if(bounded){\n            if(s.charAt(idx)=='1' && prev!=1 ){\n                  ans+=rec(idx+1,1,bounded && s.charAt(idx)=='1');\n            }\n        }\n        else{\n            if(prev!=1){\n                ans+=rec(idx+1,1,bounded);\n            }\n\n\n        }\n        return dp[idx][prev+1][bounded?1:0]=ans;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"non-negative-integers-without-consecutive-ones","has_notes":false}