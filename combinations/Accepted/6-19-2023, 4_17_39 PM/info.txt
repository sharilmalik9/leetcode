{"id":974682193,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1687171659,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/974682193/","is_pending":"Not Pending","title":"Combinations","memory":"45.3 MB","code":"class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        List<List<Integer>> result = new ArrayList<>();\n        backtracking(1,n,k,new LinkedList<>(),result);\n        return result;\n    }\n\n    private void backtracking(int curr, int n, int k, LinkedList<Integer> currList, List<List<Integer>> result){\n        if(currList.size()==k){\n            result.add(new ArrayList(currList));\n            return;\n        }\n        for(int i=curr;i<=n;i++){\n            currList.add(i);\n            backtracking(i+1,n,k,currList,result);\n            currList.removeLast();\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false}